<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on WNANBEI</title><link>https://wnanbei.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on WNANBEI</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://wnanbei.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>策略模式 - 设计模式系列（四）</title><link>https://wnanbei.github.io/post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E5%9B%9B/</link><pubDate>Tue, 07 Dec 2021 10:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E5%9B%9B/</guid><description>&lt;p>策略模式（Strategy Pattern）定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式（Policy）。&lt;/p></description></item><item><title>建造者模式 - 设计模式系列（三）</title><link>https://wnanbei.github.io/post/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%89/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%89/</guid><description>&lt;p>建造者模式（Builder Pattern）是一种对象构建模式，是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p></description></item><item><title>函数式选项模式 - 设计模式系列（二）</title><link>https://wnanbei.github.io/post/%E5%87%BD%E6%95%B0%E5%BC%8F%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%BA%8C/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%87%BD%E6%95%B0%E5%BC%8F%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%BA%8C/</guid><description>&lt;p>函数式选项模式（Functional Options Pattern）是一种构造结构体的模式，它通过设计一组非常有表现力和灵活的 API 来帮助配置和初始化结构体。&lt;/p></description></item><item><title>模板模式 - 设计模式系列（一）</title><link>https://wnanbei.github.io/post/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%80/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%80/</guid><description>&lt;p>模板模式是指抽象类里定义好&lt;strong>算法的执行步骤&lt;/strong>和&lt;strong>具体算法&lt;/strong>，以及可能发生变化的算法定义为&lt;strong>抽象方法&lt;/strong>。不同的子类继承该抽象类，并实现父类的抽象方法。&lt;/p>
&lt;p>优势：&lt;/p>
&lt;ul>
&lt;li>不变的算法被继承复用：不变的部分高度封装、复用。&lt;/li>
&lt;li>变化的算法子类继承并具体实现：变化的部分子类只需要具体实现抽象的部分即可，方便扩展，且可无限扩展。&lt;/li>
&lt;/ul></description></item></channel></rss>