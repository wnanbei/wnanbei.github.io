<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go语法 on WNANBEI</title><link>https://wnanbei.github.io/categories/go%E8%AF%AD%E6%B3%95/</link><description>Recent content in Go语法 on WNANBEI</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://wnanbei.github.io/categories/go%E8%AF%AD%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 基础数据结构</title><link>https://wnanbei.github.io/post/go-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>&lt;p>Go 基础数据结构 &lt;code>array&lt;/code>、&lt;code>slice&lt;/code>、&lt;code>map&lt;/code> 的声明与使用。&lt;/p></description></item><item><title>Go 并发消息队列 channel</title><link>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-channel/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-channel/</guid><description>&lt;p>&lt;code>Channel&lt;/code> 实际上是类型化消息的队列，它有以下特性：&lt;/p>
&lt;ul>
&lt;li>只能传输一种类型的数据。&lt;/li>
&lt;li>所有的类型都可以用于通道，空接口 &lt;code>interface{}&lt;/code> 也可以。&lt;/li>
&lt;li>先进先出 &lt;code>FIFO&lt;/code> 的结构。&lt;/li>
&lt;li>引用类型，所以使用 &lt;code>make()&lt;/code> 函数来给它分配内存。&lt;/li>
&lt;/ul></description></item><item><title>Go 结构体 struct</title><link>https://wnanbei.github.io/post/go-%E7%BB%93%E6%9E%84%E4%BD%93-struct/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%BB%93%E6%9E%84%E4%BD%93-struct/</guid><description>&lt;p>Go 通过类型别名 &lt;code>alias types&lt;/code> 和结构体的形式支持用户自定义类型。&lt;/p></description></item><item><title>Go interface 接口</title><link>https://wnanbei.github.io/post/go-interface-%E6%8E%A5%E5%8F%A3/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-interface-%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>interface 的一些特性：&lt;/p>
&lt;ul>
&lt;li>类型不需要显式声明它实现了某个接口：接口被隐式地实现。&lt;/li>
&lt;li>多个类型可以实现同一个接口。&lt;/li>
&lt;li>实现某个接口的类型，除了实现接口方法外，可以有其他的方法。&lt;/li>
&lt;li>一个类型可以实现多个接口。&lt;/li>
&lt;li>接口是动态类型，可以包含一个实例的引用，该实例的类型实现了此接口。&lt;/li>
&lt;li>即使接口在类型之后才定义，二者处于不同的包中，被单独编译，只要类型实现了接口中的方法，它就实现了此接口。&lt;/li>
&lt;li>接口只能访问接口内声明的方法。&lt;/li>
&lt;/ul></description></item><item><title>Go 包管理 Package</title><link>https://wnanbei.github.io/post/go-%E5%8C%85%E7%AE%A1%E7%90%86-package/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8C%85%E7%AE%A1%E7%90%86-package/</guid><description>&lt;p>Go 使用包结构 package 来定义模块、组织代码。&lt;/p></description></item><item><title>Go 流程控制语句</title><link>https://wnanbei.github.io/post/go-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link><pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid><description>&lt;p>Go 的流程控制语句，包括 &lt;code>if&lt;/code>、&lt;code>switch&lt;/code>、&lt;code>for&lt;/code>。&lt;/p></description></item><item><title>Go 函数</title><link>https://wnanbei.github.io/post/go-%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%87%BD%E6%95%B0/</guid><description>&lt;p>除了 &lt;code>main()&lt;/code>、&lt;code>init()&lt;/code> 函数外，其它所有类型的函数都可以有参数与返回值。&lt;/p>
&lt;p>函数参数、返回值以及它们的类型被统称为函数签名。&lt;/p></description></item></channel></rss>