<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WNANBEI</title><link>https://wnanbei.github.io/</link><description>Recent content on WNANBEI</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 07 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://wnanbei.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>建造者模式 - 设计模式系列（三）</title><link>https://wnanbei.github.io/post/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%89/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%89/</guid><description>&lt;p>建造者模式（Builder Pattern）是一种对象构建模式，是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p>
&lt;h2 id="使用场景">使用场景&lt;/h2>
&lt;p>当要构建的对象很大并且需要多个步骤时，使用建造者模式，有助于减小构造函数的大小。&lt;/p>
&lt;h2 id="示例">示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">myserver&lt;/span>
&lt;span style="color:#75715e">//使用一个builder类来做包装
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ServerBuilder&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Server&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Builder&lt;/span> () &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span> {
&lt;span style="color:#a6e22e">sb&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">ServerBuilder&lt;/span>)
&lt;span style="color:#a6e22e">sb&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">sb&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">Port&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;1001&amp;#34;&lt;/span>
&lt;span style="color:#75715e">// Server其他成员的默认值
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">......&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sb&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">sb&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span>) &lt;span style="color:#a6e22e">Protocol&lt;/span>(&lt;span style="color:#a6e22e">protocol&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span> {
&lt;span style="color:#a6e22e">sb&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">Protocol&lt;/span> = &lt;span style="color:#a6e22e">protocol&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sb&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">sb&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span>) &lt;span style="color:#a6e22e">Addr&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span> {
&lt;span style="color:#a6e22e">sb&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span> = &lt;span style="color:#a6e22e">addr&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sb&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">sb&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span>) &lt;span style="color:#a6e22e">Port&lt;/span>(&lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span> {
&lt;span style="color:#a6e22e">sb&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">Port&lt;/span> = &lt;span style="color:#a6e22e">port&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sb&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">sb&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span>) &lt;span style="color:#a6e22e">MaxConn&lt;/span>( &lt;span style="color:#a6e22e">maxconn&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span> {
&lt;span style="color:#a6e22e">sb&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">MaxConns&lt;/span> = &lt;span style="color:#a6e22e">maxconn&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sb&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">sb&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span>) &lt;span style="color:#a6e22e">TimeOut&lt;/span>( &lt;span style="color:#a6e22e">timeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span> {
&lt;span style="color:#a6e22e">sb&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">Timeout&lt;/span> = &lt;span style="color:#a6e22e">timeout&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sb&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">sb&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerBuilder&lt;/span>) &lt;span style="color:#a6e22e">Build&lt;/span>() (&lt;span style="color:#a6e22e">Server&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sb&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用方式">使用方式&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">myserver&lt;/span>.&lt;span style="color:#a6e22e">Builder&lt;/span>().
&lt;span style="color:#a6e22e">Addr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">Port&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;11203&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">MaxConn&lt;/span>(&lt;span style="color:#ae81ff">50&lt;/span>).
&lt;span style="color:#a6e22e">Build&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>函数式选项模式 - 设计模式系列（二）</title><link>https://wnanbei.github.io/post/%E5%87%BD%E6%95%B0%E5%BC%8F%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%BA%8C/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%87%BD%E6%95%B0%E5%BC%8F%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%BA%8C/</guid><description>&lt;p>函数式选项模式（Functional Options Pattern）是一种构造结构体的模式，它通过设计一组非常有表现力和灵活的 API 来帮助配置和初始化结构体。&lt;/p>
&lt;p>在 Uber 的 Go 语言规范中提到了该模式：&lt;/p>
&lt;blockquote>
&lt;p>Functional options 是一种模式，在该模式中，你可以声明一个不透明的 &lt;code>Option&lt;/code> 类型，该类型在某些内部结构中记录信息。你接受这些可变数量的选项，并根据内部结构上的选项记录的完整信息进行操作。&lt;/p>
&lt;p>将此模式用于构造函数和其他公共 API 中的可选参数，你预计这些参数需要扩展，尤其是在这些函数上已经有三个或更多参数的情况下。&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用场景">使用场景&lt;/h2>
&lt;p>在实际项目中，当你要处理的选项比较多，或者处理不同来源的选项（来自文件、来自环境变量等）时，可以考虑试试函数式选项模式。&lt;/p>
&lt;h2 id="示例">示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Option&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span> {
&lt;span style="color:#a6e22e">svr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>{}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span> {
&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">svr&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">svr&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="传参函数">传参函数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WithHost&lt;/span>(&lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>) {
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">host&lt;/span> = &lt;span style="color:#a6e22e">host&lt;/span>
}
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WithPort&lt;/span>(&lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>) {
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">port&lt;/span> = &lt;span style="color:#a6e22e">port&lt;/span>
}
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WithTimeout&lt;/span>(&lt;span style="color:#a6e22e">timeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>) {
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">timeout&lt;/span> = &lt;span style="color:#a6e22e">timeout&lt;/span>
}
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WithMaxConn&lt;/span>(&lt;span style="color:#a6e22e">maxConn&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>) {
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">maxConn&lt;/span> = &lt;span style="color:#a6e22e">maxConn&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="客户端使用">客户端使用&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;server&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">svr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>(
&lt;span style="color:#a6e22e">WithHost&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;localhost&amp;#34;&lt;/span>),
&lt;span style="color:#a6e22e">WithPort&lt;/span>(&lt;span style="color:#ae81ff">8080&lt;/span>),
&lt;span style="color:#a6e22e">WithTimeout&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Minute&lt;/span>),
&lt;span style="color:#a6e22e">WithMaxConn&lt;/span>(&lt;span style="color:#ae81ff">120&lt;/span>),
)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">svr&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uber-示例">Uber 示例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">cache&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>)
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">cacheOption&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">cacheOption&lt;/span>) &lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>) {
&lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span> = bool(&lt;span style="color:#a6e22e">c&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WithCache&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cacheOption&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">loggerOption&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">loggerOption&lt;/span>) &lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>) {
&lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span> = &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Log&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WithLogger&lt;/span>(&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">loggerOption&lt;/span>{&lt;span style="color:#a6e22e">Log&lt;/span>: &lt;span style="color:#a6e22e">log&lt;/span>}
}
&lt;span style="color:#75715e">// Open creates a connection.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Open&lt;/span>(
&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Option&lt;/span>,
) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Connection&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>{
&lt;span style="color:#a6e22e">cache&lt;/span>: &lt;span style="color:#a6e22e">defaultCache&lt;/span>,
&lt;span style="color:#a6e22e">logger&lt;/span>: &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">NewNop&lt;/span>(),
}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">opts&lt;/span> {
&lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>)
}
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>防御性编程</title><link>https://wnanbei.github.io/post/%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B/</link><pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B/</guid><description>&lt;p>&lt;strong>防御性编程&lt;/strong>（Defensive programming）是&lt;strong>防御&lt;/strong>式设计的一种具体体现，它是为了保证，对程序的不可预见的使用，不会造成程序功能上的损坏。&lt;/p>
&lt;p>它可以被看作是为了减少或消除墨菲定律效力的方法。&lt;/p>
&lt;blockquote>
&lt;p>一个测试工程师走进一家酒吧，要了一杯啤酒；&lt;/p>
&lt;p>一个测试工程师走进一家酒吧，要了一杯咖啡；&lt;/p>
&lt;p>一个测试工程师走进一家酒吧，要了 -1 杯啤酒；&lt;/p>
&lt;p>一个测试工程师走进一家酒吧，要了一份 asdfQwer@24dg!&amp;amp;*(@；&lt;/p>
&lt;p>一个测试工程师走进一家酒吧，什么也没要；&lt;/p>
&lt;p>一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿；&lt;/p>
&lt;p>一个测试工程师走进一家酒吧，要了 NaN 杯 Null；&lt;/p>
&lt;p>一个测试工程师冲进一家酒吧，要了 500 吨啤酒；&lt;/p>
&lt;p>一个测试工程师把酒吧拆了；&lt;/p>
&lt;p>一个测试工程师化装成老板走进一家酒吧，要了 500 杯啤酒并且不付钱；&lt;/p>
&lt;p>一万个测试工程师在酒吧门外呼啸而过；&lt;/p>
&lt;p>&lt;strong>测试工程师们满意地离开了酒吧。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>然后一名顾客点了一份炒饭，酒吧炸了。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>这就是今天的主题， &lt;del>如何避免酒吧爆炸&lt;/del> 防御性编程。类似的概念有防御性驾驶、防御性专利。&lt;/p>
&lt;h2 id="防御性编程的概念">防御性编程的概念&lt;/h2>
&lt;h3 id="不信任原则">不信任原则&lt;/h3>
&lt;p>软件开发的不信任原则，保持 overly pessimistic（过于悲观），把和程序有关的一切请求、服务、接口、返回值、机器、框架、中间件等等都当做不可信的，步步为营、处处设防。&lt;/p>
&lt;p>我们常常提到的程序的高可用概念，其实也基于不信任原则，不信任各种软件程序、硬件设施的可用性，而使用备份、多副本等方法来提高整体系统的可用性。&lt;/p>
&lt;h3 id="边界和场景">边界和场景&lt;/h3>
&lt;p>以下是常见的一些适用于防御性编程的场景：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>用户端的输入和操作&lt;/strong>&lt;/li>
&lt;li>&lt;strong>网络环境&lt;/strong>&lt;/li>
&lt;li>&lt;strong>数据存储&lt;/strong>&lt;/li>
&lt;li>非常规操作，如：高频点击、非流程操作&lt;/li>
&lt;li>文件操作&lt;/li>
&lt;li>调用第三方库提供的方法&lt;/li>
&lt;li>调用同事写的方法&lt;/li>
&lt;li>调用自己写的方法&lt;/li>
&lt;/ul>
&lt;h3 id="缺点">缺点&lt;/h3>
&lt;p>但是使⽤防御性编程也并不是毫⽆缺点的，它需要我们做⼀些额外的操作，所以也是有⼀定缺点的:&lt;/p>
&lt;ul>
&lt;li>部分性能损失&lt;/li>
&lt;li>代码可读性的损失&lt;/li>
&lt;li>&lt;del>开发时间的损耗&lt;/del>&lt;/li>
&lt;/ul>
&lt;h3 id="优点">优点&lt;/h3>
&lt;ul>
&lt;li>尽早发现较小的问题，而不是等到它们发展成大的灾难的时候才发现&lt;/li>
&lt;li>节省大量调试时间&lt;/li>
&lt;li>避免异常逻辑的传导，明确异常原因与位置&lt;/li>
&lt;li>避免了大量安全性问题，防范部分恶意的滥用&lt;/li>
&lt;li>提高程序的健壮性&lt;/li>
&lt;/ul>
&lt;h2 id="实践场景">实践场景&lt;/h2>
&lt;h3 id="良好的编程风格和合理的设计">良好的编程风格和合理的设计&lt;/h3>
&lt;p>良好的编程风格、合理的结构设计可以使编码变得更加清晰明了，很轻松的将大部分可能发生的问题消弥在无形之中。&lt;/p>
&lt;p>所以，先思考，后编码会是一个非常良好的习惯，也是防御性编程的基础。&lt;/p>
&lt;h3 id="好的-api-设计">好的 API 设计&lt;/h3>
&lt;p>这里的 API 不仅指的是我们的 Restful api 接口，也指的是我们内部代码的方法 API。&lt;/p>
&lt;ul>
&lt;li>好的 API 易于使用：命名合理、可读性强，输入输出设置合理且扩展性好。&lt;/li>
&lt;li>好的 API 难以误用：针对各种可能的误用情况进行必要校验并给出可读性强的报错信息提示。&lt;/li>
&lt;/ul>
&lt;p>当 API 的设计良好，同时保证了易于使用和难以误用时，自然会大大提高 API 的正确使用率，降低各种因为 API 误用造成的问题。&lt;/p>
&lt;h3 id="参数验证">参数验证&lt;/h3>
&lt;p>目前后端遇最需要防御性编程的情况，应该是 api 接口的请求参数需要验证。参数的上下限、数值类型、零值、类型、格式等等都需要进行验证。&lt;/p>
&lt;p>这些错误有可能来自于用户的错误使用，也可能来自于前端的异常调用，保护我们的程序远离外部的无效数据，可以大大提高程序的稳定性。&lt;/p>
&lt;p>Gin 框架在使用 &lt;code>Bind&lt;/code> 系列方法绑定 struct 时会自动根据 struct 的 tag 来验证参数是否正确，用来验证的库是：&lt;code>go-playground/validator/v10&lt;/code>，这里有详细用法：&lt;a class="link" href="https://pkg.go.dev/github.com/go-playground/validator/v10#section-readme" target="_blank" rel="noopener"
>validator&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Field&lt;/span> &lt;span style="color:#e6db74">`binding:&amp;#34;required&amp;#34;`&lt;/span> &lt;span style="color:#75715e">//此字段值必须存在
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Field&lt;/span> &lt;span style="color:#e6db74">`binding:&amp;#34;min=2,max=10&amp;#34;`&lt;/span> &lt;span style="color:#75715e">//限制数值类型大小、字符串类型长度、切片元素数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Field&lt;/span> &lt;span style="color:#e6db74">`binding:&amp;#34;boolean&amp;#34;`&lt;/span> &lt;span style="color:#75715e">//限制为 bool 类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Field&lt;/span> &lt;span style="color:#e6db74">`binding:&amp;#34;number&amp;#34;`&lt;/span> &lt;span style="color:#75715e">//限制为数字
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Field&lt;/span> &lt;span style="color:#e6db74">`binding:&amp;#34;email&amp;#34;`&lt;/span> &lt;span style="color:#75715e">//限制为邮箱格式
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Field&lt;/span> &lt;span style="color:#e6db74">`binding:&amp;#34;omitempty,rgb|rgba&amp;#34;`&lt;/span> &lt;span style="color:#75715e">//此字段值可以不存在，仅在存在时验证格式
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果对于绑定时自动验证的方式不满足，或者需要在其他地方使用，可以单独使用 &lt;code>validator&lt;/code> 库。&lt;/p>
&lt;p>需要注意的是，单独使用 validator 库时，tag 需要使用 &lt;code>validate&lt;/code> 而不是 &lt;code>binding&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Field&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`validate:&amp;#34;number&amp;#34;`&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">validate&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">validator&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Test&lt;/span>{&lt;span style="color:#a6e22e">Field&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;abcd&amp;#34;&lt;/span>}
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">validate&lt;/span>.&lt;span style="color:#a6e22e">Struct&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以单独验证一个字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">validate&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">validator&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;18&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">validate&lt;/span>.&lt;span style="color:#a6e22e">Var&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;min=5,max=10&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>validator&lt;/code> 验证 struct 时，返回的异常可以清晰的说明是哪个字段出了什么问题，根据不同的异常返回不同的提示信息，可以更好的提升接口的清晰性、正确性。&lt;/p>
&lt;h3 id="dao-层参数验证">dao 层参数验证&lt;/h3>
&lt;p>除了 api 接口的参数异常属于高危情况外，访问数据的 dao 层接受的参数同样需要严格的参数验证，这种情况不仅关系到代码正常运行，更影响到整个系统、业务的安全。&lt;/p>
&lt;p>dao 层接收到的参数可能来自于程序内部的错误处理、api 接口未过滤的异常参数等情况，但由于直面数据库，造成严重后果的可能性更大，所以更要谨慎验证参数的正确性。&lt;/p>
&lt;h3 id="谨慎强制类型转换">谨慎强制类型转换&lt;/h3>
&lt;p>一定要对于强制的类型转换保持警惕，如果转换方法会返回异常的，一定要处理异常，并预设转换失败的场景进行处理。&lt;/p>
&lt;p>以下是一些常见的类型转换高危场景：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>解析 json 数据，格式异常转换失败；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>string 转 int，格式异常转换失败；&lt;/strong>&lt;/li>
&lt;li>高精度数值转低精度数值，有可能造成精度的丢失，如：int64 转 int32、float64 转 float32；&lt;/li>
&lt;li>string 转 time.Time，格式异常转换失败；&lt;/li>
&lt;/ul>
&lt;h3 id="异常处理">异常处理&lt;/h3>
&lt;p>Go 语言处理所有异常的理念，是非常符合防御式编程的思想的。一定不要预设异常不会发生而忽略异常。&lt;/p>
&lt;p>而异常的处理方法则需要根据业务的具体情况具体分析，常见的处理方法有以下几类：&lt;/p>
&lt;ul>
&lt;li>返回中立值&lt;/li>
&lt;li>换用下一个正确数据&lt;/li>
&lt;li>返回与前一次相同的值&lt;/li>
&lt;li>换用最接近的有效值&lt;/li>
&lt;li>在日志中记录告警信息&lt;/li>
&lt;li>返回错误码&lt;/li>
&lt;li>调用错误处理子程序或对象&lt;/li>
&lt;li>关闭程序&lt;/li>
&lt;/ul>
&lt;p>除此之外，像 gin 的默认中间件 &lt;code>Recovery&lt;/code> 中间件会自动恢复 api 中的 panic，并记录日志，这也是一种防御性编程的方式。&lt;/p>
&lt;h3 id="返回数据的验证">返回数据的验证&lt;/h3>
&lt;p>再次强调，不要信任任何方法的返回的数据，不论是数据库数据的查询、函数方法的调用还是 Json 解析出的数据，未返回异常的数据错误更加致命，因为这往往意味着这种错误不在预料之中，并且在代码层面难以查找。&lt;/p>
&lt;p>所以在异常处理的基础上，还需要验证返回的数据是否正确，某些重要的数据是否存在，格式是否正常，如 Python 之类的动态类型语言还需要判断变量的类型是否正确。&lt;/p>
&lt;p>比如我们有一个查询 User 的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">FindUser&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们需要这个 User 其中的部门信息时我们可能会这样写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">FindUser&lt;/span>(&lt;span style="color:#a6e22e">userID&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">Department&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么可能在大多数情况下，这样的代码运行是正常的，因为根据 ID 查询用户，基本都是有这个 ID 才会去查，那自然返回的 &lt;code>*User&lt;/code> 是有值的。但一旦某一天，查询的是一个不存在的 ID 时，这里就会抱错，而且是一个空指针异常。&lt;/p>
&lt;p>所以，在做这类操作之前，最好再对数据做一层校验，以确保程序逻辑的完善：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">FindUser&lt;/span>(&lt;span style="color:#a6e22e">userID&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;user not exists&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">Department&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="包变量私有化">包变量私有化&lt;/h3>
&lt;p>不需要被外部使用的包变量，使用首字母小写的私有变量，如果外部需要访问，也尽量使用全局方法提供给外部访问。避免包变量在外部被错误修改，导致程序的异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">env&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;prod&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Env&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果包变量需要被外部变更，特别是一些比较复杂的对象，更要使用包提供的方法去进行安全的变更。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ChangeEnv&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">checkConfig&lt;/span>(); &lt;span style="color:#a6e22e">ok&lt;/span> { &lt;span style="color:#75715e">//做一些检查、判断的工作
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;change env failed.&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="尽量使用常量替代全局变量">尽量使用常量替代全局变量&lt;/h3>
&lt;p>如果某些全局变量不需要修改，那么使用常量来声明这些变量，利用常量不可更改的属性来保护这些变量的值不被他人变更。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">StatusContinue&lt;/span> = &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#75715e">// RFC 7231, 6.2.1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">StatusSwitchingProtocols&lt;/span> = &lt;span style="color:#ae81ff">101&lt;/span> &lt;span style="color:#75715e">// RFC 7231, 6.2.2
&lt;/span>&lt;span style="color:#75715e">&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">statusText&lt;/span> = &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;span style="color:#a6e22e">StatusContinue&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Continue&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">StatusSwitchingProtocols&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Switching Protocols&amp;#34;&lt;/span>,
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StatusText&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">statusText&lt;/span>[&lt;span style="color:#a6e22e">code&lt;/span>]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="超时控制">超时控制&lt;/h3>
&lt;p>调用接口或长耗时任务，需要限制最大超时时间，并审慎地判断超时时间的值。如果超时时间过长，短时间并发量增大的情况下，会造成大量协程被挂起，消耗大量资源，造成系统异常。&lt;/p>
&lt;p>Go 中可以使用 &lt;code>context&lt;/code> 或 &lt;code>time.After&lt;/code> 等机制对超时行为进行控制。&lt;/p>
&lt;h3 id="频率控制">频率控制&lt;/h3>
&lt;p>超时控制在很多时候只能降低问题的发生概率，减缓问题的严重程度，而频率控制则能在无法降低操作耗时的情况下，基本维持住程序的可用性。&lt;/p>
&lt;p>特别是一些操作消耗过大的场景，一定要在频率上进行限制，否则各种资源耗尽都会导致程序的不可运行。&lt;/p>
&lt;p>而除了保护自己程序的可用性外，频率限制同时可以保护被调用方的可用性，避免出现自己扛得住，但把被调用方打挂了的情况。&lt;/p>
&lt;p>频率控制成熟的算法有很多，比如令牌桶、漏桶，具体的实现各个语言也都有现成的第三方库，可以根据业务的具体类型选择适合的方式。&lt;/p>
&lt;p>频率控制也分为不同的粒度，以下是一些常见的情况：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>用户流控：限制每个用户在一定时间内对某个接口的调用数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接口流控：限制一定时间内某个接口的总调用数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单机流控：限制一定时间内单台服务器上的项目所有接口的总调用数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分布式流控：限制一定时间内项目所有服务器的总请求数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="自动释放资源">自动释放资源&lt;/h3>
&lt;p>在程序中获取资源后，尽量使用语言特性自动释放资源，比如 Go 语言中可以使用 &lt;code>defer&lt;/code>，Python 中可以使用 &lt;code>with&lt;/code> 语法，在逻辑结束后，自动把资源释放掉。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">file&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">file&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手动释放资源，是极其不可靠的行为。&lt;/p>
&lt;p>在代码较简单的情况下，可以在每一个代码分支结束时手动释放资源。&lt;/p>
&lt;p>但是当代码复杂起来，时间跨度拉长，变更了开发人员等情况下，某些代码分支没有释放资源而直接结束方法后。就会造成资源永久挂起、内存泄漏等问题。&lt;/p>
&lt;p>比如一个简单的场景：现在有一个 500 行的函数，需要检查一个 bug，你发现是少做了一层判断，加上判断后，顺手写了个异常判断 &lt;code>if err != nil { return }&lt;/code>，看上去是正常的操作吧，此时一旦前半部分有获取资源资源需要手动释放的情况，这里直接退出函数就会造成资源的泄漏。&lt;/p>
&lt;p>同样的，反过来想，作为一个后来的代码维护者，在修改代码时，同样要注意检查是否有需要手动释放的资源。&lt;/p>
&lt;h3 id="隔离程序">隔离程序&lt;/h3>
&lt;p>隔离程序指的是对于防御性编程的灵活调整，毕竟防御性编程始终是有成本的。而&lt;strong>绝对防御&lt;/strong>式编程将消耗大量的精力，造成非常臃肿的代码。&lt;/p>
&lt;p>所以我们可以将高危、容易出错的地方加上防御性编程代码，而在不容易出错的、内部的位置减少或去掉防御性编程代码。&lt;/p>
&lt;p>⽽在内部的函数调⽤等地⽅，可以适当的减少防御性代码，但某些关键数据和关键逻辑位置，防御性代码依然是必要的。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/%e9%9a%94%e7%a6%bb%e7%a8%8b%e5%ba%8f.png" >
&lt;img src="https://wnanbei.github.io/images/go/%e9%9a%94%e7%a6%bb%e7%a8%8b%e5%ba%8f.png"
loading="lazy"
alt="隔离程序">
&lt;/a>
&lt;figcaption>隔离程序&lt;/figcaption>
&lt;/figure>&lt;/p></description></item><item><title>MongoDB 索引用法与原理</title><link>https://wnanbei.github.io/post/mongodb-%E7%B4%A2%E5%BC%95%E7%94%A8%E6%B3%95%E4%B8%8E%E5%8E%9F%E7%90%86/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mongodb-%E7%B4%A2%E5%BC%95%E7%94%A8%E6%B3%95%E4%B8%8E%E5%8E%9F%E7%90%86/</guid><description>&lt;p>从 MongoDB 3.2 开始，WiredTiger 成为 MongoDB 的默认存储引擎，WiredTiger 引擎使用 B+ 树作为索引的数据结构。&lt;/p>
&lt;p>MongoDB 索引官方中文文档：&lt;a class="link" href="https://docs.mongoing.com/indexes" target="_blank" rel="noopener"
>MongoDB 索引&lt;/a>&lt;/p>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="创建索引">创建索引&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">createIndex&lt;/span>( { &lt;span style="color:#a6e22e">key1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>1 代表升序&lt;/li>
&lt;li>-1 代表降序&lt;/li>
&lt;/ul>
&lt;h3 id="复合索引">复合索引&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">createIndex&lt;/span>( {&lt;span style="color:#e6db74">&amp;#34;keypart1&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;keypart2&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;keypart3&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>} )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>MongoDB 的复合索引也需要满足最左匹配原则。&lt;/p>
&lt;h3 id="多键索引">多键索引&lt;/h3>
&lt;p>为了索引包含数组值的字段，MongoDB 为数组中的每个元素创建一个索引键。这些多键索引支持对数组字段的高效查询。多键索引可以在包含标量值(例如字符串、数字)和嵌套文档的数组上构造。&lt;/p>
&lt;p>创建方式与创建普通索引相同：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">createIndex&lt;/span>( { &lt;span style="color:#a6e22e">key1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 MongoDB 3.4 开始，对于使用 MongoDB 3.4 或更高版本创建的多键索引，MongoDB 会跟踪哪个索引字段或哪些字段导致一个索引成为多键索引。&lt;/p>
&lt;p>跟踪这些信息可以让 MongoDB 查询引擎使用更紧密的索引边界。&lt;/p>
&lt;h3 id="唯一索引">唯一索引&lt;/h3>
&lt;p>创建唯一索引：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">members&lt;/span>.&lt;span style="color:#a6e22e">createIndex&lt;/span>( { &lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> }, { &lt;span style="color:#a6e22e">unique&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于一个范围分片集合，只有以下索引可以是唯一的:&lt;/p>
&lt;ul>
&lt;li>分片键上的索引。&lt;/li>
&lt;li>一个复合索引，其中片键是一个前缀。&lt;/li>
&lt;li>默认 &lt;code>_id&lt;/code> 索引。如果 &lt;code>_id&lt;/code> 字段不是分片键或分片键的前缀，&lt;code>_id&lt;/code> 索引只对每个分片强制唯一性约束，而不是对所有分片强制唯一。&lt;/li>
&lt;/ul>
&lt;h3 id="部分索引">部分索引&lt;/h3>
&lt;p>MonogDB 3.2 版本之后开始支持部分索引特性。&lt;/p>
&lt;p>部分索引只索引集合中部分文档，部分索引可以降低存储需求，并降低创建和维护索引的性能成本。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">restaurants&lt;/span>.&lt;span style="color:#a6e22e">createIndex&lt;/span>(
{ &lt;span style="color:#a6e22e">cuisine&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> },
{ &lt;span style="color:#a6e22e">partialFilterExpression&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">rating&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$gt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> } } }
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部分索引接受以下筛选条件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>field: value&lt;/code>、&lt;code>$eq&lt;/code>&lt;/li>
&lt;li>&lt;code>exists: true&lt;/code>&lt;/li>
&lt;li>&lt;code>$gt&lt;/code>、&lt;code>$gte&lt;/code>、&lt;code>$lt&lt;/code>、&lt;code>$lte&lt;/code>&lt;/li>
&lt;li>&lt;code>$type&lt;/code>&lt;/li>
&lt;li>&lt;code>$and&lt;/code> 只在顶层操作符&lt;/li>
&lt;/ul>
&lt;p>使用唯一索引和部分索引的 &lt;code>exists:true&lt;/code> 条件，可以让唯一索引在字段存在时才进行索引。&lt;/p>
&lt;h2 id="explain">explain&lt;/h2>
&lt;p>&lt;code>explain&lt;/code> 语句可以用来查看语句的执行计划：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>({&lt;span style="color:#e6db74">&amp;#34;commonfield&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;THctcu&amp;#34;&lt;/span>}).&lt;span style="color:#a6e22e">explain&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;executionStats&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="模式">模式&lt;/h3>
&lt;p>explain 语句有三种模式：&lt;/p>
&lt;ol>
&lt;li>&lt;code>queryPlanner&lt;/code> - 默认模式，根据查询优化器的评估，选择一个最佳的查询计划。&lt;/li>
&lt;li>&lt;code>executionStats&lt;/code> - 根据查询优化器的评估，选择一个最佳的查询计划执行，执行完毕后返回结果的统计信息。
&lt;ul>
&lt;li>对于写操作，返回关于更新和删除操作的信息，但是并不将修改应⽤到数据库。&lt;/li>
&lt;li>对于被拒绝的执⾏计划，不返回其统计信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>allPlansExecution&lt;/code> - 按照最佳的执⾏计划执⾏以及列出统计信息，还会列出⼀些候选的执⾏计划。
&lt;ul>
&lt;li>如果有多个查询计划 ，executionStats 信息包括这些执⾏计划的部分统计信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="字段">字段&lt;/h3>
&lt;p>explain 返回的信息较多，其中有一些比较重要的字段：&lt;/p>
&lt;ul>
&lt;li>&lt;code>nReturned&lt;/code> - 实际返回数据行数。&lt;/li>
&lt;li>&lt;code>executionTimeMills&lt;/code> - 语句执行时间，单位毫秒。&lt;/li>
&lt;li>&lt;code>totalKeysExamined&lt;/code> - 根据索引扫描的文档数量。&lt;/li>
&lt;li>&lt;code>totalDocsExamined&lt;/code> - 所有的文档扫描数量，如果与 &lt;code>totalKeysExamined&lt;/code> 数量相同，说明所有扫描都走的索引。&lt;/li>
&lt;li>&lt;code>stage&lt;/code> - 查询的阶段类型，以下是可能的值：
&lt;ul>
&lt;li>COLLSCAN - 全表扫描&lt;/li>
&lt;li>IXSCAN - 索引扫描&lt;/li>
&lt;li>FETCH - 根据索引去主键索引查询对应文档&lt;/li>
&lt;li>SORT - 内存中排序&lt;/li>
&lt;li>LIMIT - 限制返回文档数量&lt;/li>
&lt;li>SKIP - 跳过指定条数&lt;/li>
&lt;li>SHARD_MERGE - 将各个分片返回的数据进行 merge&lt;/li>
&lt;li>IDHACK - 根据 _id 进行查询&lt;/li>
&lt;li>COUNT - 进行 count 运算&lt;/li>
&lt;li>TEXT - 全文索引查询&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="概念与原理">概念与原理&lt;/h2>
&lt;p>由于 MongoDB 与 MySQL 都使用 B+ 树作为索引的数据结构，所以有一些概念是基本相通的。&lt;/p>
&lt;h3 id="最左匹配">最左匹配&lt;/h3>
&lt;p>同 &lt;a class="link" href="https://wnanbei.github.io/post/mysql-%e7%b4%a2%e5%bc%95%e8%af%a6%e8%a7%a3/#%e6%9c%80%e5%b7%a6%e5%89%8d%e7%bc%80" >MySQL 最左匹配&lt;/a>&lt;/p>
&lt;h3 id="索引下推">索引下推&lt;/h3>
&lt;p>同 &lt;a class="link" href="https://wnanbei.github.io/post/mysql-%e7%b4%a2%e5%bc%95%e8%af%a6%e8%a7%a3/#%e7%b4%a2%e5%bc%95%e4%b8%8b%e6%8e%a8" >MySQL 索引下推&lt;/a>&lt;/p>
&lt;h3 id="覆盖索引">覆盖索引&lt;/h3>
&lt;p>同 &lt;a class="link" href="https://wnanbei.github.io/post/mysql-%e7%b4%a2%e5%bc%95%e8%af%a6%e8%a7%a3/#%e8%a6%86%e7%9b%96%e7%b4%a2%e5%bc%95" >MySQL 覆盖索引&lt;/a>&lt;/p>
&lt;h3 id="使用索引排序">使用索引排序&lt;/h3>
&lt;p>索引本身是有序的，所以当 sort 排序条件与索引顺序一致时，sort 可以直接使用索引的查询结果，不需要做额外操作。而如果不能使用索引的顺序，那么额外需要在内存中进行排序操作。&lt;/p></description></item><item><title>模板模式 - 设计模式系列（一）</title><link>https://wnanbei.github.io/post/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%80/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%80/</guid><description>&lt;p>模板模式是指抽象类里定义好&lt;strong>算法的执行步骤&lt;/strong>和&lt;strong>具体算法&lt;/strong>，以及可能发生变化的算法定义为&lt;strong>抽象方法&lt;/strong>。不同的子类继承该抽象类，并实现父类的抽象方法。&lt;/p>
&lt;p>优势：&lt;/p>
&lt;ul>
&lt;li>不变的算法被继承复用：不变的部分高度封装、复用。&lt;/li>
&lt;li>变化的算法子类继承并具体实现：变化的部分子类只需要具体实现抽象的部分即可，方便扩展，且可无限扩展。&lt;/li>
&lt;/ul>
&lt;h2 id="适用场景">适用场景&lt;/h2>
&lt;p>满足如下要求的所有场景:&lt;/p>
&lt;blockquote>
&lt;p>算法执行的步骤是稳定&lt;code>不变的&lt;/code>，但是具体的某些算法可能存在&lt;code>变化&lt;/code>的场景。&lt;/p>
&lt;/blockquote>
&lt;p>比如说煮面，需要先烧水，水烧开之后再放面进去，这个流程被称为 &lt;code>煮面过程&lt;/code>，而烧水方式可能有多种，比如柴火烧、电磁炉烧、天然气烧。所以可以得出以下结论：&lt;/p>
&lt;ul>
&lt;li>&lt;code>煮面过程&lt;/code>的步骤是稳定不变的&lt;/li>
&lt;li>&lt;code>煮面过程&lt;/code>的烧水方式是可变的&lt;/li>
&lt;/ul>
&lt;p>如果能满足这样的条件，就可以使用模板方法。&lt;/p>
&lt;h2 id="使用方式">使用方式&lt;/h2>
&lt;p>可以有四个步骤：&lt;/p>
&lt;ul>
&lt;li>业务梳理&lt;/li>
&lt;li>代码建模&lt;/li>
&lt;li>代码 Demo&lt;/li>
&lt;/ul>
&lt;h3 id="业务梳理">业务梳理&lt;/h3></description></item><item><title>ElasticSearch CRUD 接口</title><link>https://wnanbei.github.io/post/elasticsearch-crud-%E6%8E%A5%E5%8F%A3/</link><pubDate>Sat, 06 Nov 2021 16:17:25 +0000</pubDate><guid>https://wnanbei.github.io/post/elasticsearch-crud-%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>ElasticSearch 使用 HTTP 协议的 Restful 接口，来对接不同的程序系统。&lt;/p>
&lt;h2 id="查询">查询&lt;/h2>
&lt;h3 id="get">Get&lt;/h3>
&lt;p>读取一条文档。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">GET&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_doc&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mget">Mget&lt;/h3>
&lt;p>批量读取文档。&lt;/p>
&lt;p>&lt;strong>在请求体中指定 index：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">GET&lt;/span> &lt;span style="color:#a6e22e">_mget&lt;/span>
{
&lt;span style="color:#e6db74">&amp;#34;docs&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> [
{
&lt;span style="color:#e6db74">&amp;#34;_index&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
},
{
&lt;span style="color:#e6db74">&amp;#34;_index&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>URI 中指定 index：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">GET&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_mget&lt;/span>
{
&lt;span style="color:#e6db74">&amp;#34;docs&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> [
{
&lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
},
{
&lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="msearch">Msearch&lt;/h3>
&lt;p>批量搜索文档&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">POST&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_msearch&lt;/span>
{}
{&lt;span style="color:#e6db74">&amp;#34;query&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;match_all&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> {}},&lt;span style="color:#e6db74">&amp;#34;size&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>}
{&lt;span style="color:#e6db74">&amp;#34;index&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;kibana_sample_data_flights&amp;#34;&lt;/span>}
{&lt;span style="color:#e6db74">&amp;#34;query&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;match_all&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> {}},&lt;span style="color:#e6db74">&amp;#34;size&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建">创建&lt;/h2>
&lt;h3 id="create">Create&lt;/h3>
&lt;p>创建一条文档，如果指定的 id 存在，则报错&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">POST&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_create&lt;/span>
&lt;span style="color:#a6e22e">PUT&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_create&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>
&lt;span style="color:#a6e22e">PUT&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_doc&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">op_type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>
{
&lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Mike&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;post_date&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2019-04-15T14:12:12&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;trying out Kibana&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>不指定 &lt;code>id&lt;/code> 时，系统会自动生成 id&lt;/li>
&lt;li>如果指定 &lt;code>id&lt;/code>，则在 URI 中显式指定，如果指定的 id 存在，则报错&lt;/li>
&lt;/ul>
&lt;h3 id="index">Index&lt;/h3>
&lt;p>创建一条文档，如果指定的 id 存在，旧文档会被删除，插入新文档，文档版本信息 +1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">PUT&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_doc&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新">更新&lt;/h2>
&lt;h3 id="update">Update&lt;/h3>
&lt;p>不会删除原文档，真正的数据更新&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">POST&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_update&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>
{
&lt;span style="color:#e6db74">&amp;#34;doc&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;post_date&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2019-05-15T14:12:12&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;trying out Elasticsearch&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Update 的内容必须放在 &lt;code>doc&lt;/code> 字段中&lt;/li>
&lt;/ul>
&lt;h2 id="删除">删除&lt;/h2>
&lt;h3 id="delete">Delete&lt;/h3>
&lt;p>删除一条文档&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">DELETE&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_doc&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="批量操作">批量操作&lt;/h2>
&lt;h3 id="bulk">Bulk&lt;/h3>
&lt;p>一次请求执行多条语句&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">POST&lt;/span> &lt;span style="color:#a6e22e">_bulk&lt;/span>
{ &lt;span style="color:#e6db74">&amp;#34;index&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#e6db74">&amp;#34;_index&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> } }
{ &lt;span style="color:#e6db74">&amp;#34;field1&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;value1&amp;#34;&lt;/span> }
{ &lt;span style="color:#e6db74">&amp;#34;delete&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#e6db74">&amp;#34;_index&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> } }
{ &lt;span style="color:#e6db74">&amp;#34;create&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#e6db74">&amp;#34;_index&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test2&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> } }
{ &lt;span style="color:#e6db74">&amp;#34;field1&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;value3&amp;#34;&lt;/span> }
{ &lt;span style="color:#e6db74">&amp;#34;update&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_index&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>} }
{ &lt;span style="color:#e6db74">&amp;#34;doc&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;field2&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;value2&amp;#34;&lt;/span>} }
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工具">工具&lt;/h2>
&lt;h3 id="analyze">Analyze&lt;/h3>
&lt;p>分词接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">GET&lt;/span> &lt;span style="color:#a6e22e">_analyze&lt;/span>
{
&lt;span style="color:#e6db74">&amp;#34;analyzer&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;standard&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&amp;#34;&lt;/span>
}
&lt;span style="color:#a6e22e">GET&lt;/span> &lt;span style="color:#a6e22e">index_name&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">_analyze&lt;/span> &lt;span style="color:#75715e">// 根据某 index 某字段的分词方式分词
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;field&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;title&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&amp;#34;&lt;/span>
}
&lt;span style="color:#a6e22e">GET&lt;/span> &lt;span style="color:#a6e22e">_analyze&lt;/span> &lt;span style="color:#75715e">// 自定义分词
&lt;/span>&lt;span style="color:#75715e">&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;tokenizer&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;standard&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;filter&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;lowercase&amp;#34;&lt;/span>],
&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MongoDB find 查询</title><link>https://wnanbei.github.io/post/mongodb-find-%E6%9F%A5%E8%AF%A2/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mongodb-find-%E6%9F%A5%E8%AF%A2/</guid><description>&lt;p>MongoDB find 数据查询命令。&lt;/p>
&lt;p>MongoDB 官方中文文档：&lt;a class="link" href="https://docs.mongoing.com/" target="_blank" rel="noopener"
>MongoDB中文手册|官方文档中文版&lt;/a>，基于 4.2 版本。&lt;/p>
&lt;h2 id="查询所有数据">查询所有数据&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( {} )
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="条件查询">条件查询&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;D&amp;#34;&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="in">IN&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$in&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [ &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;D&amp;#34;&lt;/span> ] } } )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="and">AND&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( {
&lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$lt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> }
} )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="or">OR&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( {
&lt;span style="color:#a6e22e">$or&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
{ &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span> },
{ &lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$lt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> } }
]
} )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="and-和-in-混用">AND 和 IN 混用&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( {
&lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">$or&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
{ &lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$lt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> } },
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">/^p/&lt;/span> }
]
} )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="范围查询">范围查询&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">bios&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">birth&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$gt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Date(&lt;span style="color:#e6db74">&amp;#39;1940-01-01&amp;#39;&lt;/span>), &lt;span style="color:#a6e22e">$lt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Date(&lt;span style="color:#e6db74">&amp;#39;1960-01-01&amp;#39;&lt;/span>) } } )
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="返回结果筛选">返回结果筛选&lt;/h2>
&lt;p>&lt;code>sort&lt;/code>、&lt;code>limit&lt;/code>、&lt;code>skip&lt;/code> 三个命令的顺序不会影响执行的效果。&lt;/p>
&lt;h3 id="sort">sort&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">bios&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>().&lt;span style="color:#a6e22e">sort&lt;/span>( { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">age&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="limit">limit&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">bios&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>().&lt;span style="color:#a6e22e">limit&lt;/span>( &lt;span style="color:#ae81ff">5&lt;/span> )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="skip">skip&lt;/h3>
&lt;p>跳过指定条数数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">bios&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>().&lt;span style="color:#a6e22e">skip&lt;/span>( &lt;span style="color:#ae81ff">5&lt;/span> )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="countdocuments">countDocuments&lt;/h3>
&lt;p>&lt;code>count&lt;/code> 方法在没有设置 query 条件时，只能返回 collection 在 meta 中的不确切的数量，在 MongoDB 4.0 已被弃用。&lt;/p>
&lt;p>使用新的 &lt;code>countDocuments&lt;/code> 方法返回确切的数据数量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">orders&lt;/span>.&lt;span style="color:#a6e22e">countDocuments&lt;/span>( { &lt;span style="color:#a6e22e">ord_dt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$gt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Date(&lt;span style="color:#e6db74">&amp;#39;01/01/2012&amp;#39;&lt;/span>) } }, { &lt;span style="color:#a6e22e">limit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="嵌套数据查询">嵌套数据查询&lt;/h2>
&lt;p>查询数据中嵌套的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( {
&lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#a6e22e">h&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>,
&lt;span style="color:#a6e22e">w&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span>,
&lt;span style="color:#a6e22e">uom&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cm&amp;#34;&lt;/span>
}
} )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注：条件字段顺序必须完全与数据相同，否则匹配不到。&lt;/strong>&lt;/p>
&lt;p>也可以使用 &lt;code>dot&lt;/code> 方式指定嵌套字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#e6db74">&amp;#34;size.h&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$lt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> } } )
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#e6db74">&amp;#34;size.h&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$lt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> }, &lt;span style="color:#e6db74">&amp;#34;size.uom&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;in&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;D&amp;#34;&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数组查询">数组查询&lt;/h2>
&lt;p>数组完全匹配，包括顺序：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">tags&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;blank&amp;#34;&lt;/span>] } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询所有数组内包含此条件的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">tags&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span> } )
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">tags&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$all&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;blank&amp;#34;&lt;/span>] } } )
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">dim_cm&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$gt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span> } } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>多条件查询：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">dim_cm&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$gt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#a6e22e">$lt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span> } } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据数组中特定索引的值查询：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#e6db74">&amp;#34;dim_cm.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$gt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span> } } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据数组长度查询：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#e6db74">&amp;#34;tags&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> } } )
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="限制查询返回字段">限制查询返回字段&lt;/h2>
&lt;p>仅返回指定的字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(
{ &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span> },
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;size.uom&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> }
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了指定的字段，其他字段都返回：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span> }, { &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">instock&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不返回 &lt;code>_id&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span> }, { &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">_id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了 &lt;code>_id&lt;/code> 字段，其他字段不能进行组合。&lt;/p>
&lt;h2 id="null-值处理">null 值处理&lt;/h2>
&lt;p>查询所有无此字段或字段值为 &lt;code>null&lt;/code> 的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仅查询字段存在且值为 &lt;code>null&lt;/code> 的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> } } )
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仅查询字段不存在的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>( { &lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$exists&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> } } )
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MongoDB 增删改操作</title><link>https://wnanbei.github.io/post/mongodb-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%93%8D%E4%BD%9C/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mongodb-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%93%8D%E4%BD%9C/</guid><description>&lt;p>MongoDB 的 Insert、Update、Delete 操作。&lt;/p>
&lt;p>MongoDB 官方中文文档：&lt;a class="link" href="https://docs.mongoing.com/" target="_blank" rel="noopener"
>MongoDB中文手册|官方文档中文版&lt;/a>，基于 4.2 版本。&lt;/p>
&lt;h2 id="insert">Insert&lt;/h2>
&lt;p>&lt;strong>特性：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>MongoDB 所有对单条数据的写操作都是原子操作；&lt;/li>
&lt;li>不指定 &lt;code>_id&lt;/code> 会自动生成；&lt;/li>
&lt;li>插入数据会返回对应 &lt;code>_id&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="单条插入">单条插入&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">insertOne&lt;/span>(
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;canvas&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#a6e22e">tags&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;cotton&amp;#34;&lt;/span>], &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">h&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">35.5&lt;/span>, &lt;span style="color:#a6e22e">uom&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cm&amp;#34;&lt;/span> } }
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="批量插入">批量插入&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">insertMany&lt;/span>([
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;journal&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span>, &lt;span style="color:#a6e22e">tags&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;blank&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>], &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">h&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span>, &lt;span style="color:#a6e22e">uom&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cm&amp;#34;&lt;/span> } },
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mat&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">85&lt;/span>, &lt;span style="color:#a6e22e">tags&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;gray&amp;#34;&lt;/span>], &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">h&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">27.9&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">35.5&lt;/span>, &lt;span style="color:#a6e22e">uom&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cm&amp;#34;&lt;/span> } },
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mousepad&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span>, &lt;span style="color:#a6e22e">tags&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;gel&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>], &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">h&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">22.85&lt;/span>, &lt;span style="color:#a6e22e">uom&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cm&amp;#34;&lt;/span> } }
])
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="update">Update&lt;/h2>
&lt;p>&lt;strong>特性：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>MongoDB 所有对单条数据的写操作都是原子操作；&lt;/li>
&lt;li>一条数据插入之后，&lt;code>_id&lt;/code> 字段将不能再更改和替换；&lt;/li>
&lt;li>对于写操作，mongo 会保留字段的顺序，除非以下情况：
&lt;ol>
&lt;li>&lt;code>_id&lt;/code> 字段始终排在第一位。&lt;/li>
&lt;li>字段重命名可能会导致文档字段重新排序。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="单条更新">单条更新&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">updateOne&lt;/span>(
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;paper&amp;#34;&lt;/span> },
{
&lt;span style="color:#a6e22e">$set&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#e6db74">&amp;#34;size.uom&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cm&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;P&amp;#34;&lt;/span> },
&lt;span style="color:#a6e22e">$currentDate&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">lastModified&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> }
}
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="批量更新">批量更新&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">updateMany&lt;/span>(
{ &lt;span style="color:#e6db74">&amp;#34;qty&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">$lt&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span> } },
{
&lt;span style="color:#a6e22e">$set&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#e6db74">&amp;#34;size.uom&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;in&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;P&amp;#34;&lt;/span> },
&lt;span style="color:#a6e22e">$currentDate&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">lastModified&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> }
}
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="替换数据">替换数据&lt;/h3>
&lt;p>完全替换此条数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">replaceOne&lt;/span>(
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;paper&amp;#34;&lt;/span> },
{ &lt;span style="color:#a6e22e">item&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;paper&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">instock&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [ { &lt;span style="color:#a6e22e">warehouse&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span> }, { &lt;span style="color:#a6e22e">warehouse&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">qty&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span> } ] }
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="delete">Delete&lt;/h2>
&lt;p>&lt;strong>特性：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>MongoDB 所有对单条数据的写操作都是原子操作；&lt;/li>
&lt;li>就算删除了全部数据，也不会删除索引。&lt;/li>
&lt;/ul>
&lt;h3 id="单条删除">单条删除&lt;/h3>
&lt;p>单条删除会删除匹配到的第一条数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">deleteOne&lt;/span>( { &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;D&amp;#34;&lt;/span> } )
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="批量删除">批量删除&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">deleteMany&lt;/span>({})
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">inventory&lt;/span>.&lt;span style="color:#a6e22e">deleteMany&lt;/span>({ &lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span> })
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 代码检查工具 golangci-lint</title><link>https://wnanbei.github.io/post/go-%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7-golangci-lint/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7-golangci-lint/</guid><description>&lt;p>&lt;code>golangci-lint&lt;/code> 是一个代码检查工具的集合，聚集了多种 Go 代码检查工具，如 &lt;code>golint&lt;/code>、&lt;code>go vet&lt;/code> 等。&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>运行速度快&lt;/li>
&lt;li>可以集成到 vscode、goland 等开发工具中&lt;/li>
&lt;li>包含了非常多种代码检查器&lt;/li>
&lt;li>可以集成到 CI 中&lt;/li>
&lt;/ul>
&lt;p>这是包含的代码检查器列表：&lt;a class="link" href="https://golangci-lint.run/usage/linters/" target="_blank" rel="noopener"
>Linters&lt;/a>&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>&lt;code>golangci-lint&lt;/code> 官方不建议使用 &lt;code>go get&lt;/code> 方式安装，推荐使用二进制安装。&lt;/p>
&lt;h3 id="macos">MacOS&lt;/h3>
&lt;p>直接使用 homebrew 安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">brew install golangci-lint
brew upgrade golangci-lint
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="linux-和-windows">Linux 和 Windows&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e"># binary will be $(go env GOPATH)/bin/golangci-lint&lt;/span>
curl -sSfL https://raw.githubusercontent.com/Goci/golangci-lint/master/install.sh | sh -s -- -b &lt;span style="color:#66d9ef">$(&lt;/span>go env GOPATH&lt;span style="color:#66d9ef">)&lt;/span>/bin v1.42.1
golangci-lint --version
&lt;/code>&lt;/pre>&lt;/div>&lt;p>golangci-lint 将会被安装到 &lt;code>GOPATH/bin&lt;/code> 目录中，如果此目录不在环境变量路径中需要加上。&lt;/p>
&lt;h2 id="使用方式">使用方式&lt;/h2>
&lt;h3 id="命令行">命令行&lt;/h3>
&lt;p>在项目根目录下执行以下命令检查整个项目的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">golangci-lint run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其等价于：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">golangci-lint run ./...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者可以指定检查某个目录下的代码文件，指定目录时不会递归分析其子目录，要递归分析其子目录需要加上 &lt;code>/...&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">golangci-lint run dir1 dir2/... dir3/file1.go
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在没有配置文件时，golangci-lint 会使用默认的代码检查器进行检查。&lt;/p>
&lt;p>使用以下命令，可以查看默认启用和关闭了哪些检查器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">golangci-lint help linters
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="集成到-vscode">集成到 vscode&lt;/h3>
&lt;p>在 vscode 配置文件中新增以下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#e6db74">&amp;#34;go.lintTool&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;golangci-lint&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;go.lintFlags&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> [
&lt;span style="color:#e6db74">&amp;#34;--fast&amp;#34;&lt;/span>
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>golangci-lint 会自动查找项目中的 &lt;code>.golangci.yml&lt;/code> 配置文件，不用额外配置。&lt;/p>
&lt;h3 id="集成到-goland">集成到 Goland&lt;/h3>
&lt;ol>
&lt;li>安装插件 &lt;a class="link" href="https://plugins.jetbrains.com/plugin/12496-go-linter" target="_blank" rel="noopener"
>Go Linter&lt;/a>
&lt;ul>
&lt;li>可以在 Goland 内插件市场搜索 Go Linter 直接安装。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>配置 &lt;code>File Watchers&lt;/code>
&lt;ul>
&lt;li>在 Goland 配置页面的 &lt;code>工具 -&amp;gt; File Watchers&lt;/code> 进行配置。&lt;/li>
&lt;li>点 &lt;code>+&lt;/code> 按钮，选择 golangci-lint 创建。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="排除代码检查">排除代码检查&lt;/h3>
&lt;p>有时候有部分代码因为各种原因不能通过代码检查，也不能修改，可以使用注释跳过代码检查。如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">bad_name&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">//nolint
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">bad_name&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">//nolint:golint,unused
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以排除一整块代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">//nolint
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">allIssuesInThisFunctionAreExcluded&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#75715e">//nolint:govet
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者一整个文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">//nolint:unparam
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">pkg&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置文件">配置文件&lt;/h2>
&lt;p>golangci-lint 会自动在当前目录下查找以下名称的配置文件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>.golangci.yml&lt;/code>&lt;/li>
&lt;li>&lt;code>.golangci.yaml&lt;/code>&lt;/li>
&lt;li>&lt;code>.golangci.toml&lt;/code>&lt;/li>
&lt;li>&lt;code>.golangci.json&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="配置启用的代码选择器">配置启用的代码选择器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">linters&lt;/span>:
&lt;span style="color:#f92672">disable-all&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">enable&lt;/span>:
- &lt;span style="color:#ae81ff">megacheck&lt;/span>
- &lt;span style="color:#ae81ff">govet&lt;/span>
&lt;span style="color:#f92672">enable-all&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">disable&lt;/span>:
- &lt;span style="color:#ae81ff">maligned&lt;/span>
- &lt;span style="color:#ae81ff">prealloc&lt;/span>
&lt;span style="color:#f92672">presets&lt;/span>:
- &lt;span style="color:#ae81ff">bugs&lt;/span>
- &lt;span style="color:#ae81ff">unused&lt;/span>
&lt;span style="color:#f92672">fast&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="示例配置">示例配置&lt;/h3>
&lt;p>以下是官方给出的配置文件示例，包含了可以设置的选项和选项的默认值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#75715e"># This file contains all available configuration options&lt;/span>
&lt;span style="color:#75715e"># with their default values.&lt;/span>
&lt;span style="color:#75715e"># options for analysis running&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>:
&lt;span style="color:#75715e"># default concurrency is a available CPU number&lt;/span>
&lt;span style="color:#f92672">concurrency&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#75715e"># timeout for analysis, e.g. 30s, 5m, default is 1m&lt;/span>
&lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">1m&lt;/span>
&lt;span style="color:#75715e"># exit code when at least one issue was found, default is 1&lt;/span>
&lt;span style="color:#f92672">issues-exit-code&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># include test files or not, default is true&lt;/span>
&lt;span style="color:#f92672">tests&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># list of build tags, all linters use it. Default is empty list.&lt;/span>
&lt;span style="color:#f92672">build-tags&lt;/span>:
- &lt;span style="color:#ae81ff">mytag&lt;/span>
&lt;span style="color:#75715e"># which dirs to skip: issues from them won&amp;#39;t be reported;&lt;/span>
&lt;span style="color:#75715e"># can use regexp here: generated.*, regexp is applied on full path;&lt;/span>
&lt;span style="color:#75715e"># default value is empty list, but default dirs are skipped independently&lt;/span>
&lt;span style="color:#75715e"># from this option&amp;#39;s value (see skip-dirs-use-default).&lt;/span>
&lt;span style="color:#75715e"># &amp;#34;/&amp;#34; will be replaced by current OS file path separator to properly work&lt;/span>
&lt;span style="color:#75715e"># on Windows.&lt;/span>
&lt;span style="color:#f92672">skip-dirs&lt;/span>:
- &lt;span style="color:#ae81ff">src/external_libs&lt;/span>
- &lt;span style="color:#ae81ff">autogenerated_by_my_lib&lt;/span>
&lt;span style="color:#75715e"># default is true. Enables skipping of directories:&lt;/span>
&lt;span style="color:#75715e"># vendor$, third_party$, testdata$, examples$, Godeps$, builtin$&lt;/span>
&lt;span style="color:#f92672">skip-dirs-use-default&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># which files to skip: they will be analyzed, but issues from them&lt;/span>
&lt;span style="color:#75715e"># won&amp;#39;t be reported. Default value is empty list, but there is&lt;/span>
&lt;span style="color:#75715e"># no need to include all autogenerated files, we confidently recognize&lt;/span>
&lt;span style="color:#75715e"># autogenerated files. If it&amp;#39;s not please let us know.&lt;/span>
&lt;span style="color:#75715e"># &amp;#34;/&amp;#34; will be replaced by current OS file path separator to properly work&lt;/span>
&lt;span style="color:#75715e"># on Windows.&lt;/span>
&lt;span style="color:#f92672">skip-files&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;.*\\.my\\.go$&amp;#34;&lt;/span>
- &lt;span style="color:#ae81ff">lib/bad.go&lt;/span>
&lt;span style="color:#75715e"># by default isn&amp;#39;t set. If set we pass it to &amp;#34;go list -mod={option}&amp;#34;. From &amp;#34;go help modules&amp;#34;:&lt;/span>
&lt;span style="color:#75715e"># If invoked with -mod=readonly, the go command is disallowed from the implicit&lt;/span>
&lt;span style="color:#75715e"># automatic updating of go.mod described above. Instead, it fails when any changes&lt;/span>
&lt;span style="color:#75715e"># to go.mod are needed. This setting is most useful to check that go.mod does&lt;/span>
&lt;span style="color:#75715e"># not need updates, such as in a continuous integration and testing system.&lt;/span>
&lt;span style="color:#75715e"># If invoked with -mod=vendor, the go command assumes that the vendor&lt;/span>
&lt;span style="color:#75715e"># directory holds the correct copies of dependencies and ignores&lt;/span>
&lt;span style="color:#75715e"># the dependency descriptions in go.mod.&lt;/span>
&lt;span style="color:#f92672">modules-download-mode&lt;/span>: &lt;span style="color:#ae81ff">readonly|vendor|mod&lt;/span>
&lt;span style="color:#75715e"># Allow multiple parallel golangci-lint instances running.&lt;/span>
&lt;span style="color:#75715e"># If false (default) - golangci-lint acquires file lock on start.&lt;/span>
&lt;span style="color:#f92672">allow-parallel-runners&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># output configuration options&lt;/span>
&lt;span style="color:#f92672">output&lt;/span>:
&lt;span style="color:#75715e"># colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions&lt;/span>
&lt;span style="color:#75715e"># default is &amp;#34;colored-line-number&amp;#34;&lt;/span>
&lt;span style="color:#f92672">format&lt;/span>: &lt;span style="color:#ae81ff">colored-line-number&lt;/span>
&lt;span style="color:#75715e"># print lines of code with issue, default is true&lt;/span>
&lt;span style="color:#f92672">print-issued-lines&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># print linter name in the end of issue text, default is true&lt;/span>
&lt;span style="color:#f92672">print-linter-name&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># make issues output unique by line, default is true&lt;/span>
&lt;span style="color:#f92672">uniq-by-line&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># add a prefix to the output file references; default is no prefix&lt;/span>
&lt;span style="color:#f92672">path-prefix&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># sorts results by: filepath, line and column&lt;/span>
&lt;span style="color:#f92672">sort-results&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># all available settings of specific linters&lt;/span>
&lt;span style="color:#f92672">linters-settings&lt;/span>:
&lt;span style="color:#f92672">cyclop&lt;/span>:
&lt;span style="color:#75715e"># the maximal code complexity to report&lt;/span>
&lt;span style="color:#f92672">max-complexity&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#75715e"># the maximal average package complexity. If it&amp;#39;s higher than 0.0 (float) the check is enabled (default 0.0)&lt;/span>
&lt;span style="color:#f92672">package-average&lt;/span>: &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;span style="color:#75715e"># should ignore tests (default false)&lt;/span>
&lt;span style="color:#f92672">skip-tests&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">dogsled&lt;/span>:
&lt;span style="color:#75715e"># checks assignments with too many blank identifiers; default is 2&lt;/span>
&lt;span style="color:#f92672">max-blank-identifiers&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#f92672">dupl&lt;/span>:
&lt;span style="color:#75715e"># tokens count to trigger issue, 150 by default&lt;/span>
&lt;span style="color:#f92672">threshold&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#f92672">errcheck&lt;/span>:
&lt;span style="color:#75715e"># report about not checking of errors in type assertions: `a := b.(MyStruct)`;&lt;/span>
&lt;span style="color:#75715e"># default is false: such cases aren&amp;#39;t reported by default.&lt;/span>
&lt;span style="color:#f92672">check-type-assertions&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;&lt;/span>
&lt;span style="color:#75715e"># default is false: such cases aren&amp;#39;t reported by default.&lt;/span>
&lt;span style="color:#f92672">check-blank&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># [deprecated] comma-separated list of pairs of the form pkg:regex&lt;/span>
&lt;span style="color:#75715e"># the regex is used to ignore names within pkg. (default &amp;#34;fmt:.*&amp;#34;).&lt;/span>
&lt;span style="color:#75715e"># see https://github.com/kisielk/errcheck#the-deprecated-method for details&lt;/span>
&lt;span style="color:#f92672">ignore&lt;/span>: &lt;span style="color:#ae81ff">fmt:.*,io/ioutil:^Read.*&lt;/span>
&lt;span style="color:#75715e"># [deprecated] use exclude-functions instead.&lt;/span>
&lt;span style="color:#75715e"># path to a file containing a list of functions to exclude from checking&lt;/span>
&lt;span style="color:#75715e"># see https://github.com/kisielk/errcheck#excluding-functions for details&lt;/span>
&lt;span style="color:#f92672">exclude&lt;/span>: &lt;span style="color:#ae81ff">/path/to/file.txt&lt;/span>
&lt;span style="color:#75715e"># list of functions to exclude from checking, where each entry is a single function to exclude.&lt;/span>
&lt;span style="color:#75715e"># see https://github.com/kisielk/errcheck#excluding-functions for details&lt;/span>
&lt;span style="color:#f92672">exclude-functions&lt;/span>:
- &lt;span style="color:#ae81ff">io/ioutil.ReadFile&lt;/span>
- &lt;span style="color:#ae81ff">io.Copy(*bytes.Buffer)&lt;/span>
- &lt;span style="color:#ae81ff">io.Copy(os.Stdout)&lt;/span>
&lt;span style="color:#f92672">errorlint&lt;/span>:
&lt;span style="color:#75715e"># Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats&lt;/span>
&lt;span style="color:#f92672">errorf&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># Check for plain type assertions and type switches&lt;/span>
&lt;span style="color:#f92672">asserts&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># Check for plain error comparisons&lt;/span>
&lt;span style="color:#f92672">comparison&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">exhaustive&lt;/span>:
&lt;span style="color:#75715e"># check switch statements in generated files also&lt;/span>
&lt;span style="color:#f92672">check-generated&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># indicates that switch statements are to be considered exhaustive if a&lt;/span>
&lt;span style="color:#75715e"># &amp;#39;default&amp;#39; case is present, even if all enum members aren&amp;#39;t listed in the&lt;/span>
&lt;span style="color:#75715e"># switch&lt;/span>
&lt;span style="color:#f92672">default-signifies-exhaustive&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">exhaustivestruct&lt;/span>:
&lt;span style="color:#75715e"># Struct Patterns is list of expressions to match struct packages and names&lt;/span>
&lt;span style="color:#75715e"># The struct packages have the form example.com/package.ExampleStruct&lt;/span>
&lt;span style="color:#75715e"># The matching patterns can use matching syntax from https://pkg.go.dev/path#Match&lt;/span>
&lt;span style="color:#75715e"># If this list is empty, all structs are tested.&lt;/span>
&lt;span style="color:#f92672">struct-patterns&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#39;*.Test&amp;#39;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#39;example.com/package.ExampleStruct&amp;#39;&lt;/span>
&lt;span style="color:#f92672">forbidigo&lt;/span>:
&lt;span style="color:#75715e"># Forbid the following identifiers (identifiers are written using regexp):&lt;/span>
&lt;span style="color:#f92672">forbid&lt;/span>:
- &lt;span style="color:#ae81ff">^print.*$&lt;/span>
- &lt;span style="color:#e6db74">&amp;#39;fmt\.Print.*&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># Exclude godoc examples from forbidigo checks. Default is true.&lt;/span>
&lt;span style="color:#f92672">exclude_godoc_examples&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">funlen&lt;/span>:
&lt;span style="color:#f92672">lines&lt;/span>: &lt;span style="color:#ae81ff">60&lt;/span>
&lt;span style="color:#f92672">statements&lt;/span>: &lt;span style="color:#ae81ff">40&lt;/span>
&lt;span style="color:#f92672">gci&lt;/span>:
&lt;span style="color:#75715e"># put imports beginning with prefix after 3rd-party packages;&lt;/span>
&lt;span style="color:#75715e"># only support one prefix&lt;/span>
&lt;span style="color:#75715e"># if not set, use goimports.local-prefixes&lt;/span>
&lt;span style="color:#f92672">local-prefixes&lt;/span>: &lt;span style="color:#ae81ff">github.com/org/project&lt;/span>
&lt;span style="color:#f92672">gocognit&lt;/span>:
&lt;span style="color:#75715e"># minimal code complexity to report, 30 by default (but we recommend 10-20)&lt;/span>
&lt;span style="color:#f92672">min-complexity&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#f92672">goconst&lt;/span>:
&lt;span style="color:#75715e"># minimal length of string constant, 3 by default&lt;/span>
&lt;span style="color:#f92672">min-len&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#75715e"># minimum occurrences of constant string count to trigger issue, 3 by default&lt;/span>
&lt;span style="color:#f92672">min-occurrences&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#75715e"># ignore test files, false by default&lt;/span>
&lt;span style="color:#f92672">ignore-tests&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># look for existing constants matching the values, true by default&lt;/span>
&lt;span style="color:#f92672">match-constant&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># search also for duplicated numbers, false by default&lt;/span>
&lt;span style="color:#f92672">numbers&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># minimum value, only works with goconst.numbers, 3 by default&lt;/span>
&lt;span style="color:#f92672">min&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#75715e"># maximum value, only works with goconst.numbers, 3 by default&lt;/span>
&lt;span style="color:#f92672">max&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#75715e"># ignore when constant is not used as function argument, true by default&lt;/span>
&lt;span style="color:#f92672">ignore-calls&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">gocritic&lt;/span>:
&lt;span style="color:#75715e"># Which checks should be enabled; can&amp;#39;t be combined with &amp;#39;disabled-checks&amp;#39;;&lt;/span>
&lt;span style="color:#75715e"># See https://go-critic.github.io/overview#checks-overview&lt;/span>
&lt;span style="color:#75715e"># To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`&lt;/span>
&lt;span style="color:#75715e"># By default list of stable checks is used.&lt;/span>
&lt;span style="color:#f92672">enabled-checks&lt;/span>:
- &lt;span style="color:#ae81ff">rangeValCopy&lt;/span>
&lt;span style="color:#75715e"># Which checks should be disabled; can&amp;#39;t be combined with &amp;#39;enabled-checks&amp;#39;; default is empty&lt;/span>
&lt;span style="color:#f92672">disabled-checks&lt;/span>:
- &lt;span style="color:#ae81ff">regexpMust&lt;/span>
&lt;span style="color:#75715e"># Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.&lt;/span>
&lt;span style="color:#75715e"># Empty list by default. See https://github.com/go-critic/go-critic#usage -&amp;gt; section &amp;#34;Tags&amp;#34;.&lt;/span>
&lt;span style="color:#f92672">enabled-tags&lt;/span>:
- &lt;span style="color:#ae81ff">performance&lt;/span>
&lt;span style="color:#f92672">disabled-tags&lt;/span>:
- &lt;span style="color:#ae81ff">experimental&lt;/span>
&lt;span style="color:#75715e"># Settings passed to gocritic.&lt;/span>
&lt;span style="color:#75715e"># The settings key is the name of a supported gocritic checker.&lt;/span>
&lt;span style="color:#75715e"># The list of supported checkers can be find in https://go-critic.github.io/overview.&lt;/span>
&lt;span style="color:#f92672">settings&lt;/span>:
&lt;span style="color:#f92672">captLocal&lt;/span>: &lt;span style="color:#75715e"># must be valid enabled check name&lt;/span>
&lt;span style="color:#75715e"># whether to restrict checker to params only (default true)&lt;/span>
&lt;span style="color:#f92672">paramsOnly&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">elseif&lt;/span>:
&lt;span style="color:#75715e"># whether to skip balanced if-else pairs (default true)&lt;/span>
&lt;span style="color:#f92672">skipBalanced&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">hugeParam&lt;/span>:
&lt;span style="color:#75715e"># size in bytes that makes the warning trigger (default 80)&lt;/span>
&lt;span style="color:#f92672">sizeThreshold&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;span style="color:#f92672">nestingReduce&lt;/span>:
&lt;span style="color:#75715e"># min number of statements inside a branch to trigger a warning (default 5)&lt;/span>
&lt;span style="color:#f92672">bodyWidth&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>
&lt;span style="color:#f92672">rangeExprCopy&lt;/span>:
&lt;span style="color:#75715e"># size in bytes that makes the warning trigger (default 512)&lt;/span>
&lt;span style="color:#f92672">sizeThreshold&lt;/span>: &lt;span style="color:#ae81ff">512&lt;/span>
&lt;span style="color:#75715e"># whether to check test functions (default true)&lt;/span>
&lt;span style="color:#f92672">skipTestFuncs&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">rangeValCopy&lt;/span>:
&lt;span style="color:#75715e"># size in bytes that makes the warning trigger (default 128)&lt;/span>
&lt;span style="color:#f92672">sizeThreshold&lt;/span>: &lt;span style="color:#ae81ff">32&lt;/span>
&lt;span style="color:#75715e"># whether to check test functions (default true)&lt;/span>
&lt;span style="color:#f92672">skipTestFuncs&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">ruleguard&lt;/span>:
&lt;span style="color:#75715e"># path to a gorules file for the ruleguard checker&lt;/span>
&lt;span style="color:#f92672">rules&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;span style="color:#f92672">truncateCmp&lt;/span>:
&lt;span style="color:#75715e"># whether to skip int/uint/uintptr types (default true)&lt;/span>
&lt;span style="color:#f92672">skipArchDependent&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">underef&lt;/span>:
&lt;span style="color:#75715e"># whether to skip (*x).method() calls where x is a pointer receiver (default true)&lt;/span>
&lt;span style="color:#f92672">skipRecvDeref&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">unnamedResult&lt;/span>:
&lt;span style="color:#75715e"># whether to check exported functions&lt;/span>
&lt;span style="color:#f92672">checkExported&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">gocyclo&lt;/span>:
&lt;span style="color:#75715e"># minimal code complexity to report, 30 by default (but we recommend 10-20)&lt;/span>
&lt;span style="color:#f92672">min-complexity&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#f92672">godot&lt;/span>:
&lt;span style="color:#75715e"># comments to be checked: `declarations`, `toplevel`, or `all`&lt;/span>
&lt;span style="color:#f92672">scope&lt;/span>: &lt;span style="color:#ae81ff">declarations&lt;/span>
&lt;span style="color:#75715e"># list of regexps for excluding particular comment lines from check&lt;/span>
&lt;span style="color:#f92672">exclude&lt;/span>:
&lt;span style="color:#75715e"># example: exclude comments which contain numbers&lt;/span>
&lt;span style="color:#75715e"># - &amp;#39;[0-9]+&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># check that each sentence starts with a capital letter&lt;/span>
&lt;span style="color:#f92672">capital&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">godox&lt;/span>:
&lt;span style="color:#75715e"># report any comments starting with keywords, this is useful for TODO or FIXME comments that&lt;/span>
&lt;span style="color:#75715e"># might be left in the code accidentally and should be resolved before merging&lt;/span>
&lt;span style="color:#f92672">keywords&lt;/span>: &lt;span style="color:#75715e"># default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting&lt;/span>
- &lt;span style="color:#ae81ff">NOTE&lt;/span>
- &lt;span style="color:#ae81ff">OPTIMIZE&lt;/span> &lt;span style="color:#75715e"># marks code that should be optimized before merging&lt;/span>
- &lt;span style="color:#ae81ff">HACK&lt;/span> &lt;span style="color:#75715e"># marks hack-arounds that should be removed before merging&lt;/span>
&lt;span style="color:#f92672">gofmt&lt;/span>:
&lt;span style="color:#75715e"># simplify code: gofmt with `-s` option, true by default&lt;/span>
&lt;span style="color:#f92672">simplify&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">gofumpt&lt;/span>:
&lt;span style="color:#75715e"># Select the Go version to target. The default is `1.15`.&lt;/span>
&lt;span style="color:#f92672">lang-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.15&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Choose whether or not to use the extra rules that are disabled&lt;/span>
&lt;span style="color:#75715e"># by default&lt;/span>
&lt;span style="color:#f92672">extra-rules&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">goheader&lt;/span>:
&lt;span style="color:#f92672">values&lt;/span>:
&lt;span style="color:#f92672">const&lt;/span>:
&lt;span style="color:#75715e"># define here const type values in format k:v, for example:&lt;/span>
&lt;span style="color:#75715e"># COMPANY: MY COMPANY&lt;/span>
&lt;span style="color:#f92672">regexp&lt;/span>:
&lt;span style="color:#75715e"># define here regexp type values, for example&lt;/span>
&lt;span style="color:#75715e"># AUTHOR: .*@mycompany\.com&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>: &lt;span style="color:#75715e"># |-&lt;/span>
&lt;span style="color:#75715e"># put here copyright header template for source code files, for example:&lt;/span>
&lt;span style="color:#75715e"># Note: {{ YEAR }} is a builtin value that returns the year relative to the current machine time.&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>
&lt;span style="color:#75715e"># {{ AUTHOR }} {{ COMPANY }} {{ YEAR }}&lt;/span>
&lt;span style="color:#75715e"># SPDX-License-Identifier: Apache-2.0&lt;/span>
&lt;span style="color:#75715e"># Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;);&lt;/span>
&lt;span style="color:#75715e"># you may not use this file except in compliance with the License.&lt;/span>
&lt;span style="color:#75715e"># You may obtain a copy of the License at:&lt;/span>
&lt;span style="color:#75715e"># http://www.apache.org/licenses/LICENSE-2.0&lt;/span>
&lt;span style="color:#75715e"># Unless required by applicable law or agreed to in writing, software&lt;/span>
&lt;span style="color:#75715e"># distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,&lt;/span>
&lt;span style="color:#75715e"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/span>
&lt;span style="color:#75715e"># See the License for the specific language governing permissions and&lt;/span>
&lt;span style="color:#75715e"># limitations under the License.&lt;/span>
&lt;span style="color:#f92672">template-path&lt;/span>:
&lt;span style="color:#75715e"># also as alternative of directive &amp;#39;template&amp;#39; you may put the path to file with the template source&lt;/span>
&lt;span style="color:#f92672">goimports&lt;/span>:
&lt;span style="color:#75715e"># put imports beginning with prefix after 3rd-party packages;&lt;/span>
&lt;span style="color:#75715e"># it&amp;#39;s a comma-separated list of prefixes&lt;/span>
&lt;span style="color:#f92672">local-prefixes&lt;/span>: &lt;span style="color:#ae81ff">github.com/org/project&lt;/span>
&lt;span style="color:#f92672">golint&lt;/span>:
&lt;span style="color:#75715e"># minimal confidence for issues, default is 0.8&lt;/span>
&lt;span style="color:#f92672">min-confidence&lt;/span>: &lt;span style="color:#ae81ff">0.8&lt;/span>
&lt;span style="color:#f92672">gomnd&lt;/span>:
&lt;span style="color:#f92672">settings&lt;/span>:
&lt;span style="color:#f92672">mnd&lt;/span>:
&lt;span style="color:#75715e"># the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.&lt;/span>
&lt;span style="color:#f92672">checks&lt;/span>: &lt;span style="color:#ae81ff">argument,case,condition,operation,return,assign&lt;/span>
&lt;span style="color:#75715e"># ignored-numbers: 1000&lt;/span>
&lt;span style="color:#75715e"># ignored-files: magic_.*.go&lt;/span>
&lt;span style="color:#75715e"># ignored-functions: math.*&lt;/span>
&lt;span style="color:#f92672">gomoddirectives&lt;/span>:
&lt;span style="color:#75715e"># Allow local `replace` directives. Default is false.&lt;/span>
&lt;span style="color:#f92672">replace-local&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># List of allowed `replace` directives. Default is empty.&lt;/span>
&lt;span style="color:#f92672">replace-allow-list&lt;/span>:
- &lt;span style="color:#ae81ff">launchpad.net/gocheck&lt;/span>
&lt;span style="color:#75715e"># Allow to not explain why the version has been retracted in the `retract` directives. Default is false.&lt;/span>
&lt;span style="color:#f92672">retract-allow-no-explanation&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># Forbid the use of the `exclude` directives. Default is false.&lt;/span>
&lt;span style="color:#f92672">exclude-forbidden&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">gomodguard&lt;/span>:
&lt;span style="color:#f92672">allowed&lt;/span>:
&lt;span style="color:#f92672">modules&lt;/span>: &lt;span style="color:#75715e"># List of allowed modules&lt;/span>
&lt;span style="color:#75715e"># - gopkg.in/yaml.v2&lt;/span>
&lt;span style="color:#f92672">domains&lt;/span>: &lt;span style="color:#75715e"># List of allowed module domains&lt;/span>
&lt;span style="color:#75715e"># - golang.org&lt;/span>
&lt;span style="color:#f92672">blocked&lt;/span>:
&lt;span style="color:#f92672">modules&lt;/span>: &lt;span style="color:#75715e"># List of blocked modules&lt;/span>
&lt;span style="color:#75715e"># - github.com/uudashr/go-module: # Blocked module&lt;/span>
&lt;span style="color:#75715e"># recommendations: # Recommended modules that should be used instead (Optional)&lt;/span>
&lt;span style="color:#75715e"># - golang.org/x/mod&lt;/span>
&lt;span style="color:#75715e"># reason: &amp;#34;`mod` is the official go.mod parser library.&amp;#34; # Reason why the recommended module should be used (Optional)&lt;/span>
&lt;span style="color:#f92672">versions&lt;/span>: &lt;span style="color:#75715e"># List of blocked module version constraints&lt;/span>
&lt;span style="color:#75715e"># - github.com/mitchellh/go-homedir: # Blocked module with version constraint&lt;/span>
&lt;span style="color:#75715e"># version: &amp;#34;&amp;lt; 1.1.0&amp;#34; # Version constraint, see https://github.com/Masterminds/semver#basic-comparisons&lt;/span>
&lt;span style="color:#75715e"># reason: &amp;#34;testing if blocked version constraint works.&amp;#34; # Reason why the version constraint exists. (Optional)&lt;/span>
&lt;span style="color:#f92672">local_replace_directives&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#75715e"># Set to true to raise lint issues for packages that are loaded from a local path via replace directive&lt;/span>
&lt;span style="color:#f92672">gosec&lt;/span>:
&lt;span style="color:#75715e"># To select a subset of rules to run.&lt;/span>
&lt;span style="color:#75715e"># Available rules: https://github.com/securego/gosec#available-rules&lt;/span>
&lt;span style="color:#f92672">includes&lt;/span>:
- &lt;span style="color:#ae81ff">G401&lt;/span>
- &lt;span style="color:#ae81ff">G306&lt;/span>
- &lt;span style="color:#ae81ff">G101&lt;/span>
&lt;span style="color:#75715e"># To specify a set of rules to explicitly exclude.&lt;/span>
&lt;span style="color:#75715e"># Available rules: https://github.com/securego/gosec#available-rules&lt;/span>
&lt;span style="color:#f92672">excludes&lt;/span>:
- &lt;span style="color:#ae81ff">G204&lt;/span>
&lt;span style="color:#75715e"># Exclude generated files&lt;/span>
&lt;span style="color:#f92672">exclude-generated&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># To specify the configuration of rules.&lt;/span>
&lt;span style="color:#75715e"># The configuration of rules is not fully documented by gosec:&lt;/span>
&lt;span style="color:#75715e"># https://github.com/securego/gosec#configuration&lt;/span>
&lt;span style="color:#75715e"># https://github.com/securego/gosec/blob/569328eade2ccbad4ce2d0f21ee158ab5356a5cf/rules/rulelist.go#L60-L102&lt;/span>
&lt;span style="color:#f92672">config&lt;/span>:
&lt;span style="color:#f92672">G306&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0600&amp;#34;&lt;/span>
&lt;span style="color:#f92672">G101&lt;/span>:
&lt;span style="color:#f92672">pattern&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;(?i)example&amp;#34;&lt;/span>
&lt;span style="color:#f92672">ignore_entropy&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">entropy_threshold&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;80.0&amp;#34;&lt;/span>
&lt;span style="color:#f92672">per_char_threshold&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3.0&amp;#34;&lt;/span>
&lt;span style="color:#f92672">truncate&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;32&amp;#34;&lt;/span>
&lt;span style="color:#f92672">gosimple&lt;/span>:
&lt;span style="color:#75715e"># Select the Go version to target. The default is &amp;#39;1.13&amp;#39;.&lt;/span>
&lt;span style="color:#f92672">go&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.15&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># https://staticcheck.io/docs/options#checks&lt;/span>
&lt;span style="color:#f92672">checks&lt;/span>: [ &lt;span style="color:#e6db74">&amp;#34;all&amp;#34;&lt;/span> ]
&lt;span style="color:#f92672">govet&lt;/span>:
&lt;span style="color:#75715e"># report about shadowed variables&lt;/span>
&lt;span style="color:#f92672">check-shadowing&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># settings per analyzer&lt;/span>
&lt;span style="color:#f92672">settings&lt;/span>:
&lt;span style="color:#f92672">printf&lt;/span>: &lt;span style="color:#75715e"># analyzer name, run `go tool vet help` to see all analyzers&lt;/span>
&lt;span style="color:#f92672">funcs&lt;/span>: &lt;span style="color:#75715e"># run `go tool vet help printf` to see available settings for `printf` analyzer&lt;/span>
- &lt;span style="color:#ae81ff">(github.com/golangci/golangci-lint/pkg/logutils.Log).Infof&lt;/span>
- &lt;span style="color:#ae81ff">(github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf&lt;/span>
- &lt;span style="color:#ae81ff">(github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf&lt;/span>
- &lt;span style="color:#ae81ff">(github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf&lt;/span>
&lt;span style="color:#75715e"># enable or disable analyzers by name&lt;/span>
&lt;span style="color:#75715e"># run `go tool vet help` to see all analyzers&lt;/span>
&lt;span style="color:#f92672">enable&lt;/span>:
- &lt;span style="color:#ae81ff">atomicalign&lt;/span>
&lt;span style="color:#f92672">enable-all&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">disable&lt;/span>:
- &lt;span style="color:#ae81ff">shadow&lt;/span>
&lt;span style="color:#f92672">disable-all&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">depguard&lt;/span>:
&lt;span style="color:#f92672">list-type&lt;/span>: &lt;span style="color:#ae81ff">blacklist&lt;/span>
&lt;span style="color:#f92672">include-go-root&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">packages&lt;/span>:
- &lt;span style="color:#ae81ff">github.com/sirupsen/logrus&lt;/span>
&lt;span style="color:#f92672">packages-with-error-message&lt;/span>:
&lt;span style="color:#75715e"># specify an error message to output when a blacklisted package is used&lt;/span>
- &lt;span style="color:#f92672">github.com/sirupsen/logrus&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;logging is allowed only by logutils.Log&amp;#34;&lt;/span>
&lt;span style="color:#f92672">ifshort&lt;/span>:
&lt;span style="color:#75715e"># Maximum length of variable declaration measured in number of lines, after which linter won&amp;#39;t suggest using short syntax.&lt;/span>
&lt;span style="color:#75715e"># Has higher priority than max-decl-chars.&lt;/span>
&lt;span style="color:#f92672">max-decl-lines&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># Maximum length of variable declaration measured in number of characters, after which linter won&amp;#39;t suggest using short syntax.&lt;/span>
&lt;span style="color:#f92672">max-decl-chars&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>
&lt;span style="color:#f92672">importas&lt;/span>:
&lt;span style="color:#75715e"># if set to `true`, force to use alias.&lt;/span>
&lt;span style="color:#f92672">no-unaliased&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># List of aliases&lt;/span>
&lt;span style="color:#f92672">alias&lt;/span>:
&lt;span style="color:#75715e"># using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package&lt;/span>
- &lt;span style="color:#f92672">pkg&lt;/span>: &lt;span style="color:#ae81ff">knative.dev/serving/pkg/apis/serving/v1&lt;/span>
&lt;span style="color:#f92672">alias&lt;/span>: &lt;span style="color:#ae81ff">servingv1&lt;/span>
&lt;span style="color:#75715e"># using `autoscalingv1alpha1` alias for `knative.dev/serving/pkg/apis/autoscaling/v1alpha1` package&lt;/span>
- &lt;span style="color:#f92672">pkg&lt;/span>: &lt;span style="color:#ae81ff">knative.dev/serving/pkg/apis/autoscaling/v1alpha1&lt;/span>
&lt;span style="color:#f92672">alias&lt;/span>: &lt;span style="color:#ae81ff">autoscalingv1alpha1&lt;/span>
&lt;span style="color:#75715e"># You can specify the package path by regular expression,&lt;/span>
&lt;span style="color:#75715e"># and alias by regular expression expansion syntax like below.&lt;/span>
&lt;span style="color:#75715e"># see https://github.com/julz/importas#use-regular-expression for details&lt;/span>
- &lt;span style="color:#f92672">pkg&lt;/span>: &lt;span style="color:#ae81ff">knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)&lt;/span>
&lt;span style="color:#f92672">alias&lt;/span>: &lt;span style="color:#ae81ff">$1$2&lt;/span>
&lt;span style="color:#f92672">ireturn&lt;/span>:
&lt;span style="color:#75715e"># ireturn allows using `allow` and `reject` settings at the same time.&lt;/span>
&lt;span style="color:#75715e"># Both settings are lists of the keywords and regular expressions matched to interface or package names.&lt;/span>
&lt;span style="color:#75715e"># keywords:&lt;/span>
&lt;span style="color:#75715e"># - `empty` for `interface{}`&lt;/span>
&lt;span style="color:#75715e"># - `error` for errors&lt;/span>
&lt;span style="color:#75715e"># - `stdlib` for standard library&lt;/span>
&lt;span style="color:#75715e"># - `anon` for anonymous interfaces&lt;/span>
&lt;span style="color:#75715e"># By default, it allows using errors, empty interfaces, anonymous interfaces,&lt;/span>
&lt;span style="color:#75715e"># and interfaces provided by the standard library.&lt;/span>
&lt;span style="color:#f92672">allow&lt;/span>:
- &lt;span style="color:#ae81ff">anon&lt;/span>
- &lt;span style="color:#ae81ff">error&lt;/span>
- &lt;span style="color:#ae81ff">empty&lt;/span>
- &lt;span style="color:#ae81ff">stdlib&lt;/span>
&lt;span style="color:#75715e"># You can specify idiomatic endings for interface&lt;/span>
- &lt;span style="color:#ae81ff">(or|er)$&lt;/span>
&lt;span style="color:#75715e"># Reject patterns&lt;/span>
&lt;span style="color:#f92672">reject&lt;/span>:
- &lt;span style="color:#ae81ff">github.com\/user\/package\/v4\.Type&lt;/span>
&lt;span style="color:#f92672">lll&lt;/span>:
&lt;span style="color:#75715e"># max line length, lines longer will be reported. Default is 120.&lt;/span>
&lt;span style="color:#75715e"># &amp;#39;\t&amp;#39; is counted as 1 character by default, and can be changed with the tab-width option&lt;/span>
&lt;span style="color:#f92672">line-length&lt;/span>: &lt;span style="color:#ae81ff">120&lt;/span>
&lt;span style="color:#75715e"># tab width in spaces. Default to 1.&lt;/span>
&lt;span style="color:#f92672">tab-width&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">makezero&lt;/span>:
&lt;span style="color:#75715e"># Allow only slices initialized with a length of zero. Default is false.&lt;/span>
&lt;span style="color:#f92672">always&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">maligned&lt;/span>:
&lt;span style="color:#75715e"># print struct with more effective memory layout or not, false by default&lt;/span>
&lt;span style="color:#f92672">suggest-new&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">misspell&lt;/span>:
&lt;span style="color:#75715e"># Correct spellings using locale preferences for US or UK.&lt;/span>
&lt;span style="color:#75715e"># Default is to use a neutral variety of English.&lt;/span>
&lt;span style="color:#75715e"># Setting locale to US will correct the British spelling of &amp;#39;colour&amp;#39; to &amp;#39;color&amp;#39;.&lt;/span>
&lt;span style="color:#f92672">locale&lt;/span>: &lt;span style="color:#ae81ff">US&lt;/span>
&lt;span style="color:#f92672">ignore-words&lt;/span>:
- &lt;span style="color:#ae81ff">someword&lt;/span>
&lt;span style="color:#f92672">nakedret&lt;/span>:
&lt;span style="color:#75715e"># make an issue if func has more lines of code than this setting and it has naked returns; default is 30&lt;/span>
&lt;span style="color:#f92672">max-func-lines&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>
&lt;span style="color:#f92672">nestif&lt;/span>:
&lt;span style="color:#75715e"># minimal complexity of if statements to report, 5 by default&lt;/span>
&lt;span style="color:#f92672">min-complexity&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#f92672">nilnil&lt;/span>:
&lt;span style="color:#75715e"># By default, nilnil checks all returned types below.&lt;/span>
&lt;span style="color:#f92672">checked-types&lt;/span>:
- &lt;span style="color:#ae81ff">ptr&lt;/span>
- &lt;span style="color:#ae81ff">func&lt;/span>
- &lt;span style="color:#ae81ff">iface&lt;/span>
- &lt;span style="color:#ae81ff">map&lt;/span>
- &lt;span style="color:#ae81ff">chan&lt;/span>
&lt;span style="color:#f92672">nlreturn&lt;/span>:
&lt;span style="color:#75715e"># size of the block (including return statement that is still &amp;#34;OK&amp;#34;)&lt;/span>
&lt;span style="color:#75715e"># so no return split required.&lt;/span>
&lt;span style="color:#f92672">block-size&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">nolintlint&lt;/span>:
&lt;span style="color:#75715e"># Enable to ensure that nolint directives are all used. Default is true.&lt;/span>
&lt;span style="color:#f92672">allow-unused&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># Disable to ensure that nolint directives don&amp;#39;t have a leading space. Default is true.&lt;/span>
&lt;span style="color:#f92672">allow-leading-space&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># Exclude following linters from requiring an explanation. Default is [].&lt;/span>
&lt;span style="color:#f92672">allow-no-explanation&lt;/span>: [ ]
&lt;span style="color:#75715e"># Enable to require an explanation of nonzero length after each nolint directive. Default is false.&lt;/span>
&lt;span style="color:#f92672">require-explanation&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># Enable to require nolint directives to mention the specific linter being suppressed. Default is false.&lt;/span>
&lt;span style="color:#f92672">require-specific&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">prealloc&lt;/span>:
&lt;span style="color:#75715e"># XXX: we don&amp;#39;t recommend using this linter before doing performance profiling.&lt;/span>
&lt;span style="color:#75715e"># For most programs usage of prealloc will be a premature optimization.&lt;/span>
&lt;span style="color:#75715e"># Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.&lt;/span>
&lt;span style="color:#75715e"># True by default.&lt;/span>
&lt;span style="color:#f92672">simple&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">range-loops&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># Report preallocation suggestions on range loops, true by default&lt;/span>
&lt;span style="color:#f92672">for-loops&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#75715e"># Report preallocation suggestions on for loops, false by default&lt;/span>
&lt;span style="color:#f92672">promlinter&lt;/span>:
&lt;span style="color:#75715e"># Promlinter cannot infer all metrics name in static analysis.&lt;/span>
&lt;span style="color:#75715e"># Enable strict mode will also include the errors caused by failing to parse the args.&lt;/span>
&lt;span style="color:#f92672">strict&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.&lt;/span>
&lt;span style="color:#f92672">disabled-linters&lt;/span>:
&lt;span style="color:#75715e"># - &amp;#34;Help&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># - &amp;#34;MetricUnits&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># - &amp;#34;Counter&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># - &amp;#34;HistogramSummaryReserved&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># - &amp;#34;MetricTypeInName&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># - &amp;#34;ReservedChars&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># - &amp;#34;CamelCase&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># - &amp;#34;lintUnitAbbreviations&amp;#34;&lt;/span>
&lt;span style="color:#f92672">predeclared&lt;/span>:
&lt;span style="color:#75715e"># comma-separated list of predeclared identifiers to not report on&lt;/span>
&lt;span style="color:#f92672">ignore&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># include method names and field names (i.e., qualified names) in checks&lt;/span>
&lt;span style="color:#f92672">q&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">rowserrcheck&lt;/span>:
&lt;span style="color:#f92672">packages&lt;/span>:
- &lt;span style="color:#ae81ff">github.com/jmoiron/sqlx&lt;/span>
&lt;span style="color:#f92672">revive&lt;/span>:
&lt;span style="color:#75715e"># see https://github.com/mgechev/revive#available-rules for details.&lt;/span>
&lt;span style="color:#f92672">ignore-generated-header&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">severity&lt;/span>: &lt;span style="color:#ae81ff">warning&lt;/span>
&lt;span style="color:#f92672">rules&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">indent-error-flow&lt;/span>
&lt;span style="color:#f92672">severity&lt;/span>: &lt;span style="color:#ae81ff">warning&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">add-constant&lt;/span>
&lt;span style="color:#f92672">severity&lt;/span>: &lt;span style="color:#ae81ff">warning&lt;/span>
&lt;span style="color:#f92672">arguments&lt;/span>:
- &lt;span style="color:#f92672">maxLitCount&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>
&lt;span style="color:#f92672">allowStrs&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;#34;&amp;#39;&lt;/span>
&lt;span style="color:#f92672">allowInts&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0,1,2&amp;#34;&lt;/span>
&lt;span style="color:#f92672">allowFloats&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.0,0.,1.0,1.,2.0,2.&amp;#34;&lt;/span>
&lt;span style="color:#f92672">staticcheck&lt;/span>:
&lt;span style="color:#75715e"># Select the Go version to target. The default is &amp;#39;1.13&amp;#39;.&lt;/span>
&lt;span style="color:#f92672">go&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.15&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># https://staticcheck.io/docs/options#checks&lt;/span>
&lt;span style="color:#f92672">checks&lt;/span>: [ &lt;span style="color:#e6db74">&amp;#34;all&amp;#34;&lt;/span> ]
&lt;span style="color:#f92672">stylecheck&lt;/span>:
&lt;span style="color:#75715e"># Select the Go version to target. The default is &amp;#39;1.13&amp;#39;.&lt;/span>
&lt;span style="color:#f92672">go&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.15&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># https://staticcheck.io/docs/options#checks&lt;/span>
&lt;span style="color:#f92672">checks&lt;/span>: [ &lt;span style="color:#e6db74">&amp;#34;all&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-ST1000&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-ST1003&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-ST1016&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-ST1020&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-ST1021&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-ST1022&amp;#34;&lt;/span> ]
&lt;span style="color:#75715e"># https://staticcheck.io/docs/options#dot_import_whitelist&lt;/span>
&lt;span style="color:#f92672">dot-import-whitelist&lt;/span>:
- &lt;span style="color:#ae81ff">fmt&lt;/span>
&lt;span style="color:#75715e"># https://staticcheck.io/docs/options#initialisms&lt;/span>
&lt;span style="color:#f92672">initialisms&lt;/span>: [ &lt;span style="color:#e6db74">&amp;#34;ACL&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;API&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;ASCII&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;CPU&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;CSS&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;DNS&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;EOF&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;GUID&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;HTML&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;HTTP&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;HTTPS&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;ID&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;IP&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;JSON&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;QPS&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;RAM&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;RPC&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SLA&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SMTP&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SQL&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SSH&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;TCP&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;TLS&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;TTL&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;UDP&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;UI&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;GID&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;UID&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;UUID&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;URI&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;URL&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;UTF8&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;VM&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;XML&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;XMPP&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;XSRF&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;XSS&amp;#34;&lt;/span> ]
&lt;span style="color:#75715e"># https://staticcheck.io/docs/options#http_status_code_whitelist&lt;/span>
&lt;span style="color:#f92672">http-status-code-whitelist&lt;/span>: [ &lt;span style="color:#e6db74">&amp;#34;200&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;400&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;404&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;500&amp;#34;&lt;/span> ]
&lt;span style="color:#f92672">tagliatelle&lt;/span>:
&lt;span style="color:#75715e"># check the struck tag name case&lt;/span>
&lt;span style="color:#f92672">case&lt;/span>:
&lt;span style="color:#75715e"># use the struct field name to check the name of the struct tag&lt;/span>
&lt;span style="color:#f92672">use-field-name&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">rules&lt;/span>:
&lt;span style="color:#75715e"># any struct tag type can be used.&lt;/span>
&lt;span style="color:#75715e"># support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`&lt;/span>
&lt;span style="color:#f92672">json&lt;/span>: &lt;span style="color:#ae81ff">camel&lt;/span>
&lt;span style="color:#f92672">yaml&lt;/span>: &lt;span style="color:#ae81ff">camel&lt;/span>
&lt;span style="color:#f92672">xml&lt;/span>: &lt;span style="color:#ae81ff">camel&lt;/span>
&lt;span style="color:#f92672">bson&lt;/span>: &lt;span style="color:#ae81ff">camel&lt;/span>
&lt;span style="color:#f92672">avro&lt;/span>: &lt;span style="color:#ae81ff">snake&lt;/span>
&lt;span style="color:#f92672">mapstructure&lt;/span>: &lt;span style="color:#ae81ff">kebab&lt;/span>
&lt;span style="color:#f92672">testpackage&lt;/span>:
&lt;span style="color:#75715e"># regexp pattern to skip files&lt;/span>
&lt;span style="color:#f92672">skip-regexp&lt;/span>: &lt;span style="color:#ae81ff">(export|internal)_test\.go&lt;/span>
&lt;span style="color:#f92672">thelper&lt;/span>:
&lt;span style="color:#75715e"># The following configurations enable all checks. It can be omitted because all checks are enabled by default.&lt;/span>
&lt;span style="color:#75715e"># You can enable only required checks deleting unnecessary checks.&lt;/span>
&lt;span style="color:#f92672">test&lt;/span>:
&lt;span style="color:#f92672">first&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">begin&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">benchmark&lt;/span>:
&lt;span style="color:#f92672">first&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">begin&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">tb&lt;/span>:
&lt;span style="color:#f92672">first&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">begin&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">tenv&lt;/span>:
&lt;span style="color:#75715e"># The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.&lt;/span>
&lt;span style="color:#75715e"># By default, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.&lt;/span>
&lt;span style="color:#f92672">all&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">unparam&lt;/span>:
&lt;span style="color:#75715e"># Inspect exported functions, default is false. Set to true if no external program/library imports your code.&lt;/span>
&lt;span style="color:#75715e"># XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:&lt;/span>
&lt;span style="color:#75715e"># if it&amp;#39;s called for subdir of a project it can&amp;#39;t find external interfaces. All text editor integrations&lt;/span>
&lt;span style="color:#75715e"># with golangci-lint call it on a directory with the changed file.&lt;/span>
&lt;span style="color:#f92672">check-exported&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">unused&lt;/span>:
&lt;span style="color:#75715e"># Select the Go version to target. The default is &amp;#39;1.13&amp;#39;.&lt;/span>
&lt;span style="color:#f92672">go&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.15&amp;#34;&lt;/span>
&lt;span style="color:#f92672">whitespace&lt;/span>:
&lt;span style="color:#f92672">multi-if&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#75715e"># Enforces newlines (or comments) after every multi-line if statement&lt;/span>
&lt;span style="color:#f92672">multi-func&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#75715e"># Enforces newlines (or comments) after every multi-line function signature&lt;/span>
&lt;span style="color:#f92672">wrapcheck&lt;/span>:
&lt;span style="color:#75715e"># An array of strings that specify substrings of signatures to ignore.&lt;/span>
&lt;span style="color:#75715e"># If this set, it will override the default set of ignored signatures.&lt;/span>
&lt;span style="color:#75715e"># See https://github.com/tomarrell/wrapcheck#configuration for more information.&lt;/span>
&lt;span style="color:#f92672">ignoreSigs&lt;/span>:
- &lt;span style="color:#ae81ff">.Errorf(&lt;/span>
- &lt;span style="color:#ae81ff">errors.New(&lt;/span>
- &lt;span style="color:#ae81ff">errors.Unwrap(&lt;/span>
- &lt;span style="color:#ae81ff">.Wrap(&lt;/span>
- &lt;span style="color:#ae81ff">.Wrapf(&lt;/span>
- &lt;span style="color:#ae81ff">.WithMessage(&lt;/span>
- &lt;span style="color:#ae81ff">.WithMessagef(&lt;/span>
- &lt;span style="color:#ae81ff">.WithStack(&lt;/span>
&lt;span style="color:#f92672">ignorePackageGlobs&lt;/span>:
- &lt;span style="color:#ae81ff">encoding/*&lt;/span>
- &lt;span style="color:#ae81ff">github.com/pkg/*&lt;/span>
&lt;span style="color:#f92672">wsl&lt;/span>:
&lt;span style="color:#75715e"># See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for&lt;/span>
&lt;span style="color:#75715e"># documentation of available settings. These are the defaults for&lt;/span>
&lt;span style="color:#75715e"># `golangci-lint`.&lt;/span>
&lt;span style="color:#f92672">allow-assign-and-anything&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">allow-assign-and-call&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">allow-cuddle-declarations&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">allow-multiline-assign&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">allow-separated-leading-comment&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">allow-trailing-comment&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">force-case-trailing-whitespace&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">force-err-cuddling&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">force-short-decl-cuddling&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">strict-append&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#75715e"># The custom section can be used to define linter plugins to be loaded at runtime.&lt;/span>
&lt;span style="color:#75715e"># See README doc for more info.&lt;/span>
&lt;span style="color:#f92672">custom&lt;/span>:
&lt;span style="color:#75715e"># Each custom linter should have a unique name.&lt;/span>
&lt;span style="color:#f92672">example&lt;/span>:
&lt;span style="color:#75715e"># The path to the plugin *.so. Can be absolute or local. Required for each custom linter&lt;/span>
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/path/to/example.so&lt;/span>
&lt;span style="color:#75715e"># The description of the linter. Optional, just for documentation purposes.&lt;/span>
&lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#ae81ff">This is an example usage of a plugin linter.&lt;/span>
&lt;span style="color:#75715e"># Intended to point to the repo location of the linter. Optional, just for documentation purposes.&lt;/span>
&lt;span style="color:#f92672">original-url&lt;/span>: &lt;span style="color:#ae81ff">github.com/golangci/example-linter&lt;/span>
&lt;span style="color:#f92672">linters&lt;/span>:
&lt;span style="color:#f92672">disable-all&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">enable&lt;/span>:
- &lt;span style="color:#ae81ff">megacheck&lt;/span>
- &lt;span style="color:#ae81ff">govet&lt;/span>
&lt;span style="color:#f92672">enable-all&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">disable&lt;/span>:
- &lt;span style="color:#ae81ff">maligned&lt;/span>
- &lt;span style="color:#ae81ff">prealloc&lt;/span>
&lt;span style="color:#f92672">presets&lt;/span>:
- &lt;span style="color:#ae81ff">bugs&lt;/span>
- &lt;span style="color:#ae81ff">unused&lt;/span>
&lt;span style="color:#f92672">fast&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">issues&lt;/span>:
&lt;span style="color:#75715e"># List of regexps of issue texts to exclude, empty list by default.&lt;/span>
&lt;span style="color:#75715e"># But independently from this option we use default exclude patterns,&lt;/span>
&lt;span style="color:#75715e"># it can be disabled by `exclude-use-default: false`. To list all&lt;/span>
&lt;span style="color:#75715e"># excluded by default patterns execute `golangci-lint run --help`&lt;/span>
&lt;span style="color:#f92672">exclude&lt;/span>:
- &lt;span style="color:#ae81ff">abcdef&lt;/span>
&lt;span style="color:#75715e"># Excluding configuration per-path, per-linter, per-text and per-source&lt;/span>
&lt;span style="color:#f92672">exclude-rules&lt;/span>:
&lt;span style="color:#75715e"># Exclude some linters from running on tests files.&lt;/span>
- &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">_test\.go&lt;/span>
&lt;span style="color:#f92672">linters&lt;/span>:
- &lt;span style="color:#ae81ff">gocyclo&lt;/span>
- &lt;span style="color:#ae81ff">errcheck&lt;/span>
- &lt;span style="color:#ae81ff">dupl&lt;/span>
- &lt;span style="color:#ae81ff">gosec&lt;/span>
&lt;span style="color:#75715e"># Exclude known linters from partially hard-vendored code,&lt;/span>
&lt;span style="color:#75715e"># which is impossible to exclude via &amp;#34;nolint&amp;#34; comments.&lt;/span>
- &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">internal/hmac/&lt;/span>
&lt;span style="color:#f92672">text&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;weak cryptographic primitive&amp;#34;&lt;/span>
&lt;span style="color:#f92672">linters&lt;/span>:
- &lt;span style="color:#ae81ff">gosec&lt;/span>
&lt;span style="color:#75715e"># Exclude some staticcheck messages&lt;/span>
- &lt;span style="color:#f92672">linters&lt;/span>:
- &lt;span style="color:#ae81ff">staticcheck&lt;/span>
&lt;span style="color:#f92672">text&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SA9003:&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Exclude lll issues for long lines with go:generate&lt;/span>
- &lt;span style="color:#f92672">linters&lt;/span>:
- &lt;span style="color:#ae81ff">lll&lt;/span>
&lt;span style="color:#f92672">source&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^//go:generate &amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Independently from option `exclude` we use default exclude patterns,&lt;/span>
&lt;span style="color:#75715e"># it can be disabled by this option. To list all&lt;/span>
&lt;span style="color:#75715e"># excluded by default patterns execute `golangci-lint run --help`.&lt;/span>
&lt;span style="color:#75715e"># Default value for this option is true.&lt;/span>
&lt;span style="color:#f92672">exclude-use-default&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># The default value is false. If set to true exclude and exclude-rules&lt;/span>
&lt;span style="color:#75715e"># regular expressions become case sensitive.&lt;/span>
&lt;span style="color:#f92672">exclude-case-sensitive&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># The list of ids of default excludes to include or disable. By default it&amp;#39;s empty.&lt;/span>
&lt;span style="color:#f92672">include&lt;/span>:
- &lt;span style="color:#ae81ff">EXC0002&lt;/span> &lt;span style="color:#75715e"># disable excluding of issues about comments from golint&lt;/span>
&lt;span style="color:#75715e"># Maximum issues count per one linter. Set to 0 to disable. Default is 50.&lt;/span>
&lt;span style="color:#f92672">max-issues-per-linter&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#75715e"># Maximum count of issues with the same text. Set to 0 to disable. Default is 3.&lt;/span>
&lt;span style="color:#f92672">max-same-issues&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#75715e"># Show only new issues: if there are unstaged changes or untracked files,&lt;/span>
&lt;span style="color:#75715e"># only those changes are analyzed, else only changes in HEAD~ are analyzed.&lt;/span>
&lt;span style="color:#75715e"># It&amp;#39;s a super-useful option for integration of golangci-lint into existing&lt;/span>
&lt;span style="color:#75715e"># large codebase. It&amp;#39;s not practical to fix all existing issues at the moment&lt;/span>
&lt;span style="color:#75715e"># of integration: much better don&amp;#39;t allow issues in new code.&lt;/span>
&lt;span style="color:#75715e"># Default is false.&lt;/span>
&lt;span style="color:#f92672">new&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># Show only new issues created after git revision `REV`&lt;/span>
&lt;span style="color:#f92672">new-from-rev&lt;/span>: &lt;span style="color:#ae81ff">REV&lt;/span>
&lt;span style="color:#75715e"># Show only new issues created in git patch with set file path.&lt;/span>
&lt;span style="color:#f92672">new-from-patch&lt;/span>: &lt;span style="color:#ae81ff">path/to/patch/file&lt;/span>
&lt;span style="color:#75715e"># Fix found issues (if it&amp;#39;s supported by the linter)&lt;/span>
&lt;span style="color:#f92672">fix&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">severity&lt;/span>:
&lt;span style="color:#75715e"># Default value is empty string.&lt;/span>
&lt;span style="color:#75715e"># Set the default severity for issues. If severity rules are defined and the issues&lt;/span>
&lt;span style="color:#75715e"># do not match or no severity is provided to the rule this will be the default&lt;/span>
&lt;span style="color:#75715e"># severity applied. Severities should match the supported severity names of the&lt;/span>
&lt;span style="color:#75715e"># selected out format.&lt;/span>
&lt;span style="color:#75715e"># - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity&lt;/span>
&lt;span style="color:#75715e"># - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity&lt;/span>
&lt;span style="color:#75715e"># - Github: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message&lt;/span>
&lt;span style="color:#f92672">default-severity&lt;/span>: &lt;span style="color:#ae81ff">error&lt;/span>
&lt;span style="color:#75715e"># The default value is false.&lt;/span>
&lt;span style="color:#75715e"># If set to true severity-rules regular expressions become case sensitive.&lt;/span>
&lt;span style="color:#f92672">case-sensitive&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#75715e"># Default value is empty list.&lt;/span>
&lt;span style="color:#75715e"># When a list of severity rules are provided, severity information will be added to lint&lt;/span>
&lt;span style="color:#75715e"># issues. Severity rules have the same filtering capability as exclude rules except you&lt;/span>
&lt;span style="color:#75715e"># are allowed to specify one matcher per severity rule.&lt;/span>
&lt;span style="color:#75715e"># Only affects out formats that support setting severity information.&lt;/span>
&lt;span style="color:#f92672">rules&lt;/span>:
- &lt;span style="color:#f92672">linters&lt;/span>:
- &lt;span style="color:#ae81ff">dupl&lt;/span>
&lt;span style="color:#f92672">severity&lt;/span>: &lt;span style="color:#ae81ff">info&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 令牌桶限流器 golang.org/x/time/rate</title><link>https://wnanbei.github.io/post/go-%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E5%99%A8-golang.org/x/time/rate/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E5%99%A8-golang.org/x/time/rate/</guid><description>&lt;p>&lt;code>golang.org/x/time/rate&lt;/code> 提供了一个使用令牌桶 &lt;code>Token Bucket&lt;/code> 算法实现的限流器。&lt;/p>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="创建限流器">创建限流器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewLimiter&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">Limit&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>r - 每秒令牌桶中产生的 Token，为 0 则不产生 Token。&lt;/li>
&lt;li>b - 令牌桶的最大容量。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>r&lt;/code> 的值类型为 &lt;code>float64&lt;/code>，如果要设置超过秒以上的频率，可以使用 &lt;code>Every()&lt;/code> 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">limit&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Every&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#a6e22e">limiter&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewLimiter&lt;/span>(&lt;span style="color:#a6e22e">limit&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="消费-token">消费 Token&lt;/h3>
&lt;p>&lt;code>golang.org/x/time/rate&lt;/code> 提供了三种方式消费 Token，这三种方式在令牌桶内令牌不足时，有不同的处理方式。&lt;/p>
&lt;h4 id="allowallown">Allow/AllowN&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">Allow&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">AllowN&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在某一时刻，如果桶中 Token 数量大于等于 n，则消费 n 个 Token 并返回 true。&lt;/p>
&lt;p>如果不满足则不消费，返回 false。&lt;/p>
&lt;p>&lt;code>Allow&lt;/code> 等价于 &lt;code>AllowN(time.Now(), 1)&lt;/code>。&lt;/p>
&lt;p>&lt;strong>在超出频率限制时，希望丢弃或跳过事件的时候使用此方法。&lt;/strong>&lt;/p>
&lt;h4 id="waitwaitn">Wait/WaitN&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">Wait&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) (&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">WaitN&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从令牌桶中消费 n 个 Token，如果令牌桶中 Token 数量不足，那么将会阻塞，直到 Token 数量满足。&lt;/p>
&lt;p>如果 Token 数量满足则直接返回。&lt;/p>
&lt;p>Wait 方法可以使用 context 来控制超时时间。&lt;/p>
&lt;p>&lt;code>Wait&lt;/code> 等价于 &lt;code>WaitN(ctx, 1)&lt;/code>。&lt;/p>
&lt;p>&lt;strong>在超出频率时，如果希望有一个最长等待时间的，使用此方法。&lt;/strong>&lt;/p>
&lt;h4 id="reservereserven">Reserve/ReserveN&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">Reserve&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reservation&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">ReserveN&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reservation&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用 &lt;code>Reserve&lt;/code> 方法后，无论 Token 是否充足，都会消费 N 个令牌并返回一个 &lt;code>Reservation&lt;/code> 对象。&lt;/p>
&lt;p>但是此时并不一定允许你执行相应逻辑，如果桶内 Token 不足，需要 &lt;code>Delay()&lt;/code> 延迟一定时间执行。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">lim&lt;/span>.&lt;span style="color:#a6e22e">ReserveN&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>(), &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">OK&lt;/span>() {
&lt;span style="color:#75715e">// Not allowed to act! Did you remember to set lim.burst to be &amp;gt; 0 ?
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Delay&lt;/span>())
&lt;span style="color:#a6e22e">Act&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Reservation 对象拥有的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reservation&lt;/span>) &lt;span style="color:#a6e22e">Cancel&lt;/span>() &lt;span style="color:#75715e">// 取消消费，并尝试返还 Token
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reservation&lt;/span>) &lt;span style="color:#a6e22e">CancelAt&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reservation&lt;/span>) &lt;span style="color:#a6e22e">Delay&lt;/span>() &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span> &lt;span style="color:#75715e">// 返回需要延迟执行的时间
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reservation&lt;/span>) &lt;span style="color:#a6e22e">DelayFrom&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reservation&lt;/span>) &lt;span style="color:#a6e22e">OK&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 判断令牌桶是否能提供请求的令牌数
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>在超出频率限制时，如果希望始终执行事件的，使用此方法。&lt;/strong>&lt;/p>
&lt;h3 id="动态调整速率">动态调整速率&lt;/h3>
&lt;p>获取限制频率和桶容量大小：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">Burst&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">Limit&lt;/span>() &lt;span style="color:#a6e22e">Limit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>调整桶的容量大小：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">SetBurst&lt;/span>(&lt;span style="color:#a6e22e">newBurst&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">SetBurstAt&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">newBurst&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>调整限制频率：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">SetLimit&lt;/span>(&lt;span style="color:#a6e22e">newLimit&lt;/span> &lt;span style="color:#a6e22e">Limit&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lim&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Limiter&lt;/span>) &lt;span style="color:#a6e22e">SetLimitAt&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">newLimit&lt;/span> &lt;span style="color:#a6e22e">Limit&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>CSP 并发编程模型</title><link>https://wnanbei.github.io/post/csp-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/csp-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>&lt;code>CSP - Communicating Sequential Process&lt;/code>，通信顺序进程，是一种并发编程模型，用于描述两个独立的并发实体通过共享的通讯 channel 进行通信。&lt;/p>
&lt;p>CSP 中 channel 是第一类对象，它不关注发送消息的实体，而关注发送消息时使用的 channel。&lt;/p>
&lt;hr>
&lt;p>并发编程。&lt;/p>
&lt;ol>
&lt;li>并发程序经常出错的一个原因是人们认为自己所写代码的执行顺序是按书写的顺序来执行的，但在并发场景下，这显然是有问题的。&lt;/li>
&lt;li>Atomicity，原子性。谈论原子性，必须要有一个 context。因为在一个 context 下是原子性的，但在另一个 context 下，就可能不是原子性的了。具体的 context 可能是：进程、操作系统、机器、集群……假想个例子，在一维空间中的 X 轴上，从坐标 1 到坐标 3 必须要经过坐标 2，这在一维空间中是绝对正确的。但作为活在三维空间里的人，我有很多种办法不经过 X 轴上的坐标 2 而到达坐标 3。仅管我的轨迹映射到 X 轴上还是会“经过”坐标 2，这也更像一个“降维打击”的例子。&lt;/li>
&lt;li>形成死锁的四个条件：Mutual Exclusion（并发实体任意时刻独占资源）、Wait For Condition（并发实体同时持有资源并都在等待其他资源）、No Preemption（资源只能被持有它的实体释放）、Circular Wait（循环等待，a 等 b，b 等 c，c 等 a……）。&lt;/li>
&lt;li>活锁是饥饿的一种，任何需要分享的资源都有可能发生饥饿，如 CPU、内存、文件句柄、数据库连接等。&lt;/li>
&lt;li>并发（Concurrency）说的是代码，并行（Parallelism）说的是正在运行的程序。我们无法写出并行的代码，只能写并发的代码，并且期望它能并行执行。想象一下，我们写的代码在单核 CPU 上运行，还能并行地起来吗？&lt;/li>
&lt;li>考察并发的代码是否是在并行执行，我们得看在哪一个抽象的层级上看：并发原语、程序的运行时、操作系统、操作系统所在的平台（容器、虚拟机……）、CPUs、机器、集群……&lt;/li>
&lt;li>和前面说的 Atomicity 一样，谈论 Parallelism 时，也要有一个 context。它决定是否将能将两个操作看成并行。例如，我们运行 2 个操作，每个操作花费 1 秒。如果 context 是 5 秒钟，那可以说这两个操作是在并行执行；但如果 context 是 1 秒钟，那我们认为，这两个操作是串行地在执行。注意，context 并不等同于时间，线程、进程、操作系统等都可以看成 context。&lt;/li>
&lt;li>给并发或者说并行定义什么样的 context 和并发程序是否正确运行有很大关系。例如，context 是两台电脑，我们分别在两台电脑上运行两个计算器程序，那理论上这两个计算器程序就是并行的，且不会相互影响。&lt;/li>
&lt;li>在上面的例子里，context 是两台电脑，operations 是两个进程。很明显，我在我的电脑上运行任何程序，都不会影响你的电脑。但是在同一台机器上，一个进程还能保证不影响另一个进程吗？回答是不一定，比如读写同一个文件……&lt;/li>
&lt;li>大部分程序的并发抽象层级是线程。Go 在抽象层级上又增加了一个 goroutine。按理说，层级层次越高，并发安全性越难保证。但实际上 goroutine 让事情变得更容易，因为它并不是在线程的抽象层级之上又加了一层，而是取代了线程。&lt;/li>
&lt;li>Go channel 的设计思想来源于 Hoare 于 1978 年发表在 ACM 上的一篇关于 CSP（Communicating Sequential Processes）的论文。Go 是第一门吸收了 CSP 精华并且将其发扬光大的语言。&lt;/li>
&lt;li>大多数语言使用线程+并发同步访问控制作为并发模型，而 Go 的并发模型由 goroutine 和 channel 组成。线程类似于 goroutine，而并发同步访问控制则类似于 mutex。&lt;/li>
&lt;li>Go 并发的理念是：简单，尽量使用 channel，尽情使用 goroutine。&lt;/li>
&lt;li>在 linux 上，简单测试线程切换成本：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">在&lt;/span> &lt;span style="color:#a6e22e">CPU0&lt;/span> &lt;span style="color:#a6e22e">上执行&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>&lt;span style="color:#a6e22e">在两个内核线程间发送&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">、&lt;/span>&lt;span style="color:#a6e22e">接收消息&lt;/span>
&lt;span style="color:#a6e22e">taskset&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#a6e22e">perf&lt;/span> &lt;span style="color:#a6e22e">bench&lt;/span> &lt;span style="color:#a6e22e">sched&lt;/span> &lt;span style="color:#a6e22e">pipe&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">T&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为是单核，所以在两个线程间发送、接收消息，需要进行上下文切换。在我的乞丐版阿里云主机上得到结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">Running&lt;/span> &lt;span style="color:#e6db74">&amp;#39;sched/pipe&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">benchmark&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">Executed&lt;/span> &lt;span style="color:#ae81ff">1000000&lt;/span> &lt;span style="color:#a6e22e">pipe&lt;/span> &lt;span style="color:#a6e22e">operations&lt;/span> &lt;span style="color:#a6e22e">between&lt;/span> &lt;span style="color:#a6e22e">two&lt;/span> &lt;span style="color:#a6e22e">threads&lt;/span>
&lt;span style="color:#a6e22e">Total&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">69.171&lt;/span> [&lt;span style="color:#a6e22e">sec&lt;/span>]
&lt;span style="color:#ae81ff">69.171280&lt;/span> &lt;span style="color:#a6e22e">usecs&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span>
&lt;span style="color:#ae81ff">14456&lt;/span> &lt;span style="color:#a6e22e">ops&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">sec&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>计算出大致的线程切换成本：69.171280/2 = 34.58564 us。&lt;/p>
&lt;ol>
&lt;li>使用 sync.WaitGroup 时要注意，sync.Add 要在新起 goroutine 语句的外层调用，否则执行到 sync.Wait 时，可能新起的 goroutine 还没调度到，sync.Add 自然没执行，最终导致逻辑出错。&lt;/li>
&lt;li>mutex 是 mutual exclusion 的简写，翻译一下：互相排斥。&lt;/li>
&lt;li>sync.cond 有两个比较有意思的方法：sync.Cond.Signal 和 sync.Cond.Broadcast。前者会唤醒等待时间最长的 goroutine，后者会唤醒所有等待的 goroutine。另外，要注意 sync.Cond.Wait 方法内部，隐藏了一些副作用，会先解锁：&lt;code>c.L.Unlock()&lt;/code>，然后再加锁：&lt;code>c.L.Lock()&lt;/code>。&lt;/li>
&lt;li>查询 Go 源码使用了多少次 sync.Once：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">grep&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">ir&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Once&lt;/span> &lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#a6e22e">go&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span> &lt;span style="color:#a6e22e">GOROOT&lt;/span>)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">src&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#a6e22e">wc&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>channel 是粘合 goroutine 的胶水，select 则是粘合 channel 的胶水。&lt;/li>
&lt;li>关于 runtime.GOMAXPROCS(n) 函数的一个可能的使用场景：代码中可能存在 data race 的情况，增加 n 值可以让 data race 更快地发生，从而可以更快地调试错误。&lt;/li>
&lt;li>为了避免 goroutine 泄露，请注意：生成子 goroutine 的父 goroutine 需要负责停止子 gotoutine，即谁创建谁销毁。&lt;/li>
&lt;li>可以将一个“无序、耗时长”的 stage 转成 fan-out。fan-in 是多转一，fan-out 则是一转多。&lt;/li>
&lt;li>设计系统的时候，应该一开始就考虑 timeout 和 cancel。&lt;/li>
&lt;li>分布式系统需要支持 timeout 的几个理由：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>饱和 系统饱和时，最后到达的请求需要直接超时返回，否则可能引发雪崩；&lt;/li>
&lt;li>数据过期 数据其实有一定的时间窗口，过了窗口，就是无效数据了。例如前端一个请求过来，假设用户可以容忍 2s，那这个窗口就是 2s，分布式系统需要支持 2s 的超时设置，超过 2s 后数据无效；&lt;/li>
&lt;li>防止死锁 当然，触发 timeout，有可能使死锁变成活锁。系统设计的目标应该是在不触发 timeout 的情况下不发生死锁。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>与上一条对应的，分布式系统应该支持 cancel 操作的几个理由：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>超时 超时需要取消；&lt;/li>
&lt;li>用户干预 当有用户驱动的并发操作时，用户可取消他发起的操作；&lt;/li>
&lt;li>父节点取消 就像 context 一样，父 context 取消了，子 context 也要跟着取消；&lt;/li>
&lt;li>重复的请求 为了得到更快的响应，同时向几个系统发起请求，当得到了最快的系统响应后，取消其他系统的请求。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>可以将多个 ratelimiter 组合在一起，提供更有表达力的 ratelimiter。例如我可以限制每秒 1 个请求，同时每分钟限制 10 个请求。具体见第五章 Rate Limiting 小节。&lt;/li>
&lt;li>Go 使用 fork-join 模型。fork 即 go func(){}(), 而 join 则一般是指 sync.WaitGroup 或 channels。&lt;/li>
&lt;li>在一个函数里（位于某个 goroutine）不断地执行 go func(){}() 语句时，会不断地产生相应的 goroutine，并被添加到当前 goroutine 所在的 P 上的 LRQ 中，LRQ 可以看作是一个双端队列，越靠近队列尾的 goroutine 和当前 goroutine 的空间局部性越紧密，越需要优先执行。基于这点考虑，新产生的 goroutine 并不是直接放到 LRQ，而是会先放到 P 的 runnext 字段，执行完当前 goroutine 或当前 goroutine 被 park 后，首先执行的就是这个 runnext。如果之后又有新创建的 goroutine，它又会把当前挂在 runnext 上的 goroutine 顶到 LRQ 中。P 执行的时候从队列头的 goroutine 开始执行，而当 steal-working 发生时，也总是先从 LRQ 的头部偷，其实就是 FIFO。&lt;/li>
&lt;/ol></description></item><item><title>Go GC 垃圾回收</title><link>https://wnanbei.github.io/post/go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>&lt;p>垃圾回收 - &lt;code>GC&lt;/code> - &lt;code>garbage collection&lt;/code> 是自动内存管理的一种形式。通常由垃圾收集器收集并适时回收或重用不再被对象占用的内存。&lt;/p>
&lt;p>垃圾回收作为内存管理的一部分，包含 3 个重要的功能：&lt;/p>
&lt;ul>
&lt;li>如何分配和管理新对象。&lt;/li>
&lt;li>如何识别正在使用中的对象。&lt;/li>
&lt;li>如何清除不再使用的对象。&lt;/li>
&lt;/ul>
&lt;h2 id="为什么需要垃圾回收">为什么需要垃圾回收&lt;/h2>
&lt;h3 id="减少错误和复杂性">减少错误和复杂性&lt;/h3>
&lt;ul>
&lt;li>提供保证，不再被引用的对象将最终被收集。&lt;/li>
&lt;li>避免悬空指针、多次释放等手动管理内存时出现的问题。&lt;/li>
&lt;li>屏蔽了内存管理的复杂性，开发者可以更好的关注核心的业务逻辑。&lt;/li>
&lt;/ul>
&lt;h3 id="解耦">解耦&lt;/h3>
&lt;ul>
&lt;li>避免了两个模块同时维护了同一内存时，释放内存将会变得困难的问题。业务模块将真正的实现解耦，从而有利于开发、调试并开发出更大规模、高并发项目。&lt;/li>
&lt;/ul>
&lt;h3 id="缺陷">缺陷&lt;/h3>
&lt;p>垃圾回收有额外的成本：&lt;/p>
&lt;ul>
&lt;li>需要保存内存的状态信息（例如是否使用，是否包含指针）并扫描内存。&lt;/li>
&lt;li>在很多时候，还需要中断整个程序来处理垃圾回收。&lt;/li>
&lt;/ul>
&lt;p>因此，在要求极致的速度和内存要求极小的场景（例如嵌入式、系统级程序）时并不适用。但是却是开发大规模、分布式、微服务应用程序的极佳选择。&lt;/p>
&lt;h2 id="概念名词">概念名词&lt;/h2>
&lt;h3 id="根对象">根对象&lt;/h3>
&lt;p>根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：&lt;/p>
&lt;ol>
&lt;li>&lt;code>全局变量&lt;/code>：程序在编译期就能确定的那些存在于程序整个生命周期的变量。&lt;/li>
&lt;li>&lt;code>执行栈&lt;/code>：每个 Goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。&lt;/li>
&lt;li>&lt;code>寄存器&lt;/code>：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。&lt;/li>
&lt;/ol>
&lt;h3 id="stw">STW&lt;/h3>
&lt;p>STW 是 &lt;code>Stop the world&lt;/code> 或 &lt;code>Start the world&lt;/code> 的缩写。指停止赋值器进一步操作对象图，从 stop 到 start 这两个动作之间的时间间隔，即万物静止。用于保证实现的正确性、防止无止境的内存增长等问题。&lt;/p>
&lt;p>此过程中整个用户代码被停止或者放缓执行，&lt;code>STW&lt;/code> 越长，对用户代码造成的影响（例如延迟）就越大，对时间敏感的实时通信等应用程序会造成巨大的影响。&lt;/p>
&lt;p>GC 在需要进入 STW 时，需要通知并让所有的用户态代码停止，但是 &lt;code>for {}&lt;/code> 所在的 Goroutine 永远都不会被中断，从而始终无法进入 STW 阶段。&lt;/p>
&lt;p>在自 &lt;code>Go 1.14&lt;/code> 之后，这类 Goroutine 能够被异步地抢占，从而使得进入 STW 的时间不会超过抢占信号触发的周期，程序也不会因为仅仅等待一个 Goroutine 的停止而停顿在进入 STW 之前的操作上。&lt;/p>
&lt;h2 id="经典策略">经典策略&lt;/h2>
&lt;p>永远不可能有最好的垃圾回收算法，因为每一个应用程序所在的硬件条件、工作负载、性能要求都是不同的。&lt;/p>
&lt;p>每一种语言侧重的垃圾回收目标会不尽相同。垃圾回收的常见指标包括了程序暂停时间、空间开销、回收的及时性等，根据侧重于不同的设计目标会产生不同的垃圾回收策略。&lt;/p>
&lt;h3 id="标记-清扫">标记-清扫&lt;/h3>
&lt;p>标记-清扫（Mark-sweep）策略顾名思义分为 2 个主要的阶段：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>第一阶段是扫描并标记当前活着的对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二阶段是清扫没有被标记的垃圾对象。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>因此，标记-清扫算法是一种间接的垃圾回收算法，其不是直接查找垃圾对象，而是通过活着的对象倒推出垃圾对象。&lt;/p>
&lt;p>扫描的过程一般是从栈上的根对象开始， 只要对象引用了其他的堆对象，就会一直往下扫描。因此搜索方式可以采取深度优先搜索或者广度优先搜索的方式。&lt;/p>
&lt;p>标记-清扫算法主要的缺点在于：&lt;/p>
&lt;ul>
&lt;li>可能会产生内存碎片或空洞。这会导致由于没有连续的内存而使新对象分配失败。&lt;/li>
&lt;li>一般需要在标记阶段，&lt;code>STW&lt;/code> 暂停所有的程序运行。否则可能会破坏标记的结果。&lt;/li>
&lt;/ul>
&lt;h3 id="标记-压缩">标记-压缩&lt;/h3>
&lt;p>Mark-compact&lt;/p>
&lt;h3 id="半空间复制">半空间复制&lt;/h3>
&lt;p>Semispace copy&lt;/p>
&lt;h3 id="引用计数">引用计数&lt;/h3>
&lt;p>reference counting&lt;/p>
&lt;h3 id="分代">分代&lt;/h3>
&lt;p>分代 GC 指的是将按照对象存活时间进行划分。&lt;/p>
&lt;p>这种策略的重要前提是：死去的一般都是新创建不久的对象。因此，没有必要反复的扫描旧对象。&lt;/p>
&lt;p>这大概率会加快垃圾回收的速度，提高处理能力和吞吐量，减少程序暂停的时间。&lt;/p>
&lt;p>但是分代 GC 有成本的：&lt;/p>
&lt;ul>
&lt;li>这种策略没有办法及时回收老一代的对象。&lt;/li>
&lt;li>需要额外开销引用和区分新老对象，特别是有多代的时候。&lt;/li>
&lt;/ul>
&lt;h2 id="go-gc">Go GC&lt;/h2>
&lt;h3 id="三色标记法">三色标记法&lt;/h3>
&lt;p>Go 语言采用并发三色标记算法来进行垃圾回收。&lt;/p>
&lt;p>三色标记法是对&lt;code>标记-清扫&lt;/code>法在标记阶段的改进。&lt;/p>
&lt;p>三色标记本身是最简单的一种垃圾回收策略，实现很简单。引用计数由于固有的缺陷，在并发时不可扩展的特性很少被使用，不适合 Go 这样高并发的语言。&lt;/p>
&lt;p>&lt;strong>状态&lt;/strong>&lt;/p>
&lt;p>从垃圾回收器的视角来看，三色标记法规定了三种不同类型的对象，用不同的颜色相称：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>白色 - 可能死亡&lt;/code>&lt;/p>
&lt;p>在回收开始前，所有对象均为白色。当标记结束后，白色对象将被回收。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>灰色 - 波面&lt;/code>&lt;/p>
&lt;p>已被回收器标记，但回收器需要对其中的一个或多个指针进行扫描，因为他们可能还指向未被标记的白色对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>黑色 - 确定存活&lt;/code>&lt;/p>
&lt;p>已被回收器标记，其中所有字段都已被标记，黑色对象中任何一个指针都不可能直接指向白色对象。此对象将不会被回收。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>算法流程&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>从 Root 对象出发扫描所有根对象，将他们引用的对象标记为灰色。&lt;/li>
&lt;li>分析灰色对象是否引用了其他对象，如果没有引用其它对象则将该灰色对象标记为黑色，如果有引用则将它变为黑色的同时将它引用的对象也变为灰色。&lt;/li>
&lt;li>重复步骤3，直到灰色对象队列为空，标记过程完成，等待回收白色对象。&lt;/li>
&lt;li>将所有黑色对象变为白色，等待下一轮 GC。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>最大的好处是可以异步执行标记，从而可以以中断时间极少的代价或者完全没有中断来进行整个 GC&lt;/li>
&lt;li>三色标记法掌握了更多当前内存的信息，因此可以更加精确地按需调度，而不用像标记清扫法那样只能定时执行&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>异步执行的代价是可能会造成一些遗漏，因为那些早先被标记为黑色的对象可能目前已经是不可达的了。所以三色标记法是一个 &lt;code>false negative&lt;/code> 假阴性的算法。&lt;/li>
&lt;/ul>
&lt;h3 id="并发三色标记法的问题">并发三色标记法的问题&lt;/h3>
&lt;p>垃圾回收器的正确性体现在：&lt;strong>不应出现对象的丢失，也不应错误的回收还不需要回收的对象。&lt;/strong>&lt;/p>
&lt;p>当以下两种情况同时发生时，会破坏并发垃圾回收器的正确性：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>赋值器使一个黑色对象引用了白色对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>赋值器断开了灰色对象与白色对象间未经垃圾回收器访问过的关系。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>只要能够避免其中任何一个条件，都不会出现对象丢失的情况，因为：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>如果 1 被避免，则所有白色对象均被灰色对象引用，没有白色对象会被遗漏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果 2 被避免，即便白色对象的指针被写入到黑色对象中，但从灰色对象出发，总存在一条没有访问过的路径，从而找到到达白色对象的路径，白色对象最终不会被遗漏。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="写屏障混合写屏障">写屏障、混合写屏障&lt;/h3>
&lt;p>写屏障是一个在并发垃圾回收器中才会出现的概念。&lt;/p>
&lt;h4 id="强三色不变式">强三色不变式&lt;/h4>
&lt;h4 id="弱三色不变式">弱三色不变式&lt;/h4>
&lt;h2 id="gc-流程">GC 流程&lt;/h2>
&lt;ol>
&lt;li>Mark Setup 标记准备阶段，STW 并打开 Write Barrier&lt;/li>
&lt;li>开始标记&lt;/li>
&lt;li>Mark Termination 标记结束，STW&lt;/li>
&lt;li>Sweeping 开始清理，并发执行&lt;/li>
&lt;/ol>
&lt;h3 id="标记准备">标记准备&lt;/h3>
&lt;h2 id="go-gc-总结">Go GC 总结&lt;/h2>
&lt;h3 id="历史演进">历史演进&lt;/h3>
&lt;ul>
&lt;li>Go 1：串行三色标记清扫&lt;/li>
&lt;li>Go 1.3：并行清扫，标记过程需要 STW，停顿时间在约几百毫秒&lt;/li>
&lt;li>Go 1.5：并发标记清扫，停顿时间在一百毫秒以内&lt;/li>
&lt;li>Go 1.6：使用 bitmap 来记录回收内存的位置，大幅优化垃圾回收器自身消耗的内存，停顿时间在十毫秒以内&lt;/li>
&lt;li>Go 1.7：停顿时间控制在两毫秒以内&lt;/li>
&lt;li>Go 1.8：混合写屏障，停顿时间在半个毫秒左右&lt;/li>
&lt;li>Go 1.9：彻底移除了栈的重扫描过程&lt;/li>
&lt;li>Go 1.12：整合了两个阶段的 &lt;code>Mark Termination&lt;/code>，但引入了一个严重的 GC Bug 至今未修（见问题 20），尚无该 Bug 对 GC 性能影响的报告&lt;/li>
&lt;li>Go 1.13：着手解决向操作系统归还内存的，提出了新的 Scavenger&lt;/li>
&lt;li>Go 1.14：替代了仅存活了一个版本的 scavenger，全新的页分配器，优化分配内存过程的速率与现有的扩展性问题，并引入了异步抢占，解决了由于密集循环导致的 STW 时间过长的问题&lt;/li>
&lt;/ul>
&lt;h3 id="内存泄漏">内存泄漏&lt;/h3>
&lt;p>在具有 GC 的语言中，内存泄漏用严谨的话来说应该是：&lt;/p>
&lt;blockquote>
&lt;p>预期能很快被释放的内存由于附着在了长期存活的内存上、或生命期意外地被延长，导致预计能够立即回收的内存长时间得不到回收。&lt;/p>
&lt;/blockquote>
&lt;p>Go 中内存泄漏的几种情况：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>被根对象引用&lt;/strong>&lt;/p>
&lt;p>当有一个全局对象时，可能不经意间将某个变量附着在其上，且忽略的将其进行释放，则该内存永远不会得到释放。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Goroutine 泄漏&lt;/strong>&lt;/p>
&lt;p>Goroutine 作为一种逻辑上理解的轻量级线程，在运行过程中需要消耗一定的内存来保存用户代码的上下文信息。&lt;/p>
&lt;p>因此，如果一个程序持续不断地产生新的 Goroutine、且不结束已经创建的 Goroutine 并复用这部分内存，就会造成内存泄漏的现象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Channel 泄漏&lt;/strong>&lt;/p>
&lt;p>Channel 作为一种同步原语，会连接两个不同的 Goroutine，如果一个 Goroutine 尝试向一个没有接收方的无缓冲 Channel 发送消息，则该 Goroutine 会被永久的休眠，整个 Goroutine 及其执行栈都得不到释放。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Go Gorm CRUD</title><link>https://wnanbei.github.io/post/go-gorm-crud/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gorm-crud/</guid><description>&lt;p>Gorm 常见 CRUD 操作 API。&lt;/p>
&lt;h2 id="通用操作">通用操作&lt;/h2>
&lt;h3 id="批量操作">批量操作&lt;/h3>
&lt;p>最简单的方法是使用 &lt;code>Table()&lt;/code> 方法，指定要操作的表名，这时候进行 &lt;code>CRUD&lt;/code> 操作就是批量的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Table&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;users&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#f92672">...&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者使用 &lt;code>Model()&lt;/code>，传入没有主键的模型实例，没有指定主键的话 Gorm 默认会使用批量操作，一般惯常用法是使用空的主键实例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>{}).&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#f92672">...&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="根据主键操作">根据主键操作&lt;/h3>
&lt;p>使用 &lt;code>Model()&lt;/code> 方法，如果传入的模型实例有主键值，那么会默认只操作符合主键值的单条数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>}
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#f92672">...&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="where">where&lt;/h3>
&lt;p>除了使用主键选定操作数据，还可以使用 &lt;code>Where&lt;/code> 设定条件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Get first matched record
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name = &amp;#39;jinzhu&amp;#39; limit 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// Get all matched records
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name = &amp;#39;jinzhu&amp;#39;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// &amp;lt;&amp;gt;
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name &amp;lt;&amp;gt; &amp;#39;jinzhu&amp;#39;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name &amp;lt;&amp;gt; ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// IN
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name in (&amp;#39;jinzhu&amp;#39;,&amp;#39;jinzhu 2&amp;#39;);
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name IN (?)&amp;#34;&lt;/span>, []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu 2&amp;#34;&lt;/span>}).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// LIKE
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name LIKE &amp;#39;%jin%&amp;#39;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name LIKE ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;%jin%&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// AND
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name = &amp;#39;jinzhu&amp;#39; AND age &amp;gt;= 22;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = ? AND age &amp;gt;= ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;22&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// Time
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE updated_at &amp;gt; &amp;#39;2000-01-01 00:00:00&amp;#39;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;updated_at &amp;gt; ?&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">lastWeek&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// BETWEEN
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE created_at BETWEEN &amp;#39;2000-01-01 00:00:00&amp;#39; AND &amp;#39;2000-01-08 00:00:00&amp;#39;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;created_at BETWEEN ? AND ?&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">lastWeek&lt;/span>, &lt;span style="color:#a6e22e">today&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// Struct
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name = &amp;#34;jinzhu&amp;#34; AND age = 20 LIMIT 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Age&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>}).&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// Map
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name = &amp;#34;jinzhu&amp;#34; AND age = 20;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>}).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// 主键的切片
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE id IN (20, 21, 22);
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>([]&lt;span style="color:#66d9ef">int64&lt;/span>{&lt;span style="color:#ae81ff">20&lt;/span>, &lt;span style="color:#ae81ff">21&lt;/span>, &lt;span style="color:#ae81ff">22&lt;/span>}).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="not">not&lt;/h3>
&lt;p>与 &lt;code>Where&lt;/code> 相反。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// SELECT * FROM users WHERE name &amp;lt;&amp;gt; &amp;#34;jinzhu&amp;#34; LIMIT 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Not&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// Not In
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name NOT IN (&amp;#34;jinzhu&amp;#34;, &amp;#34;jinzhu 2&amp;#34;);
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Not&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu 2&amp;#34;&lt;/span>}).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// Not In slice of primary keys
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE id NOT IN (1,2,3);
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Not&lt;/span>([]&lt;span style="color:#66d9ef">int64&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>}).&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// SELECT * FROM users;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Not&lt;/span>([]&lt;span style="color:#66d9ef">int64&lt;/span>{}).&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// Plain SQL
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE NOT(name = &amp;#34;jinzhu&amp;#34;);
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Not&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// Struct
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name &amp;lt;&amp;gt; &amp;#34;jinzhu&amp;#34;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Not&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>}).&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="or">or&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// SELECT * FROM users WHERE role = &amp;#39;admin&amp;#39; OR role = &amp;#39;super_admin&amp;#39;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;role = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;admin&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Or&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;role = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super_admin&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// Struct
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name = &amp;#39;jinzhu&amp;#39; OR name = &amp;#39;jinzhu 2&amp;#39;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = &amp;#39;jinzhu&amp;#39;&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Or&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;jinzhu 2&amp;#34;&lt;/span>}).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// Map
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name = &amp;#39;jinzhu&amp;#39; OR name = &amp;#39;jinzhu 2&amp;#39;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = &amp;#39;jinzhu&amp;#39;&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Or&lt;/span>(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;jinzhu 2&amp;#34;&lt;/span>}).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="order">order&lt;/h3>
&lt;p>排序，设置第二个参数 &lt;code>reorder&lt;/code> 为 &lt;code>true&lt;/code> ，可以覆盖前面定义的排序条件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// SELECT * FROM users ORDER BY age desc, name;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;age desc, name&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// 多字段排序
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users ORDER BY age desc, name;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;age desc&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Order&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// 覆盖排序
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users ORDER BY age desc; (users1)
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users ORDER BY age; (users2)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;age desc&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users1&lt;/span>).&lt;span style="color:#a6e22e">Order&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users2&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="limit">limit&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// SELECT * FROM users LIMIT 3;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Limit&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// -1 取消 Limit 条件
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users LIMIT 10; (users1)
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users; (users2)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Limit&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users1&lt;/span>).&lt;span style="color:#a6e22e">Limit&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users2&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="offset">offset&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// SELECT * FROM users OFFSET 3;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Offset&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// -1 取消 Offset 条件
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users OFFSET 10; (users1)
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users; (users2)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Offset&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users1&lt;/span>).&lt;span style="color:#a6e22e">Offset&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users2&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="count">count&lt;/h3>
&lt;p>&lt;code>Count&lt;/code> 必须是链式查询的最后一个操作 ，因为它会覆盖前面的 &lt;code>SELECT&lt;/code>，但如果里面使用了 &lt;code>count&lt;/code> 时不会覆盖。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// SELECT * from USERS WHERE name = &amp;#39;jinzhu&amp;#39; OR name = &amp;#39;jinzhu 2&amp;#39;; (users)
&lt;/span>&lt;span style="color:#75715e">// SELECT count(*) FROM users WHERE name = &amp;#39;jinzhu&amp;#39; OR name = &amp;#39;jinzhu 2&amp;#39;; (count)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Or&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu 2&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>).&lt;span style="color:#a6e22e">Count&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>)
&lt;span style="color:#75715e">// SELECT count(*) FROM users WHERE name = &amp;#39;jinzhu&amp;#39;; (count)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{}).&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Count&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>)
&lt;span style="color:#75715e">// SELECT count(*) FROM deleted_users;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Table&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;deleted_users&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Count&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>)
&lt;span style="color:#75715e">// SELECT count( distinct(name) ) FROM deleted_users;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Table&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;deleted_users&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Select&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;count(distinct(name))&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Count&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>())
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="插入">插入&lt;/h2>
&lt;p>判断数据是否存在于数据库中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Jinzhu&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Age&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>, &lt;span style="color:#a6e22e">Birthday&lt;/span>: &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()}
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">NewRecord&lt;/span>(&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插入数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="插入前处理">插入前处理&lt;/h3>
&lt;p>如果想在插入数据前做一定的处理，可以为模型设置 &lt;code>BeforeCreate()&lt;/code> 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>) &lt;span style="color:#a6e22e">BeforeCreate&lt;/span>(&lt;span style="color:#a6e22e">scope&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Scope&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#a6e22e">scope&lt;/span>.&lt;span style="color:#a6e22e">SetColumn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">uuid&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>())
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="查询">查询&lt;/h2>
&lt;p>查询单条数据时可以使用单个 &lt;code>user&lt;/code> 接收数据，如果查询到的是多条数据，需要使用切片 &lt;code>users&lt;/code> 进行接收。&lt;/p>
&lt;h3 id="根据主键查询数据">根据主键查询数据&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 根据主键查询第一条记录
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users ORDER BY id LIMIT 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// 随机获取一条记录
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users LIMIT 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Take&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// 根据主键查询最后一条记录
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users ORDER BY id DESC LIMIT 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Last&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#75715e">// 查询所有的记录
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>)
&lt;span style="color:#75715e">// 查询指定的某条记录(仅当主键为整型时可用)
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE id = 10;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="内联条件">内联条件&lt;/h3>
&lt;p>当多个立即执行方法一起使用时，会默认共享前一个执行方法的条件。如果不希望共享，可以使用内联条件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 根据主键获取记录 (只适用于整形主键)
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE id = 23 LIMIT 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#ae81ff">23&lt;/span>)
&lt;span style="color:#75715e">// 根据主键获取记录, 如果它是一个非整形主键
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE id = &amp;#39;string_primary_key&amp;#39; LIMIT 1;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;id = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;string_primary_key&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// Plain SQL
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE name = &amp;#34;jinzhu&amp;#34;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;name = ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// SELECT * FROM users WHERE name &amp;lt;&amp;gt; &amp;#34;jinzhu&amp;#34; AND age &amp;gt; 20;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;name &amp;lt;&amp;gt; ? AND age &amp;gt; ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;jinzhu&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;span style="color:#75715e">// Struct
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE age = 20;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>, &lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Age&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>})
&lt;span style="color:#75715e">// Map
&lt;/span>&lt;span style="color:#75715e">// SELECT * FROM users WHERE age = 20;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">users&lt;/span>, &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>})
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新">更新&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">First&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;jinzhu 2&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">Age&lt;/span> = &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Save&lt;/code> 会更新所有字段，即使你没有更改这个字段的值。&lt;/p>
&lt;h3 id="更新指定字段">更新指定字段&lt;/h3>
&lt;p>只更新指定的字段可以使用 &lt;code>Update&lt;/code> 或 &lt;code>Updates&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>更新单个字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// UPDATE users SET name=&amp;#39;hello&amp;#39;, updated_at=&amp;#39;2013-11-17 21:34:10&amp;#39; WHERE id=111;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;active = ?&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>).&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// UPDATE users SET name=&amp;#39;hello&amp;#39;, updated_at=&amp;#39;2013-11-17 21:34:10&amp;#39; WHERE id=111 AND active=true;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>map&lt;/code> 更新多个字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">Updates&lt;/span>(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;actived&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>})
&lt;span style="color:#75715e">// UPDATE users SET name=&amp;#39;hello&amp;#39;, age=18, actived=false, updated_at=&amp;#39;2013-11-17 21:34:10&amp;#39; WHERE id=111;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>struct&lt;/code> 更新多个字段，只会更新其中有变化且为非零值的字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">Updates&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Age&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>})
&lt;span style="color:#75715e">// UPDATE users SET name=&amp;#39;hello&amp;#39;, age=18, updated_at = &amp;#39;2013-11-17 21:34:10&amp;#39; WHERE id = 111;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>零值的字段不会发生任何更新，以下操作将没有任何更新&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">Updates&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Age&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">Actived&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>})
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>更新时选定或者排除某些字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Select 选定某些字段
&lt;/span>&lt;span style="color:#75715e">// UPDATE users SET name=&amp;#39;hello&amp;#39;, updated_at=&amp;#39;2013-11-17 21:34:10&amp;#39; WHERE id=111;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">Select&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Updates&lt;/span>(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;actived&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>})
&lt;span style="color:#75715e">// Omit 排除某些字段
&lt;/span>&lt;span style="color:#75715e">//// UPDATE users SET age=18, actived=false, updated_at=&amp;#39;2013-11-17 21:34:10&amp;#39; WHERE id=111;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">Omit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Updates&lt;/span>(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;actived&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>})
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="忽略中间件">忽略中间件&lt;/h3>
&lt;p>使用 &lt;code>Update&lt;/code> 和 &lt;code>Updates&lt;/code> 更新时会调用默认的 &lt;code>BeforeUpdate()&lt;/code> 和 &lt;code>AfterUpdate&lt;/code> 方法，这些默认方法会更新 &lt;code>UpdateAt&lt;/code> 时间戳。&lt;/p>
&lt;p>如果想不调用这些方法，可以使用 &lt;code>UpdateColumn&lt;/code>， &lt;code>UpdateColumns&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 更新单个属性，类似于 `Update`
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">UpdateColumn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">//// UPDATE users SET name=&amp;#39;hello&amp;#39; WHERE id = 111;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// 更新多个属性，类似于 `Updates`
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>).&lt;span style="color:#a6e22e">UpdateColumns&lt;/span>(&lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Age&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>})
&lt;span style="color:#75715e">//// UPDATE users SET name=&amp;#39;hello&amp;#39;, age=18 WHERE id = 111;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-sql-表达式">使用 SQL 表达式&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">DB&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">product&lt;/span>).&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;price&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Expr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;price * ? + ?&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>))
&lt;span style="color:#75715e">//// UPDATE &amp;#34;products&amp;#34; SET &amp;#34;price&amp;#34; = price * &amp;#39;2&amp;#39; + &amp;#39;100&amp;#39;, &amp;#34;updated_at&amp;#34; = &amp;#39;2013-11-17 21:34:10&amp;#39; WHERE &amp;#34;id&amp;#34; = &amp;#39;2&amp;#39;;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除">删除&lt;/h2>
&lt;p>删除时确保主键字段有值，GORM 会通过主键去删除记录，如果主键为空，GORM 会删除该 model 的所有记录。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">email&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>批量删除&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Where&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;email LIKE ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;%jinzhu%&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">Email&lt;/span>{})
&lt;span style="color:#75715e">//// DELETE from emails where email LIKE &amp;#34;%jinzhu%&amp;#34;;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">Email&lt;/span>{}, &lt;span style="color:#e6db74">&amp;#34;email LIKE ?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;%jinzhu%&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">//// DELETE from emails where email LIKE &amp;#34;%jinzhu%&amp;#34;;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go Gorm 数据库连接与模型</title><link>https://wnanbei.github.io/post/go-gorm-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gorm-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>对开发者友好的 Go ORM 库，v2 版本。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get -u gorm.io/gorm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gorm.io/gorm&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="连接数据库">连接数据库&lt;/h2>
&lt;h3 id="数据库驱动">数据库驱动&lt;/h3>
&lt;p>Gorm 官方支持 MySQL、PostgreSQL、SQLite、SQL Server 四个数据库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gorm.io/driver/mysql&amp;#34;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gorm.io/driver/postgres&amp;#34;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gorm.io/driver/sqlite&amp;#34;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gorm.io/driver/sqlserver&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="建立连接">建立连接&lt;/h3>
&lt;p>使用 &lt;code>gorm.Open()&lt;/code>方法建立连接。&lt;/p>
&lt;h4 id="mysql">MySQL&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>要正确处理 &lt;code>time.Time&lt;/code>，需要添加 &lt;code>parseTime&lt;/code> 参数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>要完全支持 UTF-8 编码，需要修改&lt;code>charset=utf8&lt;/code> 为 &lt;code>charset=utf8mb4&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;gorm.io/driver/mysql&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;gorm.io/gorm&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">dsn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;amp;parseTime=True&amp;amp;loc=Local&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">mysql&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">dsn&lt;/span>), &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{})
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="postgresql">PostgreSQL&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;gorm.io/driver/postgres&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;gorm.io/gorm&amp;#34;&lt;/span>
)
&lt;span style="color:#a6e22e">dsn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">postgres&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">dsn&lt;/span>), &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gorm 使用 pgx 作为 postgres 的 database/sql 驱动，默认情况下，它会启用 prepared statement 缓存，可以这样禁用它：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">postgres&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">postgres&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;span style="color:#a6e22e">DSN&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">PreferSimpleProtocol&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#75715e">// disables implicit prepared statement usage
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}), &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{})
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="连接池">连接池&lt;/h4>
&lt;p>GORM 使用 database/sql 维护连接池，&lt;code>db.DB()&lt;/code> 方法可用于从当前 &lt;code>*gorm.DB&lt;/code> 返回一个通用的数据库接口 &lt;code>*sql.DB&lt;/code>。&lt;/p>
&lt;p>可以使用此接口设定连接池参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">sqlDB&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span>()
&lt;span style="color:#75715e">// SetMaxIdleConns 设置空闲连接池中连接的最大数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">sqlDB&lt;/span>.&lt;span style="color:#a6e22e">SetMaxIdleConns&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>)
&lt;span style="color:#75715e">// SetMaxOpenConns 设置打开数据库连接的最大数量。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">sqlDB&lt;/span>.&lt;span style="color:#a6e22e">SetMaxOpenConns&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>)
&lt;span style="color:#75715e">// SetConnMaxLifetime 设置了连接可复用的最大时间。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">sqlDB&lt;/span>.&lt;span style="color:#a6e22e">SetConnMaxLifetime&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Hour&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="模型">模型&lt;/h2>
&lt;p>模型使用 Struct 的 Tag 来对字段进行设置。字段支持基本的 Go 类型或它们的指针，以及 &lt;code>database/sql&lt;/code> 库中的 &lt;code>sql.Scanner&lt;/code> 和 &lt;code>driver.Valuer&lt;/code> 接口。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">ID&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span>
&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Email&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Age&lt;/span> &lt;span style="color:#66d9ef">uint8&lt;/span>
&lt;span style="color:#a6e22e">Birthday&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#a6e22e">MemberNumber&lt;/span> &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">NullString&lt;/span>
&lt;span style="color:#a6e22e">ActivedAt&lt;/span> &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">NullTime&lt;/span>
&lt;span style="color:#a6e22e">CreatedAt&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#a6e22e">UpdatedAt&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="约定">约定&lt;/h3>
&lt;p>Gorm 使用了一系列的约定来定义默认的行为：&lt;/p>
&lt;ul>
&lt;li>默认使用 &lt;code>ID&lt;/code> 字段作为表的主键，可以通过标签 &lt;code>primaryKey&lt;/code> 将其它字段设为主键&lt;/li>
&lt;li>默认使用结构体名的 &lt;code>蛇形命名&lt;/code> 的复数作为表名。对于结构体 &lt;code>User&lt;/code>，根据约定，其表名为 &lt;code>users&lt;/code>&lt;/li>
&lt;li>数据表的列名使用的是 struct 字段名的 &lt;code>蛇形命名&lt;/code>。&lt;code>CreatedAt&lt;/code> 字段的列名是 &lt;code>created_at&lt;/code>&lt;/li>
&lt;li>对于有 &lt;code>CreatedAt&lt;/code> 字段的模型，创建记录时，如果该字段值为零值，则将该字段的值设为当前时间&lt;/li>
&lt;li>对于有 &lt;code>UpdatedAt&lt;/code> 字段的模型，更新记录时，将该字段的值设为当前时间。&lt;/li>
&lt;/ul>
&lt;p>Gorm 提供了一个 &lt;code>gorm.Model&lt;/code> 结构体，提供了这些字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Model&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">ID&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#e6db74">`gorm:&amp;#34;primaryKey&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">CreatedAt&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#a6e22e">UpdatedAt&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#a6e22e">DeletedAt&lt;/span> &lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">DeletedAt&lt;/span> &lt;span style="color:#e6db74">`gorm:&amp;#34;index&amp;#34;`&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以非常方便的将它嵌入到需要的结构体中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>
&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tag">Tag&lt;/h3>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>Tag 不区分大小写&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Tag&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">column&lt;/td>
&lt;td style="text-align:left">指定列名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">type&lt;/td>
&lt;td style="text-align:left">列数据类型，推荐使用兼容性好的通用类型，例如：所有数据库都支持 bool、int、uint、float、string、time、bytes 并且可以和其他标签一起使用，例如：&lt;code>not null&lt;/code>、&lt;code>size&lt;/code>, &lt;code>autoIncrement&lt;/code>… 像 &lt;code>varbinary(8)&lt;/code> 这样指定数据库数据类型也是支持的。在使用指定数据库数据类型时，它需要是完整的数据库数据类型，如：&lt;code>MEDIUMINT UNSINED not NULL AUTO_INSTREMENT&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">size&lt;/td>
&lt;td style="text-align:left">指定列大小, 默认值255&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">primaryKey&lt;/td>
&lt;td style="text-align:left">将列指定为主键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">unique&lt;/td>
&lt;td style="text-align:left">将列指定为唯一&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">default&lt;/td>
&lt;td style="text-align:left">指定列默认值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">precision&lt;/td>
&lt;td style="text-align:left">指定列精度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">scale&lt;/td>
&lt;td style="text-align:left">指定列大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">not null&lt;/td>
&lt;td style="text-align:left">将列指定为非 NULL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">autoIncrement&lt;/td>
&lt;td style="text-align:left">指定列为自增类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">embedded&lt;/td>
&lt;td style="text-align:left">将结构设置为嵌入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">embeddedPrefix&lt;/td>
&lt;td style="text-align:left">设置嵌入结构的前缀&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">autoCreateTime&lt;/td>
&lt;td style="text-align:left">创建时追踪当前时间，对于 &lt;code>int&lt;/code> 字段，它会追踪时间戳秒数，您可以使用 &lt;code>nano&lt;/code>/&lt;code>milli&lt;/code> 来追踪纳秒、毫秒时间戳，例如：&lt;code>autoCreateTime:nano&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">autoUpdateTime&lt;/td>
&lt;td style="text-align:left">创建/更新时追踪当前时间，对于 &lt;code>int&lt;/code> 字段，它会追踪时间戳秒数，您可以使用 &lt;code>nano&lt;/code>/&lt;code>milli&lt;/code> 来追踪纳秒、毫秒时间戳，例如：&lt;code>autoUpdateTime:milli&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">index&lt;/td>
&lt;td style="text-align:left">根据参数创建索引，多个字段使用相同的名称则创建复合索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">uniqueIndex&lt;/td>
&lt;td style="text-align:left">与 &lt;code>index&lt;/code> 相同，但创建的是唯一索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">check&lt;/td>
&lt;td style="text-align:left">创建检查约束，例如 &lt;code>check:age &amp;gt; 13&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&amp;lt;-&lt;/td>
&lt;td style="text-align:left">设置字段写入的权限， &lt;code>&amp;lt;-:create&lt;/code> 只创建、&lt;code>&amp;lt;-:update&lt;/code> 只更新、&lt;code>&amp;lt;-:false&lt;/code> 无写入权限、&lt;code>&amp;lt;-&lt;/code> 创建和更新权限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-&amp;gt;&lt;/td>
&lt;td style="text-align:left">设置字段读的权限，&lt;code>-&amp;gt;:false&lt;/code> 无读权限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">忽略此字段&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="关联模型的-tag">关联模型的 Tag&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Tag&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Many2Many&lt;/td>
&lt;td style="text-align:left">指定连接表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ForeignKey&lt;/td>
&lt;td style="text-align:left">设置外键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Association_ForeignKey&lt;/td>
&lt;td style="text-align:left">设置关联外键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Polymorphic&lt;/td>
&lt;td style="text-align:left">指定多态类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Polymorphic_Value&lt;/td>
&lt;td style="text-align:left">指定多态值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">JoinTable_ForeignKey&lt;/td>
&lt;td style="text-align:left">指定连接表的外键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Association_JoinTable_ForeignKey&lt;/td>
&lt;td style="text-align:left">指定连接表的关联外键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Save_Associations&lt;/td>
&lt;td style="text-align:left">是否自动完成 save 的相关操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Association_AutoUpdate&lt;/td>
&lt;td style="text-align:left">是否自动完成 update 的相关操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Association_AutoCreate&lt;/td>
&lt;td style="text-align:left">是否自动完成 create 的相关操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Association_Save_Reference&lt;/td>
&lt;td style="text-align:left">是否自动完成引用的 save 的相关操作&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="默认值">默认值&lt;/h3>
&lt;p>当通过结构体进行 &lt;code>CURD&lt;/code> 操作时，GORM 将会只通过非零值字段操作，这意味着如果你的字段值为&lt;code>0&lt;/code>，&lt;code>''&lt;/code>， &lt;code>false&lt;/code> 或者其他零值时，将不会被用于构建 &lt;code>sql&lt;/code> 语句。&lt;/p>
&lt;p>存储时如果为零值，会使用 &lt;code>Tag&lt;/code> 设定的默认值，没有设定默认值则使用数据库的默认值。&lt;/p>
&lt;p>所以 gorm 无法区分是故意设置的零值，还是没有设置值，如果需要区分，模型的字段类型可以使用指针或者 &lt;code>Scanner/Valuer&lt;/code> 接口。&lt;/p>
&lt;p>指针：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>
&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Age&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#e6db74">`gorm:&amp;#34;default:18&amp;#34;`&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Scanner/Valuer&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">gorm&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>
&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Age&lt;/span> &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">NullInt64&lt;/span> &lt;span style="color:#e6db74">`gorm:&amp;#34;default:18&amp;#34;`&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数据表">数据表&lt;/h3>
&lt;p>模型的表名可以使用 &lt;code>TableName()&lt;/code> 方法设定：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">User&lt;/span>) &lt;span style="color:#a6e22e">TableName&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;users&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>检查表是否存在&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">HasTable&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{})
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">HasTable&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;users&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>建表&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">CreateTable&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{})
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>删除&lt;/strong>&lt;/p>
&lt;p>传入多个表名或多个模型可以删除多张表，如果表不存在会在 &lt;code>Error&lt;/code> 中保存异常信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DropTable&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{})
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DropTable&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;users&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DropTableIfExists&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{}, &lt;span style="color:#e6db74">&amp;#34;products&amp;#34;&lt;/span>) &lt;span style="color:#75715e">// 当表存在时才删除表
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="更改模型">更改模型&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>修改字段类型&lt;/strong>&lt;/p>
&lt;p>修改模型 &lt;code>User&lt;/code> 的 &lt;code>description&lt;/code> 列的数据类型为 &lt;code>text&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{}).&lt;span style="color:#a6e22e">ModifyColumn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;description&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>删除字段&lt;/strong>&lt;/p>
&lt;p>删除模型 &lt;code>User&lt;/code> 的 &lt;code>description&lt;/code> 列&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Model&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{}).&lt;span style="color:#a6e22e">DropColumn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;description&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Go 字符串处理 strings</title><link>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86-strings/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86-strings/</guid><description>&lt;p>作为一种基本数据结构，每种语言都有一些对于字符串的预定义处理函数。Go 中使用 &lt;code>strings&lt;/code> 包来完成对字符串的主要操作。&lt;/p>
&lt;h3 id="判断前后缀">判断前后缀&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 判断字符串 s 是否以 prefix 开头
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">HasPrefix&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">prefix&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 判断字符串 s 是否以 prefix 结尾
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">HasSuffix&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">suffix&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="判断包含关系">判断包含关系&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 判断字符串 s 是否包含 substr
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">substr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="判断位置">判断位置&lt;/h3>
&lt;p>&lt;code>Index&lt;/code> 返回字符串 &lt;code>str&lt;/code> 在字符串 &lt;code>s&lt;/code> 中的索引（&lt;code>str&lt;/code> 的第一个字符的索引），-1 表示字符串 &lt;code>s&lt;/code> 不包含字符串 &lt;code>str&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>LastIndex&lt;/code> 返回字符串 &lt;code>str&lt;/code> 在字符串 &lt;code>s&lt;/code> 中最后出现位置的索引（&lt;code>str&lt;/code> 的第一个字符的索引），-1 表示字符串 &lt;code>s&lt;/code> 不包含字符串 &lt;code>str&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">LastIndex&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 &lt;code>ch&lt;/code> 是非 ASCII 编码的字符，建议使用以下函数来对字符进行定位：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">IndexRune&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#66d9ef">rune&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="替换">替换&lt;/h3>
&lt;p>&lt;code>Replace&lt;/code> 用于将字符串 &lt;code>str&lt;/code> 中的前 &lt;code>n&lt;/code> 个字符串 &lt;code>old&lt;/code> 替换为字符串 &lt;code>new&lt;/code>，并返回一个新的字符串，如果 &lt;code>n = -1&lt;/code> 则替换所有字符串 &lt;code>old&lt;/code> 为字符串 &lt;code>new&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Replace&lt;/span>(&lt;span style="color:#a6e22e">str&lt;/span>, &lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="统计出现次数">统计出现次数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 计算字符串 str 在字符串 s 中出现的非重叠次数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Count&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重复字符串">重复字符串&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 用于重复 count 次字符串 s 并返回一个新的字符串：
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Repeat&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="大小写">大小写&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 将字符串中的 Unicode 字符全部转换为相应的小写字符
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">ToLower&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// 将字符串中的 Unicode 字符全部转换为相应的大写字符
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">ToUpper&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="裁剪前后">裁剪前后&lt;/h3>
&lt;p>修剪掉 s 字符串前后，由 unicode 指定的空格字符，包括 &lt;code>\n\t\r\n&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TrimSpace&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修剪掉 s 字符串前后的 cutset 字符，可以直接指定多个字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Trim&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">cutset&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TrimLeft&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">cutset&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TrimRight&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">cutset&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入一个函数来依次判断字符是否需要被剪裁&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TrimFunc&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">rune&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TrimLeftFunc&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">rune&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TrimRightFunc&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">rune&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修剪掉 s 字符串前后特定的 prefix 字符串前后缀&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TrimPrefix&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">prefix&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TrimSuffix&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">suffix&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="分割字符串">分割字符串&lt;/h3>
&lt;p>&lt;code>strings.Fields(s)&lt;/code> 将会利用 1 个或多个空白符号来作为动态长度的分隔符将字符串分割成若干小块，并返回一个 slice，如果字符串只包含空白符号，则返回一个长度为 0 的 slice。&lt;/p>
&lt;p>&lt;code>strings.Split(s, sep)&lt;/code> 用于自定义分割符号来对指定字符串进行分割，同样返回 slice。&lt;/p>
&lt;p>因为这 2 个函数都会返回 slice，所以习惯使用 for-range 循环来对其进行处理。&lt;/p>
&lt;h3 id="拼接">拼接&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">sl&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">sep&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="从字符串中读取内容">从字符串中读取内容&lt;/h3>
&lt;p>函数 &lt;code>strings.NewReader(str)&lt;/code> 用于生成一个 &lt;code>Reader&lt;/code> 并读取字符串中的内容，然后返回指向该 &lt;code>Reader&lt;/code>的指针，从其它类型读取内容的函数还有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Read()&lt;/code> 从 []byte 中读取内容。&lt;/li>
&lt;li>&lt;code>ReadByte()&lt;/code> 和 &lt;code>ReadRune()&lt;/code> 从字符串中读取下一个 byte 或者 rune。&lt;/li>
&lt;/ul></description></item><item><title>Go 字符串类型转换 strconv</title><link>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-strconv/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-strconv/</guid><description>&lt;p>Strconv 包含了一些变量用于获取程序运行的操作系统平台下 int 类型所占的位数，如：&lt;code>strconv.IntSize&lt;/code>。&lt;/p>
&lt;p>任何类型 &lt;strong>T&lt;/strong> 转换为字符串总是成功的。&lt;/p>
&lt;h3 id="int">Int&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// int 转 string
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// string 转 int
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Atoi&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="float">Float&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// float 转 string
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">FormatFloat&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">prec&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">bitSize&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// string 转 float
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">ParseFloat&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">bitSize&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>fmt&lt;/code> - 数据格式&lt;/li>
&lt;li>&lt;code>prec&lt;/code> - 数据精度&lt;/li>
&lt;li>&lt;code>bitSize&lt;/code> - 浮点型大小，32 表示 float32，64 表示 float64&lt;/li>
&lt;/ul></description></item><item><title>Go 标准库 io</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-io/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-io/</guid><description/></item><item><title>Go 标准库 ioutil</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-ioutil/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-ioutil/</guid><description/></item><item><title>Go 第三方库 gjson</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-gjson/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-gjson/</guid><description>&lt;p>这是一个主要功能为从 Json 中提取值的包。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get -u github.com/tidwall/gjson
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取-json-值">获取 Json 值&lt;/h2>
&lt;h3 id="获取单个值">获取单个值&lt;/h3>
&lt;p>获取值最常用的是这两个方法，可以直接从 Json 数据中根据你提供的 &lt;code>path&lt;/code> 提取结果。&lt;/p>
&lt;p>&lt;code>GetBytes&lt;/code> 需要的是 &lt;code>[]byte&lt;/code> 数据。&lt;/p>
&lt;p>方法将返回一个类型为 &lt;code>Result&lt;/code> 的结果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span>, &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">Result&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetBytes&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">Result&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取多个值">获取多个值&lt;/h3>
&lt;p>如果要同时获取多个值，可以使用以下方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetMany&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#a6e22e">Result&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetManyBytes&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#a6e22e">Result&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两个方法可以传入多个 &lt;code>path&lt;/code> 路径，返回的是一个以 &lt;code>Result&lt;/code> 组成的切片。&lt;/p>
&lt;h3 id="解析">解析&lt;/h3>
&lt;p>将 Json 数据直接解析成 Result。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">Result&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ParseBytes&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#a6e22e">Result&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="路径语法">路径语法&lt;/h2>
&lt;p>&lt;code>Gjson&lt;/code> 的路径主要由 &lt;code>.&lt;/code> 分割的字段名构成，其中还包含一些特殊的符号。&lt;/p>
&lt;p>以下是一个示例 Json 数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: {&lt;span style="color:#f92672">&amp;#34;first&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Tom&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;last&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Anderson&amp;#34;&lt;/span>},
&lt;span style="color:#f92672">&amp;#34;age&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">37&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;children&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;Sara&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Alex&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Jack&amp;#34;&lt;/span>],
&lt;span style="color:#f92672">&amp;#34;fav.movie&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Deer Hunter&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;friends&amp;#34;&lt;/span>: [
{&lt;span style="color:#f92672">&amp;#34;first&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Dale&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;last&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Murphy&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">44&lt;/span>, &lt;span style="color:#f92672">&amp;#34;nets&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;ig&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;fb&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tw&amp;#34;&lt;/span>]},
{&lt;span style="color:#f92672">&amp;#34;first&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Roger&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;last&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Craig&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">68&lt;/span>, &lt;span style="color:#f92672">&amp;#34;nets&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;fb&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tw&amp;#34;&lt;/span>]},
{&lt;span style="color:#f92672">&amp;#34;first&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Jane&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;last&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Murphy&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">47&lt;/span>, &lt;span style="color:#f92672">&amp;#34;nets&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;ig&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tw&amp;#34;&lt;/span>]}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="基础语法">基础语法&lt;/h3>
&lt;p>以下是通过 &lt;code>.&lt;/code> 代表层级递进的语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">name&lt;/span>.&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Anderson&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">name&lt;/span>.&lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Tom&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#ae81ff">37&lt;/span>
&lt;span style="color:#a6e22e">children&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Sara&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Alex&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Jack&amp;#34;&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Json 数组可以使用数字序号选取具体值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">children&lt;/span>&lt;span style="color:#ae81ff">.0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Sara&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">children&lt;/span>&lt;span style="color:#ae81ff">.1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Alex&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">friends&lt;/span>&lt;span style="color:#ae81ff">.1&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;first&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Roger&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;last&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Craig&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">68&lt;/span>}
&lt;span style="color:#a6e22e">friends&lt;/span>&lt;span style="color:#ae81ff">.1&lt;/span>.&lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Roger&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：特殊符号 &lt;code>*&lt;/code>, &lt;code>?&lt;/code>, &lt;code>.&lt;/code> 等符号如果出现在 Json 字段名中，则路径需要使用 &lt;code>\&lt;/code> 转义。&lt;/strong>&lt;/p>
&lt;h3 id="通配符">通配符&lt;/h3>
&lt;p>路径中可以使用通配符 &lt;code>*&lt;/code> 和 &lt;code>?&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>&lt;code>*&lt;/code> 代表任意多个任意字符&lt;/li>
&lt;li>&lt;code>?&lt;/code> 代表一个任意字符&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">child&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">.2&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Jack&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>&lt;span style="color:#a6e22e">ildren&lt;/span>&lt;span style="color:#ae81ff">.0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Sara&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查询语法">查询语法&lt;/h3>
&lt;p>Json 数组还可以使用 &lt;code>#&lt;/code> 来进一步获取值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">friends&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#75715e">// friends 数组元素的数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">friends&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>.&lt;span style="color:#a6e22e">age&lt;/span> [&lt;span style="color:#ae81ff">44&lt;/span>,&lt;span style="color:#ae81ff">68&lt;/span>,&lt;span style="color:#ae81ff">47&lt;/span>] &lt;span style="color:#75715e">// 单独获取 friends 数组元素的 age 字段
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除此以外，&lt;code>Gjson&lt;/code> 还支持类似数据库的查询语法：&lt;/p>
&lt;ul>
&lt;li>&lt;code>#(...)&lt;/code> 代表根据括号里的条件查询单个结果&lt;/li>
&lt;li>&lt;code>#(...)#&lt;/code> 代表根据括号里的条件查询所有结果&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">friends&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>(&lt;span style="color:#a6e22e">last&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Murphy&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Dale&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">friends&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>(&lt;span style="color:#a6e22e">last&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Murphy&amp;#34;&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>.&lt;span style="color:#a6e22e">first&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Dale&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Jane&amp;#34;&lt;/span>]
&lt;span style="color:#a6e22e">friends&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>(&lt;span style="color:#a6e22e">age&lt;/span>&amp;gt;&lt;span style="color:#ae81ff">45&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>.&lt;span style="color:#a6e22e">last&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Craig&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Murphy&amp;#34;&lt;/span>]
&lt;span style="color:#a6e22e">friends&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>(&lt;span style="color:#a6e22e">first&lt;/span>&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#e6db74">&amp;#34;D*&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Murphy&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">friends&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>(&lt;span style="color:#a6e22e">first&lt;/span>!&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#e6db74">&amp;#34;D*&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Craig&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修饰符">修饰符&lt;/h3>
&lt;p>使用修饰符可以实现一些特定的效果，目前有三个内置的修饰符：&lt;/p>
&lt;ul>
&lt;li>&lt;code>@reverse&lt;/code> 反转一个数组内元素的顺序&lt;/li>
&lt;li>&lt;code>@ugly&lt;/code> 移除 Json 中所有的空格&lt;/li>
&lt;li>&lt;code>@pretty&lt;/code> 美化 Json 的显示&lt;/li>
&lt;/ul>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">children&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">reverse&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Jack&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Alex&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Sara&amp;#34;&lt;/span>]
&lt;span style="color:#a6e22e">children&lt;/span>.&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">reverse&lt;/span>&lt;span style="color:#ae81ff">.0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Jack&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>@pretty&lt;/code> 还可以使用一些参数，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">pretty&lt;/span>:{&lt;span style="color:#e6db74">&amp;#34;sortKeys&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其可以使用的参数有：&lt;code>sortKeys&lt;/code>, &lt;code>indent&lt;/code>, &lt;code>prefix&lt;/code>, and &lt;code>width&lt;/code>.&lt;/p>
&lt;h2 id="result">Result&lt;/h2>
&lt;p>&lt;code>Gjson&lt;/code> 获取的内容都是 &lt;code>Result&lt;/code> 类型的数据。&lt;/p>
&lt;h3 id="获取值数据">获取值数据&lt;/h3>
&lt;p>确定值的类型的获取方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Int&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Uint&lt;/span>() &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Float&lt;/span>() &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Bool&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Array&lt;/span>() []&lt;span style="color:#a6e22e">Result&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Map&lt;/span>() &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">Result&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>() &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有一个方法，返回不确定类型的值，需要进行类型断言&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>() &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>值的类型为以下其中之一&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">boolean&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">null&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#a6e22e">array&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> []&lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;span style="color:#a6e22e">object&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="功能方法">功能方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 用于链式调用获取值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">Result&lt;/span>
&lt;span style="color:#75715e">// 判断值是否存在
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Exists&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 判断值是否是一个 Json 对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">IsObject&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 用于遍历值，函数中返回 false 会停止遍历
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">ForEach&lt;/span>(&lt;span style="color:#a6e22e">iterator&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>) &lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">token&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>, &lt;span style="color:#a6e22e">caseSensitive&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="字段">字段&lt;/h3>
&lt;p>&lt;code>Result&lt;/code> 还含有一些有用的字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#75715e">// Reault 类型 Number, True, False, Null, JSON
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Str&lt;/span> &lt;span style="color:#75715e">// 获取字符串值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Num&lt;/span> &lt;span style="color:#75715e">// 获取数值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Raw&lt;/span> &lt;span style="color:#75715e">// 获取原始的 Json 文本
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span> &lt;span style="color:#75715e">// 在原始 Json 数据中的索引，0 表示 Gjson无法识别
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="检查-json">检查 Json&lt;/h2>
&lt;p>在使用 &lt;code>Get&lt;/code> 等方法获取值时，默认给予的 Json 数据为格式正确的，如果格式错误并不会报错，只会返回期望外的数据。&lt;/p>
&lt;p>所以，如果希望验证 Json 格式的正确性，可以在获取值前先行验证 Json 数据的格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">gjson&lt;/span>.&lt;span style="color:#a6e22e">Valid&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;invalid json&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gjson&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;name.last&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="bytes-数据">Bytes 数据&lt;/h2>
&lt;p>如果希望全程使用 &lt;code>[]byte&lt;/code> 处理数据，而避免将 &lt;code>result.Raw&lt;/code> 从字符串转换为 &lt;code>[]byte&lt;/code>，可以使用以下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> = &lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gjson&lt;/span>.&lt;span style="color:#a6e22e">GetBytes&lt;/span>(&lt;span style="color:#a6e22e">json&lt;/span>, &lt;span style="color:#a6e22e">path&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">raw&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">raw&lt;/span> = &lt;span style="color:#a6e22e">json&lt;/span>[&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>:&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Raw&lt;/span>)]
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">raw&lt;/span> = []byte(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Raw&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="jsoniter">Jsoniter&lt;/h2>
&lt;p>将 Go 中数据转换成 Json 的方法，&lt;code>Gjson&lt;/code> 中已经弃用了，建议使用滴滴开源的的 &lt;code>jsoniter&lt;/code>。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get github.com/json-iterator/go
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/json-iterator/go&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">jsoniter&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;span style="color:#a6e22e">jsoniter&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="兼容标准库">兼容标准库&lt;/h3>
&lt;p>&lt;code>jsoniter&lt;/code> 还提供了完全兼容标准库的使用方式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/json-iterator/go&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span> = &lt;span style="color:#a6e22e">jsoniter&lt;/span>.&lt;span style="color:#a6e22e">ConfigCompatibleWithStandardLibrary&lt;/span>
&lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 第三方库 grpc</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-grpc/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-grpc/</guid><description>&lt;p>&lt;code>gRPC&lt;/code> 是一个高性能、通用的开源 RPC 框架，由 Google 主要面向移动应用开发并基于 &lt;code>HTTP/2&lt;/code> 协议标准而设计，基于 &lt;code>ProtoBuf(Protocol Buffers)&lt;/code> 序列化协议开发，且支持众多开发语言。&lt;/p>
&lt;p>使用 gRPC， 可以在一个 &lt;code>.proto&lt;/code> 文件中定义服务，并使用任何支持它的语言去实现客户端和服务端。使用 gRPC定义一个服务，指定一个可以远程调用的带有参数和返回类型的的方法，客户端可以像调用本地方法一样直接调用服务端的方法。gRPC 解决了不同语言及环境间通信的复杂性。&lt;/p>
&lt;p>使用 &lt;code>protocol buffers&lt;/code> 还能获得其他好处：&lt;/p>
&lt;ul>
&lt;li>包括高效的序列号&lt;/li>
&lt;li>简单的 IDL&lt;/li>
&lt;li>容易进行接口更新。&lt;/li>
&lt;/ul>
&lt;p>使用 gRPC 能更容易编写跨语言的分布式代码。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h3 id="安装-grpc-包">安装 grpc 包&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ go get google.golang.org/grpc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-protocol-buffer-编译器">安装 protocol buffer 编译器&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>到此地址根据系统下载编译好的编译器：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener"
>https://github.com/protocolbuffers/protobuf/releases&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解压文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将编译器放到环境变量中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 protoc 的 Go 插件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ go get -u github.com/golang/protobuf/protoc-gen-go
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="用法">用法&lt;/h2>
&lt;p>&lt;code>gRPC&lt;/code> 开发流程：&lt;/p>
&lt;ol>
&lt;li>编写&lt;code>.proto&lt;/code>文件，生成指定语言源代码。&lt;/li>
&lt;li>编写服务端代码。&lt;/li>
&lt;li>编写客户端代码。&lt;/li>
&lt;/ol>
&lt;h3 id="proto-文件">.proto 文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">syntax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;proto3&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// 版本声明，使用Protocol Buffers v3版本
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> pb; &lt;span style="color:#75715e">// 包名
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">// 定义一个打招呼服务
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">service&lt;/span> Greeter {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#75715e">// SayHello 方法
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">rpc&lt;/span> SayHello (HelloRequest) &lt;span style="color:#66d9ef">returns&lt;/span> (HelloReply) {}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">// 包含人名的一个请求消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">HelloRequest&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">// 包含问候语的响应消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">HelloReply&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，生成 Go 语言源代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ protoc -I helloworld/ helloworld/pb/helloworld.proto --go_out&lt;span style="color:#f92672">=&lt;/span>plugins&lt;span style="color:#f92672">=&lt;/span>grpc:helloworld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>gRPC_demo/helloworld/pb&lt;/code> 目录下会生成 &lt;code>helloworld.pb.go&lt;/code> 文件。&lt;/p>
&lt;h3 id="server">server&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">pb&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gRPC_demo/helloworld/pb&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;golang.org/x/net/context&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;google.golang.org/grpc/reflection&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>) &lt;span style="color:#a6e22e">SayHello&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">HelloRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">HelloReply&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">HelloReply&lt;/span>{&lt;span style="color:#a6e22e">Message&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>}, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#75715e">// 监听本地的8972端口
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">lis&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Listen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;:8972&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to listen: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">NewServer&lt;/span>() &lt;span style="color:#75715e">// 创建gRPC服务器
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">RegisterGreeterServer&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>{}) &lt;span style="color:#75715e">// 在gRPC服务端注册服务
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">reflection&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>) &lt;span style="color:#75715e">//在给定的gRPC服务器上注册服务器反射服务
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Serve方法在lis上接受传入连接，为每个连接创建一个ServerTransport和server的goroutine。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 该goroutine读取gRPC请求，然后调用已注册的处理程序来响应它们。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Serve&lt;/span>(&lt;span style="color:#a6e22e">lis&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to serve: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="client">client&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">pb&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gRPC_demo/helloworld/pb&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#75715e">// 连接服务器
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">Dial&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8972&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">WithInsecure&lt;/span>())
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;faild to connect: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">NewGreeterClient&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;span style="color:#75715e">// 调用服务端的SayHello
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">SayHello&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">HelloRequest&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;q1mi&amp;#34;&lt;/span>})
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;could not greet: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Greeting: %s !\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="protocol-buffers">Protocol Buffers&lt;/h2>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">syntax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;proto3&amp;#34;&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> routeguide;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">service&lt;/span> SearchService {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">rpc&lt;/span> Search(SearchRequest) &lt;span style="color:#66d9ef">returns&lt;/span> (SearchResponse);&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">SearchRequest&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">required&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> query &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">optional&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> page_number &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">optional&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> result_per_page &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">SearchResponse&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>syntax = &amp;quot;proto3&amp;quot;;&lt;/code> 是我们使用的协议版本。&lt;/li>
&lt;li>&lt;code>message&lt;/code> 的每个字段都有个 index，范围在 1~15 之间时编码只需要一个字节，所以性能要求更高的字段尽量使用这个范围内的 index。此 index 后续不要修改。&lt;/li>
&lt;/ul>
&lt;h3 id="字段类型">字段类型&lt;/h3>
&lt;p>这是 &lt;code>grpc&lt;/code> 的类型与 Python、Go 类型的对应表。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">.proto Type&lt;/th>
&lt;th style="text-align:left">Notes&lt;/th>
&lt;th style="text-align:left">Python Type&lt;/th>
&lt;th style="text-align:left">Go Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">double&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">float&lt;/td>
&lt;td style="text-align:left">float64&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">float&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">float&lt;/td>
&lt;td style="text-align:left">float32&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">int32&lt;/td>
&lt;td style="text-align:left">Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.&lt;/td>
&lt;td style="text-align:left">int&lt;/td>
&lt;td style="text-align:left">int32&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">int64&lt;/td>
&lt;td style="text-align:left">Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.&lt;/td>
&lt;td style="text-align:left">int/long&lt;/td>
&lt;td style="text-align:left">int64&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">uint32&lt;/td>
&lt;td style="text-align:left">Uses variable-length encoding.&lt;/td>
&lt;td style="text-align:left">int/long&lt;/td>
&lt;td style="text-align:left">uint32&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">uint64&lt;/td>
&lt;td style="text-align:left">Uses variable-length encoding.&lt;/td>
&lt;td style="text-align:left">int/long&lt;/td>
&lt;td style="text-align:left">uint64&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">sint32&lt;/td>
&lt;td style="text-align:left">Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.&lt;/td>
&lt;td style="text-align:left">int&lt;/td>
&lt;td style="text-align:left">int32&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">sint64&lt;/td>
&lt;td style="text-align:left">Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.&lt;/td>
&lt;td style="text-align:left">int/long&lt;/td>
&lt;td style="text-align:left">int64&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">fixed32&lt;/td>
&lt;td style="text-align:left">Always four bytes. More efficient than uint32 if values are often greater than 228.&lt;/td>
&lt;td style="text-align:left">int/long&lt;/td>
&lt;td style="text-align:left">uint32&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">fixed64&lt;/td>
&lt;td style="text-align:left">Always eight bytes. More efficient than uint64 if values are often greater than 256.&lt;/td>
&lt;td style="text-align:left">int/long&lt;/td>
&lt;td style="text-align:left">uint64&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">sfixed32&lt;/td>
&lt;td style="text-align:left">Always four bytes.&lt;/td>
&lt;td style="text-align:left">int&lt;/td>
&lt;td style="text-align:left">int32&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">sfixed64&lt;/td>
&lt;td style="text-align:left">Always eight bytes.&lt;/td>
&lt;td style="text-align:left">int/long&lt;/td>
&lt;td style="text-align:left">int64&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">bool&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">bool&lt;/td>
&lt;td style="text-align:left">bool&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">string&lt;/td>
&lt;td style="text-align:left">A string must always contain UTF-8 encoded or 7-bit ASCII text, and cannot be longer than 232.&lt;/td>
&lt;td style="text-align:left">str/unicode&lt;/td>
&lt;td style="text-align:left">string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">bytes&lt;/td>
&lt;td style="text-align:left">May contain any arbitrary sequence of bytes no longer than 232.&lt;/td>
&lt;td style="text-align:left">str&lt;/td>
&lt;td style="text-align:left">[]byte&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="字段规则">字段规则&lt;/h3>
&lt;p>在字段类型前可以定义字段的规则：&lt;/p>
&lt;ul>
&lt;li>&lt;code>repeated&lt;/code>: 此字段可以出现多次，等同于一个数组&lt;/li>
&lt;/ul>
&lt;h3 id="reserved">reserved&lt;/h3>
&lt;p>保留字段，用于声明某些 &lt;code>index&lt;/code> 不能使用，也可以声明字段名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> reserved &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">to&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> reserved &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="enum">enum&lt;/h3>
&lt;p>枚举类型&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">SearchRequest&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">required&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> query &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">optional&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> page_number &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">optional&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> result_per_page &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> [&lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>];&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Corpus {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> UNIVERSAL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> WEB &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> IMAGES &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> LOCAL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> NEWS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> PRODUCTS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> VIDEO &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">optional&lt;/span> Corpus corpus &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> [&lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#f92672">=&lt;/span> UNIVERSAL];&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="import">import&lt;/h3>
&lt;p>Protocol Buffers 支持从多个文件导入已经写好的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;myproject/other_protos.proto&amp;#34;&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="嵌套-message">嵌套 Message&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">SearchResponse&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">required&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">optional&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> title &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">repeated&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> snippets &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">repeated&lt;/span> Result result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要在父 Message 之外复用这个子 Message：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">SomeOtherMessage&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">optional&lt;/span> SearchResponse.Result result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="package">Package&lt;/h3>
&lt;p>用于声明当前文件的包名，这样在其他文件导入此文件时，可以使用包名来索引到具体 message：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="color:#f92672">package&lt;/span> foo&lt;span style="color:#f92672">.&lt;/span>bar;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">Open&lt;/span> { &lt;span style="color:#f92672">...&lt;/span> }&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入文件:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="color:#66d9ef">message&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> {&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">required&lt;/span> foo.bar.Open open &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成-go-代码">生成 Go 代码&lt;/h3>
&lt;p>生成使用 grpc 的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">protoc -I&lt;span style="color:#f92672">=&lt;/span>$SRC_DIR --go_out&lt;span style="color:#f92672">=&lt;/span>plugins&lt;span style="color:#f92672">=&lt;/span>grpc:$DST_DIR $SRC_DIR/addressbook.proto
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 第三方库 viper</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-viper/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-viper/</guid><description>&lt;p>此包用于读取各类配置文件。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get github.com/spf13/viper
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Viper&lt;/code> 支持的配置文件后缀名如下：&lt;/p>
&lt;p>&lt;code>json&lt;/code>, &lt;code>toml&lt;/code>, &lt;code>yaml&lt;/code>, &lt;code>yml&lt;/code>, &lt;code>properties&lt;/code>, &lt;code>props&lt;/code>, &lt;code>prop&lt;/code>, &lt;code>hcl&lt;/code>, &lt;code>dotenv&lt;/code>, &lt;code>env&lt;/code>, &lt;code>ini&lt;/code>&lt;/p>
&lt;h2 id="初始化">初始化&lt;/h2>
&lt;h3 id="读取配置">读取配置&lt;/h3>
&lt;p>设置读取配置的文件，此方法需要显式的指定配置文件的路径、名称和扩展名，使用此方法设定后，&lt;code>Viper&lt;/code> 将不会再去其他路径寻找配置文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SetConfigFile&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置读取配置的文件名和路径，如果没有设置 &lt;code>ConfigFile&lt;/code>，那么 &lt;code>Viper&lt;/code> 会去设置的路径中，寻找所有类型被支持的同名配置文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddConfigPath&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#75715e">// 添加路径，可以添加多个
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SetConfigName&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置好路径过后就可以读取配置信息了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ReadInConfig&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="设置默认值">设置默认值&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">SetDefault&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ContentDir&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">SetDefault&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;LayoutDir&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;layouts&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">SetDefault&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Taxonomies&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;tag&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tags&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;category&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;categories&amp;#34;&lt;/span>})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="监听配置变化">监听配置变化&lt;/h3>
&lt;p>调用此函数后，&lt;code>Viper&lt;/code> 会自动监听配置文件的变化，如果配置文件有更改，&lt;code>Viper&lt;/code> 会更新自己的配置信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WatchConfig&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果希望在配置文件更新时，进行额外的处理，可以这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">OnConfigChange&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">fsnotify&lt;/span>.&lt;span style="color:#a6e22e">Event&lt;/span>) {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;配置发生变更：&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="读取值">读取值&lt;/h2>
&lt;h3 id="检查值是否设置">检查值是否设置&lt;/h3>
&lt;p>直接使用 &lt;code>Viper&lt;/code> 去获取值时，如果这个 &lt;code>key&lt;/code> 在配置文件中没有设置，那么会返回零值。所以如果需要判断值是否设置了这个 &lt;code>key&lt;/code>，使用以下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 判断是否有这个设置，包括文件和代码中设置的配置
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">IsSet&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 判断是否在配置文件中有这个配置
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">InConfig&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取值">获取值&lt;/h3>
&lt;p>获取单个配置的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetBool&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetDuration&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetFloat64&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetInt&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetInt32&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int32&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetInt64&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetIntSlice&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetSizeInBytes&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">uint&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetString&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetStringMap&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetStringMapString&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetStringMapStringSlice&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>][]&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetStringSlice&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetTime&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetUint&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">uint&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetUint32&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">uint32&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetUint64&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调试">调试&lt;/h3>
&lt;p>此方法可以打印注册的所有配置信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">viper&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="写入配置文件">写入配置文件&lt;/h2>
&lt;h3 id="更改设置">更改设置&lt;/h3>
&lt;p>在使用中可以更改既定的配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="写入配置文件-1">写入配置文件&lt;/h3>
&lt;p>更改配置之后，可以将当前配置写入配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WriteConfig&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WriteConfigAs&lt;/span>(&lt;span style="color:#a6e22e">filename&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SafeWriteConfig&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SafeWriteConfigAs&lt;/span>(&lt;span style="color:#a6e22e">filename&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 第三方库 zap</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-zap/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-zap/</guid><description>&lt;p>此包用于结构化记录日志。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get -u go.uber.org/zap
&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;go.uber.org/zap&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>性能高，与 Zerolog 同一水平。&lt;/li>
&lt;/ul>
&lt;h2 id="创建-logger">创建 Logger&lt;/h2>
&lt;h3 id="new">New&lt;/h3>
&lt;p>创建 &lt;code>Logger&lt;/code> 最基础的方式是使用 &lt;code>New&lt;/code> 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">core&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">Core&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Option&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此方法需要传入 &lt;code>zapcore&lt;/code> 和 &lt;code>option&lt;/code> 来进行构造。通常需要深度定制时使用此方法。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">EncoderConfig&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">EncoderConfig&lt;/span>{
&lt;span style="color:#a6e22e">MessageKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">LevelKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;level&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">TimeKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">NameKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;zap&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">CallerKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;caller&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">StacktraceKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;stacktrace&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">LineEnding&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">DefaultLineEnding&lt;/span>,
&lt;span style="color:#a6e22e">EncodeLevel&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">LowercaseLevelEncoder&lt;/span>,
&lt;span style="color:#a6e22e">EncodeTime&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">ISO8601TimeEncoder&lt;/span>,
&lt;span style="color:#a6e22e">EncodeDuration&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">StringDurationEncoder&lt;/span>,
&lt;span style="color:#a6e22e">EncodeCaller&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">ShortCallerEncoder&lt;/span>,
&lt;span style="color:#a6e22e">EncodeName&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">FullNameEncoder&lt;/span>,
}
&lt;span style="color:#a6e22e">core&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">NewCore&lt;/span>(
&lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">NewJSONEncoder&lt;/span>(&lt;span style="color:#a6e22e">EncoderConfig&lt;/span>),
&lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdout&lt;/span>),
&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">InfoLevel&lt;/span>,
)
&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(
&lt;span style="color:#a6e22e">core&lt;/span>,
&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">AddCaller&lt;/span>(),
&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">AddStacktrace&lt;/span>(&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">ErrorLevel&lt;/span>),
)
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">sync&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="option">Option&lt;/h3>
&lt;p>可以用于对 Logger 时进行一些配置，Zap 提供的 Option 如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddCaller&lt;/span>() &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 添加调用信息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddCallerSkip&lt;/span>(&lt;span style="color:#a6e22e">skip&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 报告调用信息时，跳过指定调用层数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WithCaller&lt;/span>(&lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 是否添加调用信息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddStacktrace&lt;/span>(&lt;span style="color:#a6e22e">lvl&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">LevelEnabler&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 异常时堆栈追踪
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Development&lt;/span>() &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 开发模式
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ErrorOutput&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">WriteSyncer&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">//异常输出位置
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Fields&lt;/span>(&lt;span style="color:#a6e22e">fs&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 添加字段
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Hooks&lt;/span>(&lt;span style="color:#a6e22e">hooks&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">Entry&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 添加回调
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">IncreaseLevel&lt;/span>(&lt;span style="color:#a6e22e">lvl&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">LevelEnabler&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 仅可以提高记录等级，不能降低
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WrapCore&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">Core&lt;/span>) &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">Core&lt;/span>) &lt;span style="color:#a6e22e">Option&lt;/span> &lt;span style="color:#75715e">// 用于包裹或替换 Core
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="内置-logger">内置 Logger&lt;/h3>
&lt;p>由于 &lt;code>New&lt;/code> 方法创建 Logger 过于复杂，&lt;code>zap&lt;/code> 包中提供了几个内建的 Logger。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>NewDevelopment&lt;/code>&lt;/p>
&lt;p>此 Logger 以人性化的格式记录 Debug 级别以上的日志和标准的异常信息。&lt;/p>
&lt;p>Warn 和以上级别的日志会自动包含堆栈追踪。&lt;/p>
&lt;p>此方法等价于 &lt;code>NewDevelopmentConfig().Build(...Option)&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewDevelopment&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Option&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>NewProduction&lt;/code>&lt;/p>
&lt;p>此 Logger 以 Json 格式记录 Info 级别以上的日志和标准的异常信息。&lt;/p>
&lt;p>Error 和以上级别的日志会自动包含堆栈追踪。&lt;/p>
&lt;p>此方法等价于 &lt;code>NewProductionConfig().Build(...Option)&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewProduction&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Option&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>NewExample&lt;/code>&lt;/p>
&lt;p>此 Logger 是一个常用于测试用例的 Logger。&lt;/p>
&lt;p>它以 Json 格式记录 Debug 级别以上的日志和标准的异常信息。但是删去了时间戳和调用函数，以简短日志输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewExample&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Option&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="使用--config-创建-logger">使用 Config 创建 Logger&lt;/h2>
&lt;p>除了使用 New 自定义创建外，使用 Config 来创建 Logger 会更加方便。&lt;/p>
&lt;h3 id="config">Config&lt;/h3>
&lt;p>Config 包含了绝大部分常见的设置。其中部分设置需要使用 &lt;code>zapcore.EncoderConfig&lt;/code> 来进行配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#75715e">// 输出的日志级别，使用 Config.Level.SetLevel 可以原子性的更改输出的日志级别
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Level&lt;/span> &lt;span style="color:#a6e22e">AtomicLevel&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;level&amp;#34; yaml:&amp;#34;level&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 是否开启开发模式，开启后会改变 DPanicLevel 的行为，栈追踪也会更自由
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Development&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;development&amp;#34; yaml:&amp;#34;development&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 是否关闭调用信息，默认状况下，所有的日志都会带有文件名和文件行数
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">DisableCaller&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;disableCaller&amp;#34; yaml:&amp;#34;disableCaller&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 禁用自动堆栈追踪，默认情况下，堆栈追踪在开发模式抓取 WarnLevel 以上级别的日志，
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 在生产模式抓取 ErrorLevel 以上级别的日志
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">DisableStacktrace&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;disableStacktrace&amp;#34; yaml:&amp;#34;disableStacktrace&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 采样策略，作用是限制日志在每秒钟内的输出数量, 以防止CPU和IO被过度占用。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 如果为 nil 则禁用采样
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Sampling&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SamplingConfig&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;sampling&amp;#34; yaml:&amp;#34;sampling&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// Encoding 设置日志的编码格式，可选的有 json 和 console，也可以使用 RegisterEncoder
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 来注册第三方编码方式
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Encoding&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;encoding&amp;#34; yaml:&amp;#34;encoding&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 注册的 Encoder 的设置，详见 zapcore.EncoderConfig
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">EncoderConfig&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">EncoderConfig&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;encoderConfig&amp;#34; yaml:&amp;#34;encoderConfig&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 日志输出的位置，如果是控制台，则是 stdout，或者是日志文件路径
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 详见 Open
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">OutputPaths&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;outputPaths&amp;#34; yaml:&amp;#34;outputPaths&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">ErrorOutputPaths&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;errorOutputPaths&amp;#34; yaml:&amp;#34;errorOutputPaths&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 添加到根 logger 的字段
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">InitialFields&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{} &lt;span style="color:#e6db74">`json:&amp;#34;initialFields&amp;#34; yaml:&amp;#34;initialFields&amp;#34;`&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在创建 Config 之后，使用 &lt;code>Build()&lt;/code> 方法，即可根据 Config 创建相应的 Logger。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;span style="color:#a6e22e">Level&lt;/span>: &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">NewAtomicLevelAt&lt;/span>(&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">DebugLevel&lt;/span>),
&lt;span style="color:#a6e22e">Development&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;span style="color:#a6e22e">DisableCaller&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;span style="color:#a6e22e">DisableStacktrace&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;span style="color:#a6e22e">Sampling&lt;/span>: &lt;span style="color:#66d9ef">nil&lt;/span>,
&lt;span style="color:#a6e22e">Encoding&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;json&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">EncoderConfig&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">EncoderConfig&lt;/span>{
&lt;span style="color:#a6e22e">MessageKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;msg&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">LevelKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;level&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">TimeKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">NameKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;zap&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">CallerKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;caller&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">StacktraceKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;stacktrace&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">LineEnding&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">DefaultLineEnding&lt;/span>,
&lt;span style="color:#a6e22e">EncodeLevel&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">LowercaseLevelEncoder&lt;/span>,
&lt;span style="color:#a6e22e">EncodeTime&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">ISO8601TimeEncoder&lt;/span>,
&lt;span style="color:#a6e22e">EncodeDuration&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">StringDurationEncoder&lt;/span>,
&lt;span style="color:#a6e22e">EncodeCaller&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">ShortCallerEncoder&lt;/span>,
&lt;span style="color:#a6e22e">EncodeName&lt;/span>: &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">FullNameEncoder&lt;/span>,
},
&lt;span style="color:#a6e22e">OutputPaths&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;stdout&amp;#34;&lt;/span>},
&lt;span style="color:#a6e22e">ErrorOutputPaths&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;stderr&amp;#34;&lt;/span>},
&lt;span style="color:#a6e22e">InitialFields&lt;/span>: &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#e6db74">&amp;#34;app&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;zapdex&amp;#34;&lt;/span>},
}
&lt;span style="color:#a6e22e">logger&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">Build&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
panic(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Sync&lt;/span>()
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;logger construction succeeded&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="atomiclevel">AtomicLevel&lt;/h3>
&lt;p>这是 &lt;code>Zap&lt;/code> 中用来表示日志级别的对象，可以原子性的修改。&lt;/p>
&lt;p>创建 AtomicLevel：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewAtomicLevel&lt;/span>() &lt;span style="color:#a6e22e">AtomicLevel&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewAtomicLevelAt&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">Level&lt;/span>) &lt;span style="color:#a6e22e">AtomicLevel&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更改 AtomicLevel：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">lvl&lt;/span> &lt;span style="color:#a6e22e">AtomicLevel&lt;/span>) &lt;span style="color:#a6e22e">SetLevel&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">Level&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建或更改特定的日志级别需要 &lt;code>zapcore.Level&lt;/code>，以下是其定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">DebugLevel&lt;/span> &lt;span style="color:#a6e22e">Level&lt;/span> = &lt;span style="color:#66d9ef">iota&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">// production 环境会被禁用
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">InfoLevel&lt;/span> &lt;span style="color:#75715e">// 最常见的级别
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">WarnLevel&lt;/span>
&lt;span style="color:#a6e22e">ErrorLevel&lt;/span>
&lt;span style="color:#a6e22e">DPanicLevel&lt;/span> &lt;span style="color:#75715e">// DpanicLevel 在 development 环境中会记录日志并 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">PanicLevel&lt;/span> &lt;span style="color:#75715e">// PanicLevel 会记录日志并 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">FatalLevel&lt;/span> &lt;span style="color:#75715e">// PanicLevel 会记录日志并调用 os.Exit(1)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="logger">Logger&lt;/h2>
&lt;h3 id="输出日志">输出日志&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">DPanic&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">Panic&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="全局-logger">全局 Logger&lt;/h3>
&lt;p>使用 &lt;code>ReplaceGlobals&lt;/code> 方法可以将 logger 设置为全局的 logger：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ReplaceGlobals&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#66d9ef">func&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置为全局 logger 后，使用 &lt;code>L&lt;/code> 方法就可以在任何位置获取这个全局的 logger：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">L&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sugaredlogger">SugaredLogger&lt;/h3>
&lt;p>logger 在输出日志时，字段需要指定类型，较为麻烦，使用 &lt;code>SugaredLogger&lt;/code> 则可以在输出日志时较为方便，但性能较低。获取 &lt;code>SugaredLogger&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">log&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#a6e22e">Sugar&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SugaredLogger&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="zapcore">ZapCore&lt;/h2>
&lt;p>&lt;code>ZapCore&lt;/code> 是 Zap 中的核心部分，在需要细致且底层的配置时使用。&lt;/p>
&lt;p>导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;go.uber.org/zap/zapcore&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="core">Core&lt;/h3>
&lt;p>创建 Core 主要使用 &lt;code>NewCore&lt;/code> 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewCore&lt;/span>(&lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">Encoder&lt;/span>, &lt;span style="color:#a6e22e">ws&lt;/span> &lt;span style="color:#a6e22e">WriteSyncer&lt;/span>, &lt;span style="color:#a6e22e">enab&lt;/span> &lt;span style="color:#a6e22e">LevelEnabler&lt;/span>) &lt;span style="color:#a6e22e">Core&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>enc Encoder&lt;/code> - 使用 &lt;code>EncoderConfig&lt;/code> 创建的 Encoder，Zap 提供了最常见的两种：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewConsoleEncoder&lt;/span>(&lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#a6e22e">EncoderConfig&lt;/span>) &lt;span style="color:#a6e22e">Encoder&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewJSONEncoder&lt;/span>(&lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#a6e22e">EncoderConfig&lt;/span>) &lt;span style="color:#a6e22e">Encoder&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>ws WriteSyncer&lt;/code> - 表示日志写入位置的接口，可以使用 &lt;code>AddSync&lt;/code> 创建：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddSync&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>) &lt;span style="color:#a6e22e">WriteSyncer&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：&lt;code>*os.File&lt;/code>、&lt;code>os.Stderr&lt;/code>、&lt;code>os.Stdout&lt;/code> 已经实现了此接口。&lt;/p>
&lt;p>在并发情况下，需要给 WriteSyncer 加锁，可以使用 &lt;code>Lock&lt;/code> 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Lock&lt;/span>(&lt;span style="color:#a6e22e">ws&lt;/span> &lt;span style="color:#a6e22e">WriteSyncer&lt;/span>) &lt;span style="color:#a6e22e">WriteSyncer&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>enab LevelEnabler&lt;/code> - 用于决定记录什么级别的日志，[AtomicLevel](#2. AtomicLevel) 已实现这一接口。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="创建多个-core">创建多个 Core&lt;/h4>
&lt;p>有些时候我们需要同时将日志输出到多个位置，这样的情况下则需要我们创建多个 &lt;code>Core&lt;/code>，并合并成一个：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewTee&lt;/span>(&lt;span style="color:#a6e22e">cores&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Core&lt;/span>) &lt;span style="color:#a6e22e">Core&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="encoderconfig">EncoderConfig&lt;/h3>
&lt;p>&lt;code>zapcore.EncoderConfig&lt;/code> 用于配置 &lt;code>zap.Config&lt;/code> 中的 Encoder。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">EncoderConfig&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#75715e">// 用于设置默认字段的字段名，如果值为空，则记录日志时忽略此字段
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">MessageKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;messageKey&amp;#34; yaml:&amp;#34;messageKey&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">LevelKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;levelKey&amp;#34; yaml:&amp;#34;levelKey&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">TimeKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;timeKey&amp;#34; yaml:&amp;#34;timeKey&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">NameKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;nameKey&amp;#34; yaml:&amp;#34;nameKey&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">CallerKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;callerKey&amp;#34; yaml:&amp;#34;callerKey&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">StacktraceKey&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;stacktraceKey&amp;#34; yaml:&amp;#34;stacktraceKey&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 每行日志的分隔符
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">LineEnding&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;lineEnding&amp;#34; yaml:&amp;#34;lineEnding&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 日志级别的编码
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">EncodeLevel&lt;/span> &lt;span style="color:#a6e22e">LevelEncoder&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;levelEncoder&amp;#34; yaml:&amp;#34;levelEncoder&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 时间格式的编码
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">EncodeTime&lt;/span> &lt;span style="color:#a6e22e">TimeEncoder&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;timeEncoder&amp;#34; yaml:&amp;#34;timeEncoder&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">EncodeDuration&lt;/span> &lt;span style="color:#a6e22e">DurationEncoder&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;durationEncoder&amp;#34; yaml:&amp;#34;durationEncoder&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 调用信息的编码
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">EncodeCaller&lt;/span> &lt;span style="color:#a6e22e">CallerEncoder&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;callerEncoder&amp;#34; yaml:&amp;#34;callerEncoder&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// 与上面几种编码器不同，此编码器是可选的，默认会使用 FullNameEncoder
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">EncodeName&lt;/span> &lt;span style="color:#a6e22e">NameEncoder&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;nameEncoder&amp;#34; yaml:&amp;#34;nameEncoder&amp;#34;`&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="内置-encoder">内置 Encoder&lt;/h4>
&lt;p>Zap 中提供了几个编码器类型，可以用于自定义编码。分别是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">LevelEncoder&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">Level&lt;/span>, &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">CallerEncoder&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">EntryCaller&lt;/span>, &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">DurationEncoder&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">NameEncoder&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">TimeEncoder&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Zap 也提供了一部分常用的编码器实现，可以根据需要使用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>LevelEncoder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CapitalColorLevelEncoder&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">Level&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 大写彩色
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CapitalLevelEncoder&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">Level&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 大写
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LowercaseColorLevelEncoder&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">Level&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 小写彩色
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LowercaseLevelEncoder&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">Level&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 小写
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>TimeEncoder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">EpochTimeEncoder&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 时间戳
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">EpochMillisTimeEncoder&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 毫秒级时间戳
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">EpochNanosTimeEncoder&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 纳秒级时间戳
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">RFC3339TimeEncoder&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 秒级标准格式
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ISO8601TimeEncoder&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 毫秒级标准格式
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">RFC3339NanoTimeEncoder&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 纳秒级标准格式
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>CallerEncoder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">FullCallerEncoder&lt;/span>(&lt;span style="color:#a6e22e">caller&lt;/span> &lt;span style="color:#a6e22e">EntryCaller&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 长路径
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ShortCallerEncoder&lt;/span>(&lt;span style="color:#a6e22e">caller&lt;/span> &lt;span style="color:#a6e22e">EntryCaller&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>) &lt;span style="color:#75715e">// 短路径
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>NameEncoder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">FullNameEncoder&lt;/span>(&lt;span style="color:#a6e22e">loggerName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>DurationEncoder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MillisDurationEncoder&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NanosDurationEncoder&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SecondsDurationEncoder&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StringDurationEncoder&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#a6e22e">PrimitiveArrayEncoder&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="日志文件切割归档">日志文件切割归档&lt;/h2>
&lt;p>使用第三方库 &lt;code>Lumberjack&lt;/code> 实现。安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ go get -u github.com/natefinch/lumberjack
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接入-zap">接入 Zap&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">logWriter&lt;/span>() &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">WriteSyncer&lt;/span> {
&lt;span style="color:#a6e22e">lumberJackLogger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">lumberjack&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>{
&lt;span style="color:#a6e22e">Filename&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;./test.log&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">MaxSize&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;span style="color:#a6e22e">MaxBackups&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;span style="color:#a6e22e">MaxAge&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>,
&lt;span style="color:#a6e22e">Compress&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">AddSync&lt;/span>(&lt;span style="color:#a6e22e">lumberJackLogger&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lumberjack 参数：&lt;/p>
&lt;ul>
&lt;li>Filename: 日志文件的位置&lt;/li>
&lt;li>MaxSize：在进行切割之前，日志文件的最大大小（以MB为单位）&lt;/li>
&lt;li>MaxBackups：保留旧文件的最大个数&lt;/li>
&lt;li>MaxAges：保留旧文件的最大天数&lt;/li>
&lt;li>Compress：是否压缩/归档旧文件&lt;/li>
&lt;/ul></description></item><item><title>Go GMP 调度器</title><link>https://wnanbei.github.io/post/go-gmp-%E8%B0%83%E5%BA%A6%E5%99%A8/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gmp-%E8%B0%83%E5%BA%A6%E5%99%A8/</guid><description>&lt;p>GMP Scheduler 是 Runtime 中几乎最重要的组件，它的作用是：&lt;/p>
&lt;blockquote>
&lt;p>For scheduling goroutines onto kernel threads.&lt;/p>
&lt;/blockquote>
&lt;p>GMP Scheduler 的核心思想是：&lt;/p>
&lt;ol>
&lt;li>重用线程。&lt;/li>
&lt;li>限制同时运行（不包含阻塞）的线程数为 N，N 为 CPU 逻辑核心数。&lt;/li>
&lt;/ol>
&lt;p>Go scheduler 的职责就是将所有处于 runnable 的 Goroutines 均匀分布到在 P 上运行的 M，利用多核并行，实现更强大的并发。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/gmp.png" >
&lt;img src="https://wnanbei.github.io/images/go/gmp.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="gmp-数据结构">GMP 数据结构&lt;/h2>
&lt;h3 id="g">G&lt;/h3>
&lt;p>&lt;code>Goroutine&lt;/code> 用户级别的协程，我们在程序里用 &lt;code>go&lt;/code> 关键字创建的协程。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>状态&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>_Gidle&lt;/td>
&lt;td>空闲中，刚刚被分配并且还没有被初始化，值为 0，为创建 Goroutine 后的默认值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Grunnable&lt;/td>
&lt;td>待运行，G 在运行队列中, 等待 M 取出并运行，没有栈的所有权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Grunning&lt;/td>
&lt;td>运行中，正在执行代码的 Goroutine，拥有栈的所有权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Gsyscall&lt;/td>
&lt;td>系统调用中，正在执行系统调用，拥有栈的所有权，与 P 脱离，但是与某个 M 绑定，会在调用结束后被分配到运行队列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Gwaiting&lt;/td>
&lt;td>等待中，此时为被阻塞的 G，阻塞在某个 channel 的发送或者接收队列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Gdead&lt;/td>
&lt;td>已中止，当前 G 未被使用，没有执行代码，可能有分配的栈，分布在空闲列表 gFree，可能是一个刚初始化的 G，也可能是执行了 goexit 退出的 G&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Gcopystac&lt;/td>
&lt;td>栈复制中，栈正在被拷贝，没有执行代码，不在运行队列上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Gscan&lt;/td>
&lt;td>GC 正在扫描栈空间，没有执行代码，可以与其他状态同时存在&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="m">M&lt;/h3>
&lt;p>&lt;code>Machine&lt;/code> 指 Go 语言对一个关联的内核线程的封装。&lt;/p>
&lt;p>M 并没有像 G 和 P 一样的状态标记, 但可以认为一个 M 有以下的状态&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>状态&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>spinning 自旋中&lt;/td>
&lt;td>M 正在从运行队列获取 G, 这时候 M 拥有一个 P&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>执行 Go 代码中&lt;/td>
&lt;td>M 正在执行 Go 代码, 这时候 M 拥有一个P&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>执行原生代码中&lt;/td>
&lt;td>M 正在执行原生代码或者阻塞的 syscall, 这时 M 不拥有 P&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>休眠中&lt;/td>
&lt;td>M 发现无待运行的 G 时会进入休眠, 并添加到空闲 M 链表中, 这时 M 不拥有 P&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="p">P&lt;/h3>
&lt;p>&lt;code>Processor&lt;/code> 包含了 Goroutine 运行的资源，M 必须和一个 P 关联才能运行 G。&lt;/p>
&lt;p>P 还包含自己的本地队列 &lt;code>local runqueue&lt;/code> 来保存 G，这样可以避免竞争锁。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>状态&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>_Pidle&lt;/td>
&lt;td>空闲中，当 M 发现无 runnable 的 G 时会进入休眠, 这时 M 拥有的 P 会变为空闲并放到空闲 P 链表中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Prunning&lt;/td>
&lt;td>运行中，当 M 拥有了一个 P 后, 这个 P 的状态就会变为运行中, M 会使用这个 P 中的资源运行 G&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Psyscall&lt;/td>
&lt;td>系统调用中，当 Go 调用原生代码, 原生代码又反过来调用 Go 代码时, 使用的 P 会变为此状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Pgcstop&lt;/td>
&lt;td>GC 停止中，当 GC 停止了整个世界(STW)时, P 会变为此状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_Pdead&lt;/td>
&lt;td>已中止，当 P 的数量在运行时改变, 且数量减少时多余的 P 会变为此状态&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="p-和-m-的数量">P 和 M 的数量&lt;/h3>
&lt;p>P 的数量：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>由启动时环境变量 &lt;code>$GOMAXPROCS&lt;/code> 或者是由 &lt;code>runtime&lt;/code> 的方法 &lt;code>GOMAXPROCS()&lt;/code> 决定。&lt;/p>
&lt;p>这意味着在程序执行的任意时刻都只有 &lt;code>$GOMAXPROCS&lt;/code> 个goroutine在同时运行。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>M 的数量：&lt;/p>
&lt;ol>
&lt;li>GO 程序启动时，会设置 M 的最大数量，默认 10000。但是内核很难支持这么多的线程数，所以这个限制可以忽略。&lt;/li>
&lt;li>&lt;code>runtime/debug&lt;/code> 中的 &lt;code>SetMaxThreads&lt;/code> 函数，设置 M 的最大数量。&lt;/li>
&lt;li>一个 M 阻塞了，会创建新的 M。&lt;/li>
&lt;/ol>
&lt;p>M 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。&lt;/p>
&lt;h3 id="p-和-m-何时被创建">P 和 M 何时被创建&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>P：在确定了 P 的最大数量 n 后，运行时系统会根据这个数量创建 n 个 P。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>M：没有足够的 M 来关联 P 并运行其中的可运行的 G。&lt;/p>
&lt;p>比如所有的 M 此时都阻塞住了，而 P 中还有很多就绪任务，就会去寻找空闲的 M，而没有空闲的，就会去创建新的 M。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="grq">GRQ&lt;/h3>
&lt;p>&lt;code>Global Runnable Queue&lt;/code> 全局队列。存放等待运行的 G。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>此队列优先度较低。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GRQ 入队和出队需要使用线程锁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>全局运行队列的数据结构是链表, 由两个指针 &lt;code>head&lt;/code>, &lt;code>tail&lt;/code> 组成。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="lrq">LRQ&lt;/h3>
&lt;p>&lt;code>Local Runnable Queue&lt;/code> P 的本地队列。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>同 GRQ 类似，存放的也是等待运行的 G，存的数量有限，不超过 256 个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新建 G 时，G 优先加入到 P 的 LRQ，如果队列满了，则会把 LRQ 中随机一半的 G 移动到 GRQ。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LRQ 入队和出队不需要使用线程锁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LRQ 的数据结构是环形队列, 由一个 256 长度的数组和两个序号 &lt;code>head&lt;/code>, &lt;code>tail&lt;/code> 组成。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="概念">概念&lt;/h2>
&lt;h3 id="goroutine-和-thread-区别">Goroutine 和 Thread 区别&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>内存占用&lt;/p>
&lt;ul>
&lt;li>创建一个 Goroutine 的栈内存消耗为 2 KB，如果栈空间不够用，会自动进行扩容。&lt;/li>
&lt;li>创建一个 Thread 需要消耗 1 MB 栈内存，还需要一个 &lt;code>a guard page&lt;/code> 的区域用于和其他 Thread 的栈空间进行隔离。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>创建和销毁&lt;/p>
&lt;ul>
&lt;li>Goroutine 由 &lt;code>Go runtime&lt;/code> 负责管理，创建和销毁的消耗非常小，是用户级。&lt;/li>
&lt;li>Thread 由于是内核级的，创建和销毀都会有巨大的消耗，通常解决的办法是线程池。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>切换&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Goroutines 切换只需保存三个寄存器：&lt;code>Program Counter&lt;/code>, &lt;code>Stack Pointer&lt;/code> and &lt;code>BP&lt;/code>。&lt;/p>
&lt;p>Goroutine 的切换约为 200 ns，相当于 2400-3600 条指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Threads 切换时，需要保存各种寄存器，以便将来恢复：&lt;/p>
&lt;blockquote>
&lt;p>16 general purpose registers, PC (Program Counter), SP (Stack Pointer), segment registers, 16 XMM registers, FP coprocessor state, 16 AVX registers, all MSRs etc.&lt;/p>
&lt;/blockquote>
&lt;p>一般而言，线程切换会消耗 1000-1500 纳秒，执行指令的条数会减少 12000-18000。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="mn-模型">M:N 模型&lt;/h3>
&lt;p>&lt;code>Runtime&lt;/code> 在程序启动的时候，会创建 M 个系统线程，之后创建的 N 个 &lt;code>Goroutine&lt;/code> 都会在这 M 个线程上执行。这就是 &lt;code>M:N&lt;/code> 模型。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>同一时刻，一个线程上只能跑一个 Goroutine。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>sysmon&lt;/code> 会检测长时间（超过 10 ms）运行的 Goroutine，将其调度到 &lt;code>global runqueues&lt;/code>，让其他 Goroutine 执行。&lt;/p>
&lt;p>&lt;code>global runqueues&lt;/code> 是一个全局的 runqueue，优先级比较低，以示惩罚。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="work-stealing">Work Stealing&lt;/h3>
&lt;p>当一个 G 执行结束，P 会去 LRQ 获取下一个 G 来执行。&lt;/p>
&lt;p>如果 LRQ 已经空了，这时，P 会随机选择一个 P 的 LRQ “偷”过来一半的 G。&lt;/p>
&lt;p>这样就有更多的 P 可以一起工作，加速执行完所有的 G。&lt;/p>
&lt;h2 id="调度流程">调度流程&lt;/h2>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/schedule.png" >
&lt;img src="https://wnanbei.github.io/images/go/schedule.png"
loading="lazy"
alt="Go调度器生命周期">
&lt;/a>
&lt;figcaption>Go调度器生命周期&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="m0">M0&lt;/h3>
&lt;p>&lt;code>M0&lt;/code> 是启动程序后的编号为 0 的主线程。&lt;/p>
&lt;ul>
&lt;li>这个 M 对应的实例会在全局变量 &lt;code>runtime.m0&lt;/code> 中，不需要在 heap 上分配&lt;/li>
&lt;li>M0 负责执行初始化操作和启动第一个 G， 在之后 M0 就和其他的 M 一样了。&lt;/li>
&lt;/ul>
&lt;h3 id="g0">G0&lt;/h3>
&lt;p>&lt;code>G0&lt;/code> 是每次启动一个 M 都会第一个创建的 gourtine。&lt;/p>
&lt;ul>
&lt;li>G0 是仅用于负责调度的 G，不指向任何可执行的函数。&lt;/li>
&lt;li>每个 M 都会有一个自己的 G0。&lt;/li>
&lt;li>在调度或系统调用时会使用 G0 的栈空间, 全局变量的 G0 是 M0 的 G0。&lt;/li>
&lt;/ul>
&lt;h3 id="基于信号的抢占式调度">基于信号的抢占式调度&lt;/h3></description></item><item><title>Redis 底层数据结构</title><link>https://wnanbei.github.io/post/redis-%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/redis-%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>&lt;p>Redis 底层所采用的数据结构，分别有：SDS String、HashTable、ZipList、QuickList、IntSet、SkipList。&lt;/p>
&lt;h2 id="sds-string">SDS String&lt;/h2>
&lt;p>SDS，全称 &lt;code>Simple Dynamic String&lt;/code>。&lt;/p>
&lt;p>在 Redis 中，包含字符串值的键值对都是由 SDS 实现的，而不是 C 语言自带的字符串。SDS 字符串适合用来表示可以被修改的字符串。&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>计算长度的时间复杂度为 O(1)&lt;/li>
&lt;li>二进制安全&lt;/li>
&lt;li>减少修改操作的内存重分配次数&lt;/li>
&lt;li>杜绝缓冲区溢出&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>占用更多内存，并且这些内存不会被主动释放&lt;/li>
&lt;/ul>
&lt;h3 id="数据结构">数据结构&lt;/h3>
&lt;p>sds 的完整结构分为两块部分，&lt;code>sdshdr&lt;/code> 结构和字符数组。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/sds.png" >
&lt;img src="https://wnanbei.github.io/images/redis/sds.png"
loading="lazy"
alt="SDS 数据结构">
&lt;/a>
&lt;figcaption>SDS 数据结构&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>len&lt;/code> - sds buffer 的已用长度。小于等于 alloc，len 根据类型可以分为无符号的 8 位、16 位、32 位、64 位的整数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>alloc&lt;/code> - sds buffer 分配的内存空间的总长度。alloc 根据类型可以分为无符号的 8 位、16 位、32 位、64 位的整数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>flags&lt;/code> - sds 的类型。取值范围为 0-4，用来表示 sds 的五种类型：5位、8 位、16 位、32 位、64 位，其中 0 表示的 5 位类型实际上并没有用到。&lt;/p>
&lt;p>类型根据 buffer 的总长度来决定，比如 8 位类型，buffer 的最大长度为 255。&lt;/p>
&lt;p>当表示 5 位的 &lt;code>sdshdr5&lt;/code> 时，前三位用于表示类型，后五位用于存储字符串内容，此时没有 &lt;code>buf[]&lt;/code> 部分。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>buf[]&lt;/code> - 字符数组，实际存储字符串的地方。buffer 由三部分组成：&lt;code>used buffer&lt;/code>、&lt;code>avai buffer&lt;/code>、&lt;code>end&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>used buffer&lt;/code> - 已经使用的 buffer。长度由 len 表示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>avai buffer&lt;/code> - 剩余可用的 buffer。长度等于 alloc - len。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>end&lt;/code> - 表示 buffer 的结尾。占用 8 位空间，等同于 &lt;code>/0&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>注：Redis 3.2 以前，SDS 使用 len 和 free 两个 4 字节的参数来表示字符串的大小。Redis 3.2 之后，SDS 字符串按长度划分成 5 种不同的类型，增加了一个 1 字节大小的 flags 字段表示类型，这样在存储短字符串时，len 和 alloc 可以被缩短到 1 字节。这是 Redis 节省内存的设计。&lt;/p>
&lt;h3 id="扩容与释放">扩容与释放&lt;/h3>
&lt;p>SDS 的空间预分配策略：&lt;/p>
&lt;ol>
&lt;li>若 SDS 中剩余空闲长度 avail 大于或等于新增内容的长度 addlen，无需扩容。&lt;/li>
&lt;li>若 SDS 中剩余空闲长度 avail 小于或等于 addlen，则分情况讨论：
&lt;ul>
&lt;li>新增后总长度 &lt;code>len+addlen &amp;lt; 1MB&lt;/code> 的，按新长度的 2 倍扩容&lt;/li>
&lt;li>新增后总长度 &lt;code>len+addlen &amp;gt;= 1MB&lt;/code> 的，按新长度加上 &lt;code>1MB&lt;/code> 扩容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>SDS 的惰性释放策略：&lt;/p>
&lt;ol>
&lt;li>当 SDS 的长度缩短时，Redis 并不会立即回收不再使用的内存空间，而是更新 len 属性，需要时使用 &lt;code>alloc-le&lt;/code>n 即可获知未被使用的空间大小。&lt;/li>
&lt;li>目的是避免频繁的内存分配，但会造成部分内存的浪费。&lt;/li>
&lt;li>Redis 也提供了主动释放未使用内存的方法。&lt;/li>
&lt;/ol>
&lt;h2 id="hashtable">HashTable&lt;/h2>
&lt;p>Redis 的 HashTable 使用 &lt;code>MurmurHash2&lt;/code> 算法计算 Hash 值。&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>访问数据的时间复杂度为 O(1)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>有哈希冲突问题&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/dict.png" >
&lt;img src="https://wnanbei.github.io/images/redis/dict.png"
loading="lazy"
alt="字典数据结构">
&lt;/a>
&lt;figcaption>字典数据结构&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="链表法">链表法&lt;/h3>
&lt;p>Redis 中的 HashTable 使用链表法解决 Hash 冲突问题。&lt;strong>也就是同一个桶里面的元素使用链表保存&lt;/strong>。&lt;/p>
&lt;p>但是当链表过长就会导致查找性能变差可能，所以 Redis 的字典都使用了两个 HashTable 用于 Rehash 操作，增加现有的哈希桶数量，减少哈希冲突。&lt;/p>
&lt;p>一般情况下，字典只使用 &lt;code>ht[0]&lt;/code> HashTable, &lt;code>ht[1]&lt;/code> HashTable 只在进行 Rehash 时使用。&lt;/p>
&lt;h3 id="负载因子">负载因子&lt;/h3>
&lt;p>负载因子用于衡量 HashTable 的“健康状况”。&lt;/p>
&lt;blockquote>
&lt;p>HashTable 的负载因子 = 填入 HashTable 中的元素个数 / HashTable 的长度&lt;/p>
&lt;/blockquote>
&lt;p>对于 HashTable 来说，负载因子过大或过小都不好，&lt;/p>
&lt;ul>
&lt;li>负载因子过大，代表空闲位置越少，冲突也就越多，散列表的性能会下降&lt;/li>
&lt;li>负载因子过小，则会造成内存不能合理利用，从而形成内存浪费&lt;/li>
&lt;/ul>
&lt;p>因此我们为了保证负载因子维持在一个合理的范围内，要对散列表的大小进行收缩或扩展，即 &lt;code>Rehash&lt;/code>，类似于数组的收缩与扩容。&lt;/p>
&lt;h3 id="rehash">Rehash&lt;/h3>
&lt;p>&lt;strong>Rehash 执行条件&lt;/strong>&lt;/p>
&lt;p>在满足以下条件之一时，将进行 Rehash 操作：&lt;/p>
&lt;ul>
&lt;li>负载因子大于等于 1 且 &lt;code>dict_can_resize&lt;/code> 设置为 1，执行扩容操作&lt;/li>
&lt;li>负载因子小于 &lt;code>0.1&lt;/code>，执行收缩操作&lt;/li>
&lt;/ul>
&lt;p>当服务正在执行 &lt;code>BGSAVE&lt;/code> 命令或者 &lt;code>BGREWRITEAOF&lt;/code> 命令进行持久化操作时，Redis 不会进行 Rehash 操作，除非满足以下条件：&lt;/p>
&lt;ul>
&lt;li>负载因子大于等于安全阈值 &lt;code>dict_force_resize_ratio&lt;/code>，默认为 5 时，将无视持久化操作，强制执行 Rehash 扩容操作&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Rehash 过程&lt;/strong>&lt;/p>
&lt;p>扩展 HashTable 和收缩 HashTable 都是通过执行 Rehash 来完成，主要经过以下五步：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>为 &lt;code>ht[1]&lt;/code> 分配空间，其大小取决于 &lt;code>ht[0]&lt;/code> 已使用节点数，即 &lt;code>ht[0].used&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>扩展操作，&lt;code>ht[1]&lt;/code> 的大小为第一个大于等于 &lt;code>ht[0].used * 2&lt;/code> 的 $2^n$&lt;/p>
&lt;p>如：&lt;code>ht[0].used=3&lt;/code> 则 &lt;code>ht[1]&lt;/code> 的大小为 8，&lt;code>ht[0].used=5&lt;/code> 则 &lt;code>ht[1]&lt;/code> 的大小为 16&lt;/p>
&lt;/li>
&lt;li>
&lt;p>收缩操作， &lt;code>ht[1]&lt;/code> 的大小为第一个大于等于 &lt;code>ht[0].used&lt;/code> 的 $2^n$​&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>将字典的 &lt;code>rehashidx&lt;/code> 设置为 0，表示正在执行 rehash 操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将 &lt;code>ht[0]&lt;/code> 中所有的键值对依次重新计算哈希值，并放到 &lt;code>ht[1]&lt;/code> 数组对应位置，完成一个键值对的 Rehash 之后&lt;code>rehashidx&lt;/code> 的值加 1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当 &lt;code>ht[0]&lt;/code> 中所有的键值对都迁移到 &lt;code>ht[1]&lt;/code> 之后，释放 &lt;code>ht[0]&lt;/code>，将 &lt;code>ht[1]&lt;/code> 修改为 &lt;code>ht[0]&lt;/code>，然后再创建一个新的 &lt;code>ht[1]&lt;/code> ，为下一次 Rehash 做准备。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将字典的 &lt;code>rehashidx&lt;/code> 设置为 -1，表示 rehash 已经结束&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="渐进式-rehash">渐进式 Rehash&lt;/h3>
&lt;p>由于 Rehash 过程需要完全重新计算整个 HashTable 的所有数据，需要的计算量非常庞大，所以 Redis 将 Rehash 过程分成多步进行，这被称为渐进式 Rehash。&lt;/p>
&lt;p>渐进式 Rehash 以 bucket 为单位进行数据迁移：&lt;/p>
&lt;ul>
&lt;li>Redis 执行每一个增删查改命令时都会检测是否处于 Rehash 过程中，如果是则帮助执行一次渐进式 Rehash 的数据迁移&lt;/li>
&lt;li>同时，Redis 的周期函数如果发现有字典处于 Rehash 过程中，也会帮助执行一次渐进式 Rehash 的数据迁移，此行为需要配置 &lt;code>activerehashing&lt;/code>，默认值为 1&lt;/li>
&lt;/ul>
&lt;p>在渐进式 Rehash 的过程中，会同时使用两个 HashTable&lt;/p>
&lt;ul>
&lt;li>Delete、Find、Update 操作会优先从 &lt;code>ht[0]&lt;/code> 查找，如果找不到再从 &lt;code>ht[1]&lt;/code> 查找&lt;/li>
&lt;li>而插入操作则只会插入到 &lt;code>ht[1]&lt;/code> 中&lt;/li>
&lt;/ul>
&lt;p>这就保证了随着 Rehash 过程的进行，&lt;code>ht[0]&lt;/code> 的数据只减不增，最终变成一张空表。&lt;/p>
&lt;h2 id="ziplist">ZipList&lt;/h2>
&lt;p>压缩数组 &lt;code>ziplist&lt;/code> 是为了节省内存而开发的一种数据结构，由一系列特殊编码的连续内存块组成的顺序型数据结构。&lt;/p>
&lt;p>&lt;code>ziplist&lt;/code> 不存储指向上一个节点和下一个节点的指针，存储的是上一个节点的长度和当前节点的长度，牺牲了部分读写性能来换取高效的内存利用率，是一种时间换空间的思想。&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>使用更加紧凑的结构实现多个元素的连续存储，在节省内存方面比 HashTable 更加优秀&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>每次增删数据都会引发一次内存的 realloc，存储数据量大时 realloc 可能会导致大量的数据拷贝。只适用于字段个数少和字段值少的场景&lt;/li>
&lt;li>连锁更新问题&lt;/li>
&lt;/ul>
&lt;h3 id="数据结构-1">数据结构&lt;/h3>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/ziplist.png" >
&lt;img src="https://wnanbei.github.io/images/redis/ziplist.png"
loading="lazy"
alt="ZapList 数据结构">
&lt;/a>
&lt;figcaption>ZapList 数据结构&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>zlbytes&lt;/code> - uint32_t 4 字节&lt;/p>
&lt;p>记录整个 zaplist 占用内存字节数，包括本身所占用的 4 个字节。在对 ziplist 进行内存重分配，或计算 zlend 位置时使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>zltail&lt;/code> - uint32_t 4 字节&lt;/p>
&lt;p>记录 zaplist 尾节点距离 zaplist 起始地址有多少个字节。通过这个值无需遍历整个 zaplist 就可以计算出尾节点的地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>zllen&lt;/code> - uint16_t 2 字节&lt;/p>
&lt;p>记录 zaplist 中包含的节点数量，当超过可以存储的最大值 65535 时，此值固定为 65535，此时需要遍历整个 zaplist 才能计算出真实节点数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>entry&lt;/code> - 列表节点&lt;/p>
&lt;p>存储 zaplist 中的内容，长度由存储的实际数据决定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>zlend&lt;/code> - uint8_t 1 字节&lt;/p>
&lt;p>用于标记 zaplist 的末端。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="节点">节点&lt;/h3>
&lt;p>zaplist 的节点可以存储两种数据，整数或者字节数组。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/zaplist_entry.png" >
&lt;img src="https://wnanbei.github.io/images/redis/zaplist_entry.png"
loading="lazy"
alt="ZapList 数据结构">
&lt;/a>
&lt;figcaption>ZapList 数据结构&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;code>zaplist&lt;/code> 的每个节点分为三部分：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>previous_entry_length&lt;/code> - 前一个 entry 的长度，以便能够从后到前遍历列表&lt;/p>
&lt;ol>
&lt;li>
&lt;p>如果前一节点的长度小于 254 字节,那么 previous_entry_length 属性的长度为 1 字节，前一节点的长度就保存在这一个字节里面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果前一节点的长度大于等于 254 字节,那么 previous_entry_length 属性的长度为 5 字节。&lt;/p>
&lt;p>其中第一个字节会被设置为 0xFE(十进制值254)，标记后面跟了一个更大的值。&lt;/p>
&lt;p>之后的四个字节则用于保存前一节点的长度。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>encoding&lt;/code> - 当前 entry 所保存数据的类型以及长度&lt;/p>
&lt;ol>
&lt;li>当存储的数据是 0-12 范围的小整数时，数据会直接存储到 encoding 中，此时节点将不再会有 content 部分。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>content&lt;/code> - 具体数据&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="连锁更新">连锁更新&lt;/h3>
&lt;p>ziplist 不会预留扩展空间，每次插入一个新的元素就需要调用 realloc 扩展内存, 并可能需要将原有内容拷贝到新地址。&lt;/p>
&lt;p>每个节点存在 prevlen 属性，用来记录前置节点的长度，根据前置节点长度还分为两种情况，当长度大于等于 254 时，占用空间会从 1 字节扩大到 5 字节。&lt;/p>
&lt;p>所谓连锁更新，就是多个长度处于 250 ~ 253 字节之间的连续节点，当一个节点更新后，导致下一个节点 prevlen 由 1 字节变为 5 字节，从而导致下下一个节点 prevlen 值增大，产生连锁反应。&lt;/p>
&lt;p>因为连锁更新在最坏情况下需要对压缩列表执行 N 次空间预分配，而每次空间预分配的最坏复杂度为 $O(n)$，所以连锁更新的最坏复杂度为 $O(n^2)$。&lt;/p>
&lt;p>不过，虽然连锁更新的复杂度高，但出现的几率较低。&lt;/p>
&lt;h3 id="时间复杂度">时间复杂度&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">操作&lt;/th>
&lt;th>时间复杂度&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">创建一个新的 zaplist&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">获取给定节点所保存的值&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">返回给定节点的下一个节点&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">返回给定节点的前一个节点&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">返回 zaplist 目前占用的内存字节数&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">返回 zaplist 给定索引上的节点&lt;/td>
&lt;td>$O(n)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">创建一个包含给定值的新节点,并将这个新节点添加到 zaplist 的表头或者表尾&lt;/td>
&lt;td>平均 $O(n)$，最坏 $O(n^2)$(可能发生连锁更新)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">将包含给定值的新节点插人到给定节点之后&lt;/td>
&lt;td>平均 $O(n)$，最坏 $O(n^2)$(可能发生连锁更新)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">从 zaplist 中删除给定的节点&lt;/td>
&lt;td>平均 $O(n)$，最坏 $O(n^2)$(可能发生连锁更新)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">删除 zaplist 在给定索引上的连续多个&lt;/td>
&lt;td>平均 $O(n)$，最坏 $O(n^2)$(可能发生连锁更新)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">返回 zaplist 目前包含的节点数量&lt;/td>
&lt;td>数量小于 65535 时为 $O(1)$，大于 65535 时为 $O(n)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">在 zaplist 中査找并返回包含了给定值的节点&lt;/td>
&lt;td>因为节点的值可能是一个字节数组，所以检查节点值和给定值是否相同的复杂度为 $O(n)$，而查找整个列表的复杂度则为 $O(n^2)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="quicklist">QuickList&lt;/h2>
&lt;p>&lt;code>quicklist&lt;/code> 是 &lt;code>ziplist&lt;/code> 和 &lt;code>linkedlist&lt;/code> 的结合体，它使用跟 &lt;code>linkedlist&lt;/code> 相似的双向链表，每一个链表节点使用 &lt;code>ziplist&lt;/code> 来紧凑存储数据。&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>节省内存，拥有跟 &lt;code>ziplist&lt;/code> 几乎相同的空间利用率&lt;/li>
&lt;li>在大数据量时性能好，插入与弹出性能与 &lt;code>linkedlist&lt;/code> 相近&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>实现较为复杂&lt;/li>
&lt;/ul>
&lt;h3 id="数据结构-2">数据结构&lt;/h3>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/quicklist.png" >
&lt;img src="https://wnanbei.github.io/images/redis/quicklist.png"
loading="lazy"
alt="Redis QuickList">
&lt;/a>
&lt;figcaption>Redis QuickList&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>&lt;code>head&lt;/code>: 指向头节点的指针&lt;/li>
&lt;li>&lt;code>tail&lt;/code>: 指向尾节点的指针&lt;/li>
&lt;li>&lt;code>count&lt;/code>: 所有 ziplist entry 的总数量&lt;/li>
&lt;li>&lt;code>len&lt;/code>: quicklistNode 节点的数量&lt;/li>
&lt;li>&lt;code>fill&lt;/code>: 单个 quicklistNode 节点中 ziplist 存放 entry 最大总数设置，由 &lt;code>list-max-ziplist-size&lt;/code> 参数设置，16 bit&lt;/li>
&lt;li>&lt;code>compress&lt;/code>: 节点压缩深度设置，也就是 quicklist 首尾两端不被压缩的节点的个数，由&lt;code>list-compress-depth&lt;/code>参数设置，16 bit&lt;/li>
&lt;/ul>
&lt;h3 id="quicklistnode">quicklistNode&lt;/h3>
&lt;p>quicklistNode 是 quicklist 的节点结构。&lt;/p>
&lt;ul>
&lt;li>&lt;code>prev&lt;/code>: 指向链表前一个节点的指针&lt;/li>
&lt;li>&lt;code>next&lt;/code>: 指向链表后一个节点的指针&lt;/li>
&lt;li>&lt;code>zl&lt;/code>: 数据指针。如果当前节点的数据没有压缩，那么它指向一个 ziplist，否则，它指向一个 quicklistLZF&lt;/li>
&lt;li>&lt;code>sz&lt;/code>: 表示 zl 指向的 ziplist 的占用字节数总大小，即便 ziplist 被压缩了 sz 的值仍然是压缩前的 ziplist 大小&lt;/li>
&lt;li>&lt;code>count&lt;/code>: 表示 ziplist 里面包含的 entry 个数&lt;/li>
&lt;li>&lt;code>encoding&lt;/code>: 表示 ziplist 的编码，1 表示没有压缩，2 表示 LZF 压缩编码&lt;/li>
&lt;li>&lt;code>container&lt;/code>: 表示一个 quicklist 节点下面是直接存数据，还是使用 ziplist 存数据，或者用其它的结构来存数据。目前的实现中该值是固定为 2，表示使用 ziplist 作为数据容器&lt;/li>
&lt;li>&lt;code>recompress&lt;/code>: bool 值，为 true 表示数据暂时解压&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>quicklistLZF&lt;/strong>&lt;/p>
&lt;p>List 的设计目标是存放很长的列表数据，当列表很长时占用的内存空间必然会相应增多。但是当列表很长的时候，List 中访问频率最高的是两端的数据，中间的数据访问频率较低。&lt;/p>
&lt;p>Redis 会将中间的节点进行压缩，在需要使用时再进行解压缩，进一步减少数据存储的空间。&lt;/p>
&lt;p>quicklistLZF 是对 ziplist 利用 &lt;code>LZF&lt;/code> 算法进行压缩后得到的数据结构：&lt;/p>
&lt;ul>
&lt;li>&lt;code>sz&lt;/code>: 表示压缩后的 ziplist 大小&lt;/li>
&lt;li>&lt;code>compressed&lt;/code>: 是个数组，存放压缩后的 ziplist 字节数组&lt;/li>
&lt;/ul>
&lt;p>配置中 &lt;code>list-compress-depth&lt;/code> 用来配置 quicklist 首尾两端不被压缩的 quicklistNode 节点个数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>0&lt;/code> 特殊值，表示所有节点都不压缩&lt;/li>
&lt;li>&lt;code>1&lt;/code> 表示 quicklist 首尾各有 1 个节点不压缩，中间的节点压缩&lt;/li>
&lt;li>&lt;code>2&lt;/code> 表示 quicklist 首尾各有 2 个节点不压缩，中间的节点压缩&lt;/li>
&lt;/ul>
&lt;h3 id="数据操作">数据操作&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>头部和尾部插入&lt;/strong>&lt;/p>
&lt;p>头部插入和尾部插入比较简单，主要分为两种情况：&lt;/p>
&lt;ol>
&lt;li>如果头节点（或尾节点）ziplist 没有超过限制大小，那么直接插入节点即可。&lt;/li>
&lt;li>如果头节点（或尾节点）ziplist 超过了限制大小，那么新建一个 quicklistNode，将数据插入到新节点中。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>任意位置插入&lt;/strong>&lt;/p>
&lt;p>任意位置插入比较复杂，分为四种情况：&lt;/p>
&lt;ol>
&lt;li>插入位置 ziplist 没有超过限制大小，那么直接插入节点即可。&lt;/li>
&lt;li>插入位置 ziplist 超过限制大小，但插入位置位于 ziplist 两端，如果相邻节点的 ziplist 没有超过限制大小，那么将数据插入到相邻节点的 ziplist 中。&lt;/li>
&lt;li>插入位置 ziplist 超过限制大小，但插入位置位于 ziplist 两端，如果相邻节点的 ziplist 超过限制大小，此时新建一个 quicklistNode，将数据插入到新节点中。&lt;/li>
&lt;li>插入位置 ziplist 超过限制大小，且插入位置位于 ziplist 中间，那么将当前节点分裂成两个新节点，将数据插入其中一个节点。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>查找&lt;/strong>&lt;/p>
&lt;p>list 的查找操作主要面向 index，每个节点的 ziplist 都有长度属性，根据每个节点的长度找到对应的节点，再根据 ziplist 的 index 找到数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>删除&lt;/strong>&lt;/p>
&lt;p>在区间删除时，有以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>找到 start 所在的 quicklistNode 节点&lt;/li>
&lt;li>计算删除的元素是否小于要删除的 count&lt;/li>
&lt;li>如果不满足删除的个数，则会移动至下一个 quicklistNode 继续删除&lt;/li>
&lt;li>依次循环直到删除完成为止&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="intset">IntSet&lt;/h2>
&lt;p>当集合类型成员都是整数，且数量较少时，Redis 会使用整数集合这种数据结构。&lt;/p>
&lt;p>这种数据结构默认情况会使用最小的编码类型存储整数，分配内存。只有当存储了较大的整数时，才会采用更大的编码格式。&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>节省内存&lt;/li>
&lt;/ul>
&lt;h3 id="数据结构-3">数据结构&lt;/h3>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/intset.png" >
&lt;img src="https://wnanbei.github.io/images/redis/intset.png"
loading="lazy"
alt="Redis IntSet">
&lt;/a>
&lt;figcaption>Redis IntSet&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>&lt;code>encoding&lt;/code>: 编码方式，默认值是 &lt;code>INTSET_ENC_INT16&lt;/code>。其值直接影响 contents 数组中元素的数据类型。&lt;/li>
&lt;li>&lt;code>length&lt;/code>: 整数集合的元素数量，也就是 contents 数组的长度。&lt;/li>
&lt;li>&lt;code>contents&lt;/code>: 数组，是整数集合的底层实现。数组中的元素按照从小到达的顺序排列，不包括重复项。类型由 encoding 值决定。&lt;/li>
&lt;/ul>
&lt;h3 id="升级">升级&lt;/h3>
&lt;p>intset 默认的 encoding 为 &lt;code>INTSET_ENC_INT16&lt;/code>，只能存储 &lt;code>-32768 - 32767&lt;/code> 范围内的整数。当存储超出此范围的整数时，则需要升级数据类型，才能添加元素。&lt;/p>
&lt;p>升级的步骤如下：&lt;/p>
&lt;ul>
&lt;li>根据新元素的类型，扩展整数集合底层数组的空间大小（包括新元素的空间）&lt;/li>
&lt;li>将底层数组中的所有元素都转换成新元素相同的类型，并将转换后的元素放置到正确的位置上，放置过程（从右至左）中，维持底层数组的有序性&lt;/li>
&lt;li>将新元素添加到底层数组里边（最末尾）&lt;/li>
&lt;/ul>
&lt;p>Intset 让集合可以保存不同长度的整数，又可以确保升级操作只在有需要的时候进行，节省了内存。&lt;/p>
&lt;p>&lt;strong>整数集合不支持降级操作&lt;/strong>，一旦对数组进行了升级，编码就一直处于升级后的状态。&lt;/p>
&lt;h3 id="数据操作-1">数据操作&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>查询&lt;/strong>
&lt;ol>
&lt;li>与第一个元素判断&lt;/li>
&lt;li>与最后一个元素判断&lt;/li>
&lt;li>二分查找&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>插入不需要升级的元素&lt;/strong>
&lt;ol>
&lt;li>查询新元素的角标位置&lt;/li>
&lt;li>分配空间&lt;/li>
&lt;li>将角标后的数据依次移动位置&lt;/li>
&lt;li>新元素插入角标位置&lt;/li>
&lt;li>修改 set 的 length 属性&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="时间复杂度-1">时间复杂度&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>时间复杂度&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>创建一个新的整数集合&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>添加指定元素到集合&lt;/td>
&lt;td>$O(N)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>移除指定元素&lt;/td>
&lt;td>$O(N)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>判断指定元素是否在集合中&lt;/td>
&lt;td>$O(logN)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>随机返回一个元素&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>取出在指定索引上的元素&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>返回集合包含的元素个数&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>返回集合占用的内存字节数&lt;/td>
&lt;td>$O(1)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="skiplist">SkipList&lt;/h2></description></item><item><title>Redis 缓存与淘汰策略</title><link>https://wnanbei.github.io/post/redis-%E7%BC%93%E5%AD%98%E4%B8%8E%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/redis-%E7%BC%93%E5%AD%98%E4%B8%8E%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</guid><description>&lt;p>常见的缓存类型以及现实中常遇到的缓存问题，Redis 所采用的过期淘汰策略 LRU、LFU 等。&lt;/p>
&lt;h2 id="缓存类型">缓存类型&lt;/h2>
&lt;p>缓存的类型分为：本地缓存、分布式缓存和多级缓存。&lt;/p>
&lt;h3 id="本地缓存">本地缓存&lt;/h3>
&lt;p>本地缓存就是在进程的内存中进行缓存。&lt;/p>
&lt;p>本地缓存是内存访问，没有远程交互开销，性能最好，但是受限于单机容量，一般缓存较小且无法扩展。&lt;/p>
&lt;h3 id="分布式缓存">分布式缓存&lt;/h3>
&lt;p>分布式缓存一般都具有良好的水平扩展能力，对较大数据量的场景也能应付自如。&lt;/p>
&lt;p>缺点就是需要进行远程请求，性能不如本地缓存。&lt;/p>
&lt;h3 id="多级缓存">多级缓存&lt;/h3>
&lt;p>实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。&lt;/p>
&lt;p>在目前的一线大厂中，这也是最常用的缓存方案，单考单一的缓存方案往往难以撑住很多高并发的场景。&lt;/p>
&lt;h2 id="缓存问题">缓存问题&lt;/h2>
&lt;h3 id="缓存穿透">缓存穿透&lt;/h3>
&lt;p>缓存穿透 &lt;code>Cache Penetration&lt;/code>，指数据库和缓存中都没有符合条件的数据，导致业务系统每次都绕过缓存服务器查询下游的数据库。&lt;/p>
&lt;p>如果黑客发起针对该 key 的大量访问攻击，会导致数据库压力过大，最终击垮数据库。&lt;/p>
&lt;p>&lt;strong>解决方案：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>首先需要在接口层做参数校验，拒绝逻辑上没有的数据，比如 &lt;code>id &amp;lt; 0&lt;/code>；&lt;/li>
&lt;li>查询数据库和缓存中没有的数据，在缓存中存储空值或默认值等（具体由产品决定）；
&lt;ul>
&lt;li>此缓存设置的过期时间要短，避免影响真实业务；&lt;/li>
&lt;li>数据库更新时，需要及时更新对应缓存数据；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>网关层对单个 IP 的访问量做出限制，避免异常用户的大量暴力访问；&lt;/li>
&lt;li>布隆过滤器 Bloom Filter，此算法可以非常高效的判断数据&lt;strong>数据一定不存在&lt;/strong>或&lt;strong>可能存在&lt;/strong>，如果判定不存在，就可以直接不查数据库直接返回。&lt;/li>
&lt;/ol>
&lt;h3 id="缓存击穿">缓存击穿&lt;/h3>
&lt;p>缓存击穿 &lt;code>Cache Breakdown&lt;/code>，是指某一个大量请求不断访问的热点 key 突然过期时，大量请求直接访问数据库，让数据库压力瞬间增大的情况。&lt;/p>
&lt;p>&lt;strong>解决方案：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>使用互斥锁，在发现某个缓存为空时，先加锁，从数据库加载数据完毕后解锁。其他线程获取锁失败时，则休眠一段时间后重试。这种方式保证同时只有一个请求去数据库读取数据更新缓存；&lt;/li>
&lt;li>热点数据永不过期，只更新数据；&lt;/li>
&lt;/ol>
&lt;h3 id="缓存雪崩">缓存雪崩&lt;/h3>
&lt;p>缓存雪崩 &lt;code>Cache Avalanche&lt;/code>，是指大量缓存同时过期或缓存服务宕机，造成缓存逐级崩溃，最终压垮数据库的情况。&lt;/p>
&lt;p>&lt;strong>解决方案：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>缓存集群部署，&lt;code>Redis 高可用&lt;/code>，&lt;code>主从+哨兵&lt;/code>，&lt;code>Redis cluster&lt;/code>，尽量避免缓存服务的全盘崩溃；&lt;/li>
&lt;li>随机过期时间，让缓存的过期时间在一定范围内随机浮动，将同一时间点的过期分散到一个时间段内，降低峰值；&lt;/li>
&lt;li>热点数据永不过期，只更新数据；&lt;/li>
&lt;li>数据限流，在各层缓存和数据库之间进行限流，保证系统整体可用；&lt;/li>
&lt;li>系统熔断和降级，返回一些默认的值，或者友情提示，或者空白的值。&lt;/li>
&lt;/ol>
&lt;h3 id="缓存一致性">缓存一致性&lt;/h3>
&lt;p>缓存一致性指的是，在高并发情况下，请求使用数据旧值覆盖了缓存的新值情况。常见的有两种情况：&lt;/p>
&lt;p>&lt;strong>先更后更：&lt;/strong>&lt;/p>
&lt;p>指的是先更新数据库，后更新缓存。此方法在以下情况会出现缓存不一致：&lt;/p>
&lt;ol>
&lt;li>线程 A 更新数据库;&lt;/li>
&lt;li>线程 B 更新数据库;&lt;/li>
&lt;li>线程 B 更新缓存；&lt;/li>
&lt;li>线程 A 使用旧值更新缓存。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>先删后更：&lt;/strong>&lt;/p>
&lt;p>指的是先删除缓存，后更新数据库。此方法在以下情况会出现缓存不一致：&lt;/p>
&lt;ol>
&lt;li>请求 A 先删除缓存；&lt;/li>
&lt;li>请求 B 查询发现缓存不存在；&lt;/li>
&lt;li>请求 B 查询数据库，得旧值；&lt;/li>
&lt;li>请求 B 将旧值写入缓存；&lt;/li>
&lt;li>请求 A 将新值写入数据库；&lt;/li>
&lt;/ol>
&lt;p>此方法可以使用&lt;strong>延时双删&lt;/strong>策略尽量保证数据一致性，也就是请求 A 将新值写入数据库后，延时一段时间，再次删除缓存。&lt;/p>
&lt;p>&lt;strong>解决方案：先更后删&lt;/strong>&lt;/p>
&lt;p>目前业界主流的方式是使用&lt;strong>先更后删&lt;/strong>策略更新缓存。此方案下依然可能会有缓存不一致的可能性：&lt;/p>
&lt;ol>
&lt;li>缓存失效；&lt;/li>
&lt;li>请求 A 查询数据库，得旧值；&lt;/li>
&lt;li>请求 B 更新数据库；&lt;/li>
&lt;li>请求 B 删除缓存；&lt;/li>
&lt;li>请求 A 将查询到的旧值写入缓存；&lt;/li>
&lt;/ol>
&lt;p>在此情况下，依然会产生脏数据，但是前提是：&lt;strong>步骤 3 比步骤 2 耗时更短&lt;/strong>，但通常来说更新数据耗时比查询数据长的，所以这一情况很难出现。&lt;/p>
&lt;p>还有一个问题是请求 B 删除缓存失败怎么办，解决方案是使用一个保障删除成功的重试机制即可，比如消息队列。&lt;/p>
&lt;h2 id="redis-淘汰策略">Redis 淘汰策略&lt;/h2>
&lt;h3 id="定期删除">定期删除&lt;/h3>
&lt;p>redis 会将每个设置了过期时间的 key 放入到一个独立的字典中，定期遍历这个字典来删除到期的 key。&lt;/p>
&lt;p>Redis 默认会每秒进行十次过期扫描（100ms一次），过期扫描不会遍历过期字典中所有的 key，而是采用了一种简单的贪心策略。&lt;/p>
&lt;ol>
&lt;li>从过期字典中随机取 20 个 key&lt;/li>
&lt;li>删除这 20 个 key 中已经过期的 key&lt;/li>
&lt;li>如果过期的 key 比率超过 1/4，重复步骤 1&lt;/li>
&lt;/ol>
&lt;p>此策略主要避免了当 Redis 数据量太大时，每次过期检测需要遍历所有设置了过期时间的 key，造成 cpu 负载过大的问题。&lt;/p>
&lt;h3 id="惰性删除">惰性删除&lt;/h3>
&lt;p>惰性策略就是在客户端访问这个 key 的时候，对 key 的过期时间进行检查，如果过期了就立即删除，不会返回任何东西。&lt;/p>
&lt;p>定期删除可能会导致很多过期 key 到了时间并没有被删除掉。所以就有了惰性删除。&lt;/p>
&lt;h3 id="内存淘汰策略">内存淘汰策略&lt;/h3>
&lt;p>由于定期删除和惰性删除策略，并不是所有的过期 key 都会被删除，所以需要内存淘汰策略进行补充。&lt;/p>
&lt;p>Redis 4.0 以前有 6 种内存淘汰策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>noeviction&lt;/code>：当内存使用超过配置的时候会返回错误，不会驱逐任何键&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>allkeys-lru&lt;/code>：加入键的时候，如果过限，首先通过 LRU 算法驱逐最久没有使用的键&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>volatile-lru&lt;/code>：加入键的时候如果过限，首先从设置了过期时间的键集合中驱逐最久没有使用的键&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>allkeys-random&lt;/code>：加入键的时候如果过限，从所有 key 随机删除&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>volatile-random&lt;/code>：加入键的时候如果过限，从过期键的集合中随机驱逐&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>volatile-ttl&lt;/code>：从配置了过期时间的键中驱逐马上就要过期的键&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Redis 4.0 后新增了两种 lfu 策略：&lt;/p>
&lt;ol start="7">
&lt;li>
&lt;p>&lt;code>volatile-lfu&lt;/code>：从所有配置了过期时间的键中驱逐使用频率最少的键&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>allkeys-lfu&lt;/code>：从所有键中驱逐使用频率最少的键&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="lru-算法">LRU 算法&lt;/h2>
&lt;p>&lt;code>LRU(Least Recently Used)&lt;/code> 最近最少算法用于计算淘汰最久没有使用过的 key，但 Redis 没有使用标准 LRU 实现，而是使用了一种近似的 LRU 实现方式。&lt;/p>
&lt;h3 id="标准-lru">标准 LRU&lt;/h3>
&lt;p>标准的 LRU 算法使用一个双向链表来记录数据的最近被访问顺序。&lt;/p>
&lt;ol>
&lt;li>新增 key 时，在链表结尾添加 node，如果超出 LRU 阈值，淘汰链表队头的 node&lt;/li>
&lt;li>修改 key 时，先修改对应 node 的值，然后把 node 移动到链表队尾&lt;/li>
&lt;li>访问 key 时，将 node 移动到链表队尾&lt;/li>
&lt;/ol>
&lt;h3 id="redis-lru-实现">Redis LRU 实现&lt;/h3>
&lt;p>Redis 在每一个 key 对象内部维护了一个以秒为单位的 24 位时间戳，通过对少量 key 进行采样（默认 5 个），对比时间戳，然后回收其中最久未被访问的 key。&lt;/p>
&lt;p>需要注意的是此时间戳最大只能表示 194 天，不过这对于更新频繁的缓存数据来说是够用的。&lt;/p>
&lt;p>Redis 中有三个配置和 LRU 有关：&lt;/p>
&lt;ul>
&lt;li>&lt;code>maxmemory&lt;/code>: &lt;code>Redis&lt;/code> 存储数据时限制的内存大小，比如 &lt;code>100m&lt;/code>。超过这个数值时触发数据淘汰。此配置为 0 时，不限制内存量。64 位的系统默认值为 0，32 位的系统默认内存限制为 3GB。&lt;/li>
&lt;li>&lt;code>maxmemory_policy&lt;/code>: 触发数据淘汰后的淘汰策略。&lt;/li>
&lt;li>&lt;code>maxmemory_samples&lt;/code>: 随机采样的精度，也就是随机取出 key 的数目。该数值配置越大, 越接近于真实的 LRU 算法，但是数值越大，相应消耗也变高，对性能有一定影响，样本值默认为 5。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Redis 3.0 LRU 优化：&lt;/strong>&lt;/p>
&lt;p>优化后算法会维护一个候选池，大小为 16，池中的数据根据访问时间进行排序，第一次采样选取的 key 都会放入池中。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>随后每次随机选取的 key 只有在访问时间小于池中最小的时间才会放入池中，直到候选池被放满。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>池放满后，如果有新的 key 需要放入，则将池中最近被访问的移出池。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要淘汰数据的时候，直接从池中选取最久没被访问的 key 淘汰掉。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="为什么不使用标准-lru">为什么不使用标准 LRU&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>原生 LRU 算法需要双向链表来管理数据，需要更多的内存&lt;/p>
&lt;/li>
&lt;li>
&lt;p>原生 LRU 需要对所有 key 进行排序，性能损耗更高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果请求符合长尾法则，那么真实 LRU 与 Redis LRU 之间表现基本无差异，实际效果基本相等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要改造现有 Redis 数据结构&lt;/p>
&lt;p>据 Redis 作者说，每个 Redis Object 可以挤出 &lt;code>24 bits&lt;/code> 空间，但 24 bits 不够存储两个指针，但可以存储一个低位时间戳。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/lru_benchmark.webp" >
&lt;img src="https://wnanbei.github.io/images/redis/lru_benchmark.webp"
loading="lazy"
alt="Redis LRU 算法性能">
&lt;/a>
&lt;figcaption>Redis LRU 算法性能&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="lfu-算法">LFU 算法&lt;/h2>
&lt;p>使用 LRU 算法，有可能一个 key 很久没有被访问，只刚刚偶尔被访问了一次，那么它就被认为是热点数据，不会被淘汰，而有些 key 将来是很有可能被访问到但被淘汰了。&lt;/p>
&lt;p>Redis 在 4.0 中新增了一种 LFU 淘汰策略，用于根据 key 的访问频率进行淘汰。&lt;/p>
&lt;p>LFU 原理是为每个 key 维护一个计数器。每当 key 被访问时，计数器增大。计数器越大，可以约等于访问越频繁。每次采样时淘汰掉访问最不频繁的 key。&lt;/p>
&lt;h3 id="redis-lfu-实现">Redis LFU 实现&lt;/h3>
&lt;p>Redis 中有三个配置项可以调整 LFU 算法的行为：&lt;/p>
&lt;ul>
&lt;li>&lt;code>lfu-log-factor&lt;/code>: 默认为 10，访问频率增长速度，值越大，访问频率增长越慢。&lt;/li>
&lt;li>&lt;code>lfu-decay-time&lt;/code>: 默认为 1，访问频率降低速度，值越大，访问频率降低越慢。&lt;/li>
&lt;li>&lt;code>LFU_INIT_VAL&lt;/code>: 默认为 5，新增 key 的默认访问频率。&lt;/li>
&lt;/ul>
&lt;p>LFU 使用跟 LRU 同样的 24 bits 字段记录数据。&lt;/p>
&lt;ul>
&lt;li>前 16 bits 用于记录以分钟为单位的时间，用于表示最近一次访问频率被降低的时间。&lt;/li>
&lt;li>后 8 bits 记录访问频率 &lt;code>counter&lt;/code>，最大为 255。&lt;/li>
&lt;/ul>
&lt;p>LFU 维护了一个与 LRU 相同的候选池，用于节省排序所有 key 访问频率所需要的时间。&lt;/p>
&lt;h3 id="增加访问频率">增加访问频率&lt;/h3>
&lt;p>由于只使用 8 bits 记录访问频率，最大为 255，所以访问频率不能无限增大。Redis 的解决方式是，访问频率越高，则访问频率增加的可能性越低。&lt;/p>
&lt;p>增加频率函数如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">/* Logarithmically increment a counter. The greater is the current counter value
&lt;/span>&lt;span style="color:#75715e"> * the less likely is that it gets really implemented. Saturate it at 255. */&lt;/span>
&lt;span style="color:#66d9ef">uint8_t&lt;/span> &lt;span style="color:#a6e22e">LFULogIncr&lt;/span>(&lt;span style="color:#66d9ef">uint8_t&lt;/span> counter) {
&lt;span style="color:#66d9ef">if&lt;/span> (counter &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>;
&lt;span style="color:#66d9ef">double&lt;/span> r &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">double&lt;/span>)rand()&lt;span style="color:#f92672">/&lt;/span>RAND_MAX;
&lt;span style="color:#66d9ef">double&lt;/span> baseval &lt;span style="color:#f92672">=&lt;/span> counter &lt;span style="color:#f92672">-&lt;/span> LFU_INIT_VAL;
&lt;span style="color:#66d9ef">if&lt;/span> (baseval &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) baseval &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">double&lt;/span> p &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>&lt;span style="color:#f92672">/&lt;/span>(baseval&lt;span style="color:#f92672">*&lt;/span>server.lfu_log_factor&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (r &lt;span style="color:#f92672">&amp;lt;&lt;/span> p) counter&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> counter;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>首先取一个 0-1 之间的随机数 &lt;code>r&lt;/code>&lt;/li>
&lt;li>由 &lt;code>counter&lt;/code> 和 &lt;code>lfu_log_factor&lt;/code> 决定一个 0-1 之间的值 &lt;code>p&lt;/code>。&lt;code>counter&lt;/code> 越大，&lt;code>p&lt;/code> 值越小。&lt;/li>
&lt;li>比较 &lt;code>r&lt;/code> 与 &lt;code>p&lt;/code>，如果 &lt;code>r &amp;lt; p&lt;/code>，则 &lt;code>counter&lt;/code> 增加 1。&lt;/li>
&lt;/ol>
&lt;p>可以看到当 &lt;code>counter&lt;/code> 越大，则 p 值越小，则 r &amp;lt; p 的可能性越小，则 counter 增加的几率越小。&lt;/p>
&lt;p>当 counter 为 255 时，则不再增加。&lt;/p>
&lt;h3 id="降低访问频率">降低访问频率&lt;/h3>
&lt;p>如果只增加访问频率，则有可能一个 key 在某段时间被大量访问，之后不再被使用，这样的 key 将不会被淘汰，所以需要一种根据时间降低 key 访问频率的机制。&lt;/p>
&lt;p>降低频率函数如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">/* If the object decrement time is reached decrement the LFU counter but
&lt;/span>&lt;span style="color:#75715e"> * do not update LFU fields of the object, we update the access time
&lt;/span>&lt;span style="color:#75715e"> * and counter in an explicit way when the object is really accessed.
&lt;/span>&lt;span style="color:#75715e"> * And we will times halve the counter according to the times of
&lt;/span>&lt;span style="color:#75715e"> * elapsed time than server.lfu_decay_time.
&lt;/span>&lt;span style="color:#75715e"> * Return the object frequency counter.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * This function is used in order to scan the dataset for the best object
&lt;/span>&lt;span style="color:#75715e"> * to fit: as we check for the candidate, we incrementally decrement the
&lt;/span>&lt;span style="color:#75715e"> * counter of the scanned objects if needed. */&lt;/span>
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">LFUDecrAndReturn&lt;/span>(robj &lt;span style="color:#f92672">*&lt;/span>o) {
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> ldt &lt;span style="color:#f92672">=&lt;/span> o&lt;span style="color:#f92672">-&amp;gt;&lt;/span>lru &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>;
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> counter &lt;span style="color:#f92672">=&lt;/span> o&lt;span style="color:#f92672">-&amp;gt;&lt;/span>lru &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>;
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> num_periods &lt;span style="color:#f92672">=&lt;/span> server.lfu_decay_time &lt;span style="color:#f92672">?&lt;/span> LFUTimeElapsed(ldt) &lt;span style="color:#f92672">/&lt;/span> server.lfu_decay_time : &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (num_periods)
counter &lt;span style="color:#f92672">=&lt;/span> (num_periods &lt;span style="color:#f92672">&amp;gt;&lt;/span> counter) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> counter &lt;span style="color:#f92672">-&lt;/span> num_periods;
&lt;span style="color:#66d9ef">return&lt;/span> counter;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>函数首先取得前 16 bits 的最近一次频率被降低时间。&lt;/li>
&lt;li>计算最近一次频率被降低时间与当前时间的差值。&lt;/li>
&lt;li>根据 &lt;code>lfu_decay_time&lt;/code> 与差值的多少计算需要降低多少访问频率。&lt;/li>
&lt;/ol>
&lt;h3 id="新增-key-默认访问频率">新增 key 默认访问频率&lt;/h3>
&lt;p>如果一个新增 key 的默认访问频率为 0，那么这个 key 很可能快速被删除掉，所以需要为新增 key 设定一个默认的访问频率值。&lt;/p>
&lt;p>可以通过 &lt;code>LFU_INIT_VAL&lt;/code> 设置，默认值为 5。&lt;/p></description></item><item><title>Redis 使用规范</title><link>https://wnanbei.github.io/post/redis-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/redis-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</guid><description>&lt;p>Redis 使用过程中的一些规范，包括 key 的名称、禁用的命令等。&lt;/p>
&lt;h2 id="键值设计">键值设计&lt;/h2>
&lt;h3 id="key-名称设计">Key 名称设计&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>可读性和可管理性&lt;/strong>&lt;/p>
&lt;p>以英文冒号分隔 key，前缀概念的范围的返回从大到小，从不变到可变，从变化幅度小到变化幅度大。&lt;/p>
&lt;p>例如：&lt;code>yoga:user:1&lt;/code>，表示 yoga:user:{userID}，即瑜伽子系统 ID=1 的用户信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>简洁性&lt;/strong>&lt;/p>
&lt;p>保证语义的前提下，控制 key 的长度，当 key 较长时，内存占用也不容忽视。&lt;/p>
&lt;p>例如：&lt;code>user:{uid}:friends:messages:{mid}&lt;/code> 可简化为 &lt;code>u:{uid}:f:m:{mid}&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不包含特殊字符&lt;/strong>&lt;/p>
&lt;p>只使用字母数字。&lt;/p>
&lt;p>反例：包含空格、换行、单双引号以及其他转义字符&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="value-设计">Value 设计&lt;/h3>
&lt;ol>
&lt;li>string 类型控制在 10KB 以内&lt;/li>
&lt;li>hash、list、set、zset 元素个数不要超过 5000&lt;/li>
&lt;li>选择合适的数据类型&lt;/li>
&lt;/ol>
&lt;h2 id="命令">命令&lt;/h2>
&lt;h3 id="禁用命令">禁用命令&lt;/h3>
&lt;p>禁止线上使用 &lt;code>keys&lt;/code>、&lt;code>flushall&lt;/code>、&lt;code>flushdb&lt;/code> 等，通过 redis 的 rename 机制禁用命令，或者使用 scan 的方式渐进式处理。&lt;/p>
&lt;h3 id="关注-on-命令-n-的数量">关注 O(N) 命令 N 的数量&lt;/h3>
&lt;p>例如 hgetall、lrange、smembers、zrange、sinter 等并非不能使用，但是需要明确N的值。&lt;/p>
&lt;p>有遍历的需求可以使用 hscan、sscan、zscan 代替。&lt;/p>
&lt;h2 id="客户端">客户端&lt;/h2></description></item><item><title>Redis 安装配置</title><link>https://wnanbei.github.io/post/redis-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/redis-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>Redis 在 centos 系统下的安装配置流程。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>首先我们需要安装基础的依赖包。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo yum install -y gcc gcc-c++ make jemalloc-devel epel-release
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>然后使用&lt;code>wget&lt;/code>从官网下载最新版本的&lt;code>Redis&lt;/code>，目前的最新版是&lt;code>4.0.11&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget http://download.redis.io/releases/redis-4.0.11.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想要下载其他版本的话，修改连接中的版本即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接下来解压压缩包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo tar -zvxf redis-4.0.11.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>进入到解压出来的目录中，由于&lt;code>redis&lt;/code>提供的是已经编译完成的版本，所以直接&lt;code>make install&lt;/code>安装即可。&lt;/p>
&lt;p>当然也可以在安装时通过&lt;code>PREFIX&lt;/code>参数指定安装的位置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cd redis-4.0.11
sudo make PREFIX&lt;span style="color:#f92672">=&lt;/span>/usr/local/redis install
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>这些步骤完成之后，将会在指定的文件夹中出现&lt;code>redis&lt;/code>的服务端和客户端文件。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>&lt;code>redis&lt;/code>安装完毕之后，我们还需要对其做一系列的配置。&lt;/p>
&lt;h3 id="开机启动">开机启动&lt;/h3>
&lt;p>在一开始解压的安装文件夹中，有一个&lt;code>redis.conf&lt;/code>配置文件，首先我们先在&lt;code>/etc&lt;/code>中新建一个文件夹：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo mkdir /etc/redis
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后将&lt;code>redis.conf&lt;/code>复制到这个文件夹中去。&lt;/p>
&lt;p>为了方便使用&lt;code>Redis&lt;/code>，我们可以把&lt;code>Redis&lt;/code>配置成系统服务，来支持开机启动。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先，创建一个服务文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo vim /usr/lib/systemd/system/redis-server.service
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>然后在这个文件中添加以下内容，里面的内容需要根据你安装的&lt;code>Redis&lt;/code>版本和路径进行修改。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
Description&lt;span style="color:#f92672">=&lt;/span>Redis Server
After&lt;span style="color:#f92672">=&lt;/span>network.target
&lt;span style="color:#f92672">[&lt;/span>Service&lt;span style="color:#f92672">]&lt;/span>
ExecStart&lt;span style="color:#f92672">=&lt;/span>/usr/local/redis/bin/redis-server /etc/redis/redis.conf --daemonize no
ExecStop&lt;span style="color:#f92672">=&lt;/span>/usr/local/redis/bin/redis-cli -p &lt;span style="color:#ae81ff">6379&lt;/span> shutdown
Restart&lt;span style="color:#f92672">=&lt;/span>always
&lt;span style="color:#f92672">[&lt;/span>Install&lt;span style="color:#f92672">]&lt;/span>
WantedBy&lt;span style="color:#f92672">=&lt;/span>multi-user.target
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>最后，我们把这个redis服务设置成开机启动。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl enable redis-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>需要马上打开redis服务可以使用以下命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl start redis-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="远程连接">远程连接&lt;/h3>
&lt;p>由于Redis在安装完成后是默认禁止远程连接的，所以如果需要的话，我们需要开启远程连接。&lt;/p>
&lt;p>首先打开&lt;code>Redis&lt;/code>的配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo vim /etc/redis/redis.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后找到其中&lt;code>bind 127.0.0.1&lt;/code>这一行，将其注释，或者修改为&lt;code>bind 0.0.0.0&lt;/code>。&lt;/p>
&lt;h3 id="密码">密码&lt;/h3>
&lt;p>&lt;code>Redis&lt;/code>提供了一个轻量级的认证方式，可以让我们在&lt;code>redis.conf&lt;/code>中配置密码。&lt;/p>
&lt;p>同样的还是在&lt;code>redis.conf&lt;/code>文件中，我们需要找到&lt;code>requirepass&lt;/code>这一行，这个参数就是密码。将这一行取消注释，然后将你的密码写在这里，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">requirepass pwd123
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存退出后，我们需要重启&lt;code>Redis&lt;/code>服务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl restart redis-server
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后，我们打开客户端的时候需要这样验证密码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">redis-cli -a pwd123
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者在进入客户端之后再验证密码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">redis-cli
redis 127.0.0.1:6379&amp;gt; auth pwd123
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动测试">启动测试&lt;/h2>
&lt;p>安装以及配置完毕之后，我们需要在安装目录下检测一下安装是否成功。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先为&lt;code>redis-cli&lt;/code>制作一个软连接放到&lt;code>/usr/bin&lt;/code>目录中，方便使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ln -s /usr/local/redi/bin/redis-cli /usr/bin/redis-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动&lt;code>redis-server&lt;/code>服务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl start redis-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>然后我们需要新开一个终端来测试&lt;code>redis&lt;/code>客户端是否能启动。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo redis-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>如果这几个步骤都能够正常使用的话，那么我们的&lt;code>redis&lt;/code>就安装成功了。&lt;/p></description></item><item><title>Redis 数据持久化策略</title><link>https://wnanbei.github.io/post/redis-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/redis-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5/</guid><description>&lt;p>redis 提供了两种持久化的方式，分别是 &lt;code>RDB(Redis DataBase)&lt;/code> 和 &lt;code>AOF(Append Only File)&lt;/code>。&lt;/p>
&lt;h2 id="rdb">RDB&lt;/h2>
&lt;p>RDB，就是在不同的时间点，将 redis 存储的数据生成快照并存储到磁盘等介质上。&lt;/p>
&lt;p>Redis 在进行 RDB 数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程结束，才会用这个临时文件替换上次持久化好的文件。这种特性，让我们可以随时进行备份，因为快照文件总是完整可用的。&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Redis 会单独 fork 一个子进程进行持久化，不影响主进程性能。&lt;/li>
&lt;li>大规模数据恢复更高效。&lt;/li>
&lt;li>备份文件总是完整可用。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>RDB 耗时较长，不够实时，在停机的时候会导致大量丢失数据。数据完整性较差。&lt;/li>
&lt;/ul>
&lt;h2 id="aof">AOF&lt;/h2>
&lt;p>AOF，则是将 redis 执行过的所有写指令记录下来，在下次 redis 重新启动时，把这些写指令从前到后再重复执行一遍，实现数据恢复。开启 AOF 后，如果有写操作，如 SET 等，redis 就会追加到 AOF 文件的末尾。&lt;/p>
&lt;p>默认的 AOF 持久化策略是每秒钟 fsync（指把缓存中的写指令记录到磁盘中）一次，因为在这种情况下，redis 仍然可以保持很好的处理性能，即使 redis 故障，也只会丢失最近 1 秒钟的数据。&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>丢失数据的可能性小。&lt;/li>
&lt;li>有 Rewrite 机制可以控制 AOF 文件大小。&lt;/li>
&lt;li>断电、磁盘满等问题都不会影响 AOF 文件的可用性。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>AOF 文件会越来越大，占用较多空间。&lt;/li>
&lt;li>数据恢复效率较慢。&lt;/li>
&lt;/ul>
&lt;h3 id="aof-rewrite">AOF Rewrite&lt;/h3>
&lt;p>Redis 提供了 AOF 文件重写（rewrite）机制，当 AOF 文件的大小超过所设定的阈值时，redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。&lt;/p>
&lt;p>例如调用了 100 次 INCR 指令，在 AOF 文件中可以用 rewrite 把这 100 条指令合并成一条 SET 指令。&lt;/p>
&lt;p>&lt;strong>流程：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>redis 会创建（fork）一个重写子进程，首先读取现有的 AOF 文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。&lt;/li>
&lt;li>同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的 AOF 文件中，保证原有的 AOF 文件的可用性，避免在重写过程中出现意外。&lt;/li>
&lt;li>当重写子进程完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新 AOF 文件中。&lt;/li>
&lt;li>追加结束后，redis 就会用新 AOF 文件来代替旧 AOF 文件。&lt;/li>
&lt;/ol>
&lt;h2 id="恢复数据">恢复数据&lt;/h2>
&lt;p>因为 RDB 会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以通常需要 AOF 配合同时使用。&lt;/p>
&lt;p>在 Redis 实例重启时，使用 RDB 持久化文件重新构建内存，再使用 AOF 重放近期的操作指令来实现完整恢复重启之前的状态。&lt;/p></description></item><item><title>Redis 数据类型</title><link>https://wnanbei.github.io/post/redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>&lt;p>在 Redis 中，常用的 5 种数据类型和应用场景如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>String&lt;/code>：缓存、计数器、限速器、分布式锁等。&lt;/li>
&lt;li>&lt;code>List&lt;/code>：链表、队列、微博关注人时间轴列表等。&lt;/li>
&lt;li>&lt;code>Hash&lt;/code>： 用户信息、Hash 表等。&lt;/li>
&lt;li>&lt;code>Set&lt;/code>： 去重、赞、踩、共同好友等。&lt;/li>
&lt;li>&lt;code>Sorted Set&lt;/code>：访问量排行榜、点击量排行榜等。&lt;/li>
&lt;/ul>
&lt;h2 id="redisobject">redisObject&lt;/h2>
&lt;p>Redis 有一个核心的对象 &lt;code>redisObject&lt;/code>，用来表示所有的 key。此对象中有 type 和 encoding 两个字段，用来表示 key 的类型和底层数据结构。&lt;/p>
&lt;p>Redis 使用对象来表示数据库中的键和值，每次当我们在Redis的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的健(键对象)，另一个对象用作键值对的值(值对象)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">Copytypedef &lt;span style="color:#66d9ef">struct&lt;/span> redisObiect{
&lt;span style="color:#75715e">//类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> type:&lt;span style="color:#ae81ff">4&lt;/span>;
&lt;span style="color:#75715e">//编码
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> encoding:&lt;span style="color:#ae81ff">4&lt;/span>;
&lt;span style="color:#75715e">//指向底层数据结构的指针
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不同数据类型使用不同的数据结构以提升速度。每种数据类型都有一种或者多种数据结构来支撑。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/data_type.png" >
&lt;img src="https://wnanbei.github.io/images/redis/data_type.png"
loading="lazy"
alt="Redis 数据类型与数据结构关系">
&lt;/a>
&lt;figcaption>Redis 数据类型与数据结构关系&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>这样设计有两个好处：&lt;/p>
&lt;ol>
&lt;li>可以自由改进内部编码，而对外的数据结构和命令没有影响。&lt;/li>
&lt;li>多种内部编码实现可以在不同场景下发挥各自的优势，从而优化对象在不同场景下的使用效率。&lt;/li>
&lt;/ol>
&lt;p>使用以下命令可以查看 Key 具体的编码方式：&lt;/p>
&lt;pre tabindex="0">&lt;code>object encoding keyName
&lt;/code>&lt;/pre>&lt;h3 id="key">Key&lt;/h3>
&lt;p>Redis 存储的键值对中的 &lt;code>key&lt;/code>，是二进制安全的，可以使用普通的字符串来做 &lt;code>key&lt;/code>，也可以使用二进制的数据，例如图片，甚至空字符。&lt;/p>
&lt;p>&lt;strong>需要遵守的原则：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>同一个数据库中的 key 不可重名&lt;/li>
&lt;li>key 的最大值为 512MB&lt;/li>
&lt;li>key 不应过长。当 key 过长时，查询等命令将会因为 key 过长而花费更多的时间在 key 的比较上&lt;/li>
&lt;li>key 不应太短。命名需要考虑可读性，例如 &lt;code>&amp;quot;user:1000:followers&amp;quot;&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="命令">命令&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">命令&lt;/th>
&lt;th style="text-align:left">作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>DEL key&lt;/code>&lt;/td>
&lt;td style="text-align:left">key存在时删除key&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>EXISTS key&lt;/code>&lt;/td>
&lt;td style="text-align:left">检查key是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>TYPE key&lt;/code>&lt;/td>
&lt;td style="text-align:left">查看key的类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>RENAME key newkey&lt;/code>&lt;/td>
&lt;td style="text-align:left">将key重命名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>RENAMENX key newkey&lt;/code>&lt;/td>
&lt;td style="text-align:left">只有当newkey不存在时，才进行重命名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>KEYS pattern&lt;/code>&lt;/td>
&lt;td style="text-align:left">查找key&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>RANDOMKEY&lt;/code>&lt;/td>
&lt;td style="text-align:left">从当前数据库随机获取一个key&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>MOVE key db&lt;/code>&lt;/td>
&lt;td style="text-align:left">将这个key移动到指定的另一个数据库&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>DUMP key&lt;/code>&lt;/td>
&lt;td style="text-align:left">序列化key，并返回被序列化的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>EXPIRE key second&lt;/code>&lt;/td>
&lt;td style="text-align:left">以秒为单位给key设定过期时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>PEXPIRE key milliseconds&lt;/code>&lt;/td>
&lt;td style="text-align:left">以豪秒为单位给key设定过期时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>EXPIREAT key timestamp&lt;/code>&lt;/td>
&lt;td style="text-align:left">把一个时间戳设置为key的过期时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>PEXPIREAT key mill-timestamp&lt;/code>&lt;/td>
&lt;td style="text-align:left">把一个毫秒级别的时间戳设置为key的过期时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>PERSIST key&lt;/code>&lt;/td>
&lt;td style="text-align:left">移除key的过期时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>TTL key&lt;/code>&lt;/td>
&lt;td style="text-align:left">以秒为单位返回key的过期时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>PTTL key&lt;/code>&lt;/td>
&lt;td style="text-align:left">以豪秒为单位返回key的过期时间&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="string">String&lt;/h2>
&lt;p>字符串。字符串对象的值可以是字符串、数字、甚至是二进制，最大不能超过 512MB。&lt;/p>
&lt;p>主要底层数据结构为 &lt;code>sds string&lt;/code>。&lt;/p>
&lt;h3 id="编码">编码&lt;/h3>
&lt;p>字符串对象的内部编码有 3 种：&lt;code>int&lt;/code>、&lt;code>raw&lt;/code> 和 &lt;code>embstr&lt;/code>。&lt;/p>
&lt;ol>
&lt;li>如果字符串对象保存的是可以用 &lt;code>long&lt;/code> 类型表示的整数值，那么 Redis 会将整数值保存在字符串对象的 &lt;code>ptr&lt;/code> 属性中，并将编码设置为 &lt;code>int&lt;/code>。&lt;/li>
&lt;li>如果字符串对象保存的是一个字符串值，并且长度大于 32 字节，那么 Redis 将使用一个简单动态字符串 &lt;code>SDS&lt;/code> 来保存，并将编码设置为 &lt;code>raw&lt;/code>。&lt;/li>
&lt;li>如果字符串对象保存的是一个字符串值，并且长度小于等于 32 字节，那么 Redis 将使用一个简单动态字符串 &lt;code>SDS&lt;/code> 来保存，并将编码设置为 &lt;code>embstr&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;code>embstr&lt;/code> 编码是专门用于保存短字符串的一种优化编码方式，&lt;code>raw&lt;/code> 编码会通过调用两次内存分配函数来分别分配两块空间来保存 &lt;code>redisObject&lt;/code> 和 &lt;code>SDS&lt;/code>，而 &lt;code>embstr&lt;/code> 的不同之处在于会分配一块连续的内存空间来保存 &lt;code>redisObject&lt;/code> 和 &lt;code>SDS&lt;/code>。&lt;/p>
&lt;p>&lt;code>embstr&lt;/code> 编码的优点有以下几点：&lt;/p>
&lt;ul>
&lt;li>&lt;code>embstr&lt;/code> 编码创建字符串对象所需的内存分配次数为一次&lt;/li>
&lt;li>&lt;code>embstr&lt;/code> 编码的字符串对象释放内存也只需要调用一次内存释放函数&lt;/li>
&lt;li>&lt;code>embstr&lt;/code> 编码的字符串对象的所有数据都保存在一块连续的内存里，可以更好的利用 CPU 缓存提升性能&lt;/li>
&lt;/ul>
&lt;h3 id="命令-1">命令&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">命令&lt;/th>
&lt;th style="text-align:left">作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>SET key value&lt;/code>&lt;/td>
&lt;td style="text-align:left">给key设定或更新值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>SETNX key value&lt;/code>&lt;/td>
&lt;td style="text-align:left">只有当key不存在时才给key设定值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>SETEX key second value&lt;/code>&lt;/td>
&lt;td style="text-align:left">给key设定值，并且设定一个秒为单位的过期时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>PSETEX key milliseconds value&lt;/code>&lt;/td>
&lt;td style="text-align:left">给key设定值，并且设定一个豪秒为单位的过期时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>SETRANGE key offset value&lt;/code>&lt;/td>
&lt;td style="text-align:left">从offset开始，覆盖key的一部分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>MSET key value [key value ...]&lt;/code>&lt;/td>
&lt;td style="text-align:left">同时设置多个键值对&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>MSETNX key value [key value ...]&lt;/code>&lt;/td>
&lt;td style="text-align:left">仅当列出的key都不存在时，同时设置多个键值对&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>GET key&lt;/code>&lt;/td>
&lt;td style="text-align:left">获取key的value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>MGET key1 [key2..]&lt;/code>&lt;/td>
&lt;td style="text-align:left">一次获取多个key的value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>GETSET key value&lt;/code>&lt;/td>
&lt;td style="text-align:left">给key设定一个新的value，获取旧的value并返回&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>GETRANGE key start end&lt;/code>&lt;/td>
&lt;td style="text-align:left">获取value中指定位置的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>STRLEN key&lt;/code>&lt;/td>
&lt;td style="text-align:left">返回key中value的长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>APPEND key value&lt;/code>&lt;/td>
&lt;td style="text-align:left">将值添加到&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>INCR key&lt;/code>&lt;/td>
&lt;td style="text-align:left">将key存储的数字加1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>INCRBY key increment&lt;/code>&lt;/td>
&lt;td style="text-align:left">将key存储的数字加上指定的数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>INCRBYFLOAT key increment&lt;/code>&lt;/td>
&lt;td style="text-align:left">将key存储的数字加上指定的浮点数数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>DECR key&lt;/code>&lt;/td>
&lt;td style="text-align:left">将key存储的数字减1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>DECRBY key decrement&lt;/code>&lt;/td>
&lt;td style="text-align:left">将key存储的数字减去指定的数值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="list">List&lt;/h2>
&lt;p>Redis 的 &lt;code>List&lt;/code> 基本上是一个双向链表，可以分别在头部或者尾部添加删除数据，每一个 &lt;code>List&lt;/code> 类型的 key 最多可以存储 4294967295 个元素。&lt;/p>
&lt;p>基于这样的特性，Redis 中的 &lt;code>List&lt;/code> 常常被用来做消息队列之类的事情。&lt;/p>
&lt;p>使用以下方式实现：&lt;/p>
&lt;ul>
&lt;li>&lt;code>quicklist&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="命令-2">命令&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>LPUSH key value1 [value2]&lt;/code>&lt;/td>
&lt;td>在List头部插入一个或多个值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RPUSH key value1 [value2]&lt;/code>&lt;/td>
&lt;td>在List尾部插入一个或多个值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LPUSHX key value&lt;/code>&lt;/td>
&lt;td>在List头部插入一个或多个值，key不存在则报错&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RPUSHX key value&lt;/code>&lt;/td>
&lt;td>在List尾部插入一个或多个值，key不存在则报错&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LPOP key&lt;/code>&lt;/td>
&lt;td>移除并返回List头部第一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RPOP key&lt;/code>&lt;/td>
&lt;td>移除并返回List尾部最后一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RPOPLPUSH source destination&lt;/code>&lt;/td>
&lt;td>移除列表尾部最后一个元素，添加到另一个列表头部&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LINDEX key index&lt;/code>&lt;/td>
&lt;td>根据列表索引查看元素的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LLEN key&lt;/code>&lt;/td>
&lt;td>查看List的长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LRANGE key start stop&lt;/code>&lt;/td>
&lt;td>查看一定索引范围内的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LREM key count value&lt;/code>&lt;/td>
&lt;td>删除等于value的元素，如果count为0，则删除所有相等元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LINSERT key BEFORE/AFTER pivot value&lt;/code>&lt;/td>
&lt;td>将value插入到列表中，位于pivot之前或之后&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LSET key index value&lt;/code>&lt;/td>
&lt;td>根据index指定修改元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LTRIM key start stop&lt;/code>&lt;/td>
&lt;td>切片裁剪List&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BLPOP key1 [key2 ] timeout&lt;/code>&lt;/td>
&lt;td>移除并返回列表头部第一个元素，如果没有元素则阻塞列表直到有元素为止&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BRPOP key1 [key2 ] timeout&lt;/code>&lt;/td>
&lt;td>移除并返回列表尾部最后一个元素，如果没有元素则阻塞列表直到有元素为止&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BRPOPLPUSH source destination timeout&lt;/code>&lt;/td>
&lt;td>移除列表尾部最后一个元素，添加到另一个列表头部，如果没有元素则阻塞列表直到有元素为止&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="hash">Hash&lt;/h2>
&lt;p>Redis 的 &lt;code>Hash&lt;/code> 类型是一个由 &lt;code>field-value&lt;/code> 键值对组成的集合。其中 &lt;code>field&lt;/code> 和 &lt;code>value&lt;/code> 都是字符串类型。&lt;/p>
&lt;p>&lt;code>hash&lt;/code> 类型都非常适合用于保存对象。而且，大小较小的 &lt;code>hash&lt;/code>（元素较少、值比较短）以特殊的方式存储在内存中，使得其读写效率非常之高。&lt;/p>
&lt;h3 id="实现方式">实现方式&lt;/h3>
&lt;p>有两种不同的实现方式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ziplist&lt;/code> - 满足以下条件时：
&lt;ul>
&lt;li>元素个数少于 &lt;code>hash-max-ziplist-entries(默认 512)&lt;/code>&lt;/li>
&lt;li>所有值都小于 &lt;code>hash-max-ziplist-value(默认 64)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>hashtable&lt;/code> - 不满足 ziplist 条件时&lt;/li>
&lt;/ul>
&lt;h3 id="命令-3">命令&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>HSET key field value&lt;/code>&lt;/td>
&lt;td>添加或修改一个字段的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HMSET key field1 value1 [field2 value2 ]&lt;/code>&lt;/td>
&lt;td>同时添加或修改一个或多个字段的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HSETNX key field value&lt;/code>&lt;/td>
&lt;td>只有当字段不存在时，才添加一个字段的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HLEN key&lt;/code>&lt;/td>
&lt;td>获取所有字段的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HSTRLEN key field&lt;/code>&lt;/td>
&lt;td>c查看key中指定字段的value的长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HEXISTS key field&lt;/code>&lt;/td>
&lt;td>查看字段是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HDEL key field1 [field2]&lt;/code>&lt;/td>
&lt;td>删除一个或多个字段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HGET key field&lt;/code>&lt;/td>
&lt;td>获取某一个字段的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HMGET key field1 [field2]&lt;/code>&lt;/td>
&lt;td>获取一个或多个字段的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HKEYS key&lt;/code>&lt;/td>
&lt;td>获取一个key中所有的field&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HVALS key&lt;/code>&lt;/td>
&lt;td>获取一个key中所有的value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HGETALL key&lt;/code>&lt;/td>
&lt;td>获取一个key中所有field和value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HINCRBY key field increment&lt;/code>&lt;/td>
&lt;td>给指定字段的value加上指定的increment数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>HINCRBYFLOAT key field increment&lt;/code>&lt;/td>
&lt;td>给指定字段的value加上指定的increment浮点数数值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="set">Set&lt;/h2>
&lt;p>&lt;code>Set&lt;/code> 类型是由字符串类型元素构成的无序集合，其元素必须是唯一的。由于 Redis 中的集合类型都是通过 HASH 表实现的，所以其添加、查找、删除的复杂度都是O(1)。&lt;/p>
&lt;p>Redis 中还给集合类型提供了求交集、并集、差集等操作。&lt;/p>
&lt;h3 id="实现方式-1">实现方式&lt;/h3>
&lt;p>有两种不同的实现方式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>intset&lt;/code> - 满足以下条件时：
&lt;ul>
&lt;li>集合中元素都是整数。&lt;/li>
&lt;li>元素个数少于 &lt;code>set-maxintset-entries(默认 512)&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>hashtable&lt;/code> - 不满足 intset 条件时&lt;/li>
&lt;/ul>
&lt;h3 id="命令-4">命令&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SADD key member1 [member2]&lt;/code>&lt;/td>
&lt;td>给集合添加一个或多个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SCARD key&lt;/code>&lt;/td>
&lt;td>返回集合的成员数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SISMEMBER key member&lt;/code>&lt;/td>
&lt;td>判断元素是否是集合的成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SMEMBERS key&lt;/code>&lt;/td>
&lt;td>返回集合中所有的成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SRANDMEMBER key [count]&lt;/code>&lt;/td>
&lt;td>随机返回集合中一个或多个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SREM key member1 [member2]&lt;/code>&lt;/td>
&lt;td>移除集合中的一个或多个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPOP key&lt;/code>&lt;/td>
&lt;td>随机移除并返回集合中的一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SMOVE source destination member&lt;/code>&lt;/td>
&lt;td>将一个元素member从source集合移动到destination集合&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SDIFF key1 [key2]&lt;/code>&lt;/td>
&lt;td>返回给定的所有集合的差集&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SDIFFSTORE destination key1 [key2]&lt;/code>&lt;/td>
&lt;td>返回给定的所有集合的差集，并存储到destination集合中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SINTER key1 [key2]&lt;/code>&lt;/td>
&lt;td>返回给定的所有集合的交集&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SINTERSTORE destination key1 [key2]&lt;/code>&lt;/td>
&lt;td>返回给定的所有集合的交集，并存储到destination集合中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SUNION key1 [key2]&lt;/code>&lt;/td>
&lt;td>返回给定的所有集合的并集&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SUNIONSTORE destination key1 [key2]&lt;/code>&lt;/td>
&lt;td>返回给定的所有集合的并集，并存储到destination集合中&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="sorted-set">Sorted Set&lt;/h2>
&lt;p>有序集合，使用 &lt;code>score&lt;/code> 分数进行排序，允许分数相同，不允许集合元素值相同。分数相同时，按照元素值进行排序。&lt;/p>
&lt;h3 id="实现方式-2">实现方式&lt;/h3>
&lt;p>有两种不同的实现方式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ziplist&lt;/code> - 满足以下条件时：
&lt;ul>
&lt;li>Set 键值对数量少于 128 个。&lt;/li>
&lt;li>每个元素的长度都小于 64 字节。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>skiplist&lt;/code> - 不满足 ziplist 条件时。&lt;/li>
&lt;/ul>
&lt;h3 id="命令-5">命令&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>ZADD key score1 member1 [score2 member2]&lt;/code>&lt;/td>
&lt;td>添加或更新一个或多个元素及其分数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZCARD key&lt;/code>&lt;/td>
&lt;td>获取集合中元素的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZCOUNT key min max&lt;/code>&lt;/td>
&lt;td>获取指定分数范围内元素的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZSCORE key member&lt;/code>&lt;/td>
&lt;td>获取某个元素的分数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZRANK key member&lt;/code>&lt;/td>
&lt;td>获取某个元素的排名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZLEXCOUNT key min max&lt;/code>&lt;/td>
&lt;td>获取指定区间内元素的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZRANGE key start stop [WITHSCORES]&lt;/code>&lt;/td>
&lt;td>返回指定排名区间内的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZRANGEBYLEX key min max [LIMIT offset count]&lt;/code>&lt;/td>
&lt;td>返回指定区间内的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZRANGEBYSCORE key min max [WITHSCORES][LIMIT]&lt;/code>&lt;/td>
&lt;td>返回指定分数区间内的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZINCRBY key increment member&lt;/code>&lt;/td>
&lt;td>给指定元素的分数加上increment数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZREM key member [member ...]&lt;/code>&lt;/td>
&lt;td>移除一个或多个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZREMRANGEBYRANK key start stop&lt;/code>&lt;/td>
&lt;td>移除排名区间内的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ZREMRANGEBYSCORE key min max&lt;/code>&lt;/td>
&lt;td>移除分数区间内的元素&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Redis 整体架构</title><link>https://wnanbei.github.io/post/redis-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/redis-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</guid><description>&lt;p>Redis 的性能、整体架构设计、单线程原因等。&lt;/p>
&lt;h2 id="性能">性能&lt;/h2>
&lt;p>根据官方数据，Redis 的 QPS 可以达到约 100000。使用 pipeline 批处理甚至可以达到 100W+。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>横轴是连接数&lt;/li>
&lt;li>纵轴是 QPS&lt;/li>
&lt;/ul>
&lt;h3 id="测试性能">测试性能&lt;/h3>
&lt;p>运行以下命令可以测试同时执行 10 万个请求时的性能：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ redis-benchmark -n &lt;span style="color:#ae81ff">100000&lt;/span> -q
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="高性能原因">高性能原因&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>纯内存 I/O&lt;/code>&lt;/p>
&lt;p>相较于其他基于磁盘的 DB，Redis 的纯内存操作有着天然的性能优势。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>I/O 多路复用&lt;/code>&lt;/p>
&lt;p>基于 &lt;code>epoll/select/kqueue&lt;/code> 等 I/O 多路复用技术，实现高吞吐的网络 I/O。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>单线程模型&lt;/code>&lt;/p>
&lt;p>保证了每个操作的原子性，避免了多线程频繁上下文切换，以及同步机制如锁带来的开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>高效的数据结构&lt;/code>&lt;/p>
&lt;ul>
&lt;li>全局哈希表，时间复杂度为 $O(1)$。&lt;/li>
&lt;li>根据实际存储的数据类型选择底层不同的数据结构，优化了读写速度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="整体架构">整体架构&lt;/h2>
&lt;p>首先需要明确的一点是，常说 Redis 是单线程，指的是 Redis 的数据主处理程序为单线程，在较高版本里，部分命令和网络 IO 部分已被更改为多线程执行：&lt;/p>
&lt;ol>
&lt;li>Redis v4.0（引入多线程处理异步任务）&lt;/li>
&lt;li>Redis v6.0（正式在网络模型中实现 I/O 多线程）&lt;/li>
&lt;/ol>
&lt;h3 id="架构">架构&lt;/h3>
&lt;h3 id="使用单线程原因">使用单线程原因&lt;/h3>
&lt;p>&lt;strong>官方回答：&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s not very frequent that CPU becomes your bottleneck with Redis, as usually Redis is either memory or network bound. For instance, using pipelining Redis running on an average Linux system can deliver even 1 million requests per second, so if your application mainly uses O(N) or O(log(N)) commands, it is hardly going to use too much CPU.&lt;/p>
&lt;/blockquote>
&lt;p>对于 Redis 这种完全的纯内存的操作来说，执行速度非常快，CPU 通常不会是性能瓶颈，因为大多数请求不是 CPU 密集型任务，而是 I/O 密集型。&lt;/p>
&lt;p>Redis 真正的性能瓶颈在于网络 I/O，也就是客户端和服务端之间的网络传输延迟，因此 Redis 选择了单线程的 I/O 多路复用来实现它的核心网络模型。&lt;/p>
&lt;p>&lt;strong>具体原因：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>避免过多的上下文切换开销&lt;/code>&lt;/p>
&lt;p>多线程调度过程中需要在 CPU 之间切换线程上下文 context，上下文的切换又涉及程序计数器、堆栈指针和程序状态字等一系列的寄存器置换、程序堆栈重置甚至是 CPU 高速缓存、TLB 快表的汰换。&lt;/p>
&lt;p>单一进程内多线程共享进程地址空间，因此线程上下文比之进程上下文要小得多，如果是跨进程调度，则需要切换掉整个进程地址空间。&lt;/p>
&lt;p>如果是单线程则可以规避进程内频繁的线程切换开销，因为程序始终运行在进程中单个线程内。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>避免同步机制的开销&lt;/code>&lt;/p>
&lt;p>如果 Redis 选择多线程模型，那么势必涉及到底层数据同步的问题，则必然会引入某些同步机制，比如锁。&lt;/p>
&lt;p>Redis 不仅提供了简单的 key-value 数据结构，还有 list、set 和 hash 等等其他丰富的数据结构，而不同的数据结构对同步访问的加锁粒度又不尽相同，可能会导致在操作数据过程中带来很多加锁解锁的开销，增加程序复杂度的同时还会降低性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>简单可维护&lt;/code>&lt;/p>
&lt;p>简单可维护性必然是 Redis 早期的核心准则之一，而引入多线程必然会导致代码的复杂度上升和可维护性下降。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="多线程异步操作">多线程异步操作&lt;/h3>
&lt;p>在 Redis v4.0 中，Redis 添加了一些多线程异步执行的命令。此举主要针对的是那些非常耗时的命令，通过将这些命令的执行进行异步化，避免阻塞单线程的事件循环。&lt;/p>
&lt;p>比如 &lt;code>DEL&lt;/code> 命令是用来删除掉一个或多个 key 储存的值，大多数情况下要删除的 key 并不大，所以可以很快执行完，但是如果你要删的是一个超大的键值对，里面有几百万个对象，那么这条命令可能会阻塞至少好几秒，又因为事件循环是单线程的，所以会阻塞后面的其他事件，导致 Redis 吞吐量下降。&lt;/p>
&lt;p>于是，在 Redis v4.0 之后增加了一些非阻塞命令如 &lt;code>UNLINK&lt;/code>、&lt;code>FLUSHALL ASYNC&lt;/code>、&lt;code>FLUSHDB ASYNC&lt;/code>。&lt;/p>
&lt;p>&lt;code>UNLINK&lt;/code> 命令是 &lt;code>DEL&lt;/code> 的异步版本，它不会同步删除数据，而只是把 key 从 keyspace 中暂时移除掉，然后将任务添加到一个异步队列，最后由后台线程去删除。不过如果用 &lt;code>UNLINK&lt;/code> 去删除一个很小的 key，用异步的方式反而开销更大，所以它会先计算一个开销的阈值，只有当这个值大于 64 才会使用异步的方式去删除 key，对于基本的数据类型如 List、Set、Hash，阈值就是其中存储的对象数量。&lt;/p>
&lt;p>除此之外，在 Redis v4.0 中，Redis 主线程启动后，会创建三个子线程来负责 AOF 日志写操作、键值对删除以及关闭文件描述符的异步执行。&lt;/p>
&lt;h3 id="io-多路复用">I/O 多路复用&lt;/h3>
&lt;p>Redis 内部实现了一个高性能的事件库：&lt;code>AE&lt;/code>，基于 epoll/select/kqueue/evport 四种事件驱动技术，实现 Linux/MacOS/FreeBSD/Solaris 多平台的高性能事件循环模型。&lt;/p>
&lt;p>Redis 的核心网络模型正式构筑在 AE 之上，包括 I/O 多路复用、各类处理器的注册绑定，都是基于此才得以运行。&lt;/p>
&lt;h2 id="多线程网络模型">多线程网络模型&lt;/h2>
&lt;h3 id="redis-单线程模型">Redis 单线程模型&lt;/h3>
&lt;p>从 Redis 的 v1.0 到 v6.0 版本之前，Redis 的核心网络模型一直是一个典型的单 &lt;code>Reactor&lt;/code> 模型：利用 epoll/select/kqueue 等多路复用技术，在单线程的事件循环中不断去处理事件（客户端请求），最后回写响应数据到客户端。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/redis/%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.png" >
&lt;img src="https://wnanbei.github.io/images/redis/%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.png"
loading="lazy"
alt="Redis单线程模型">
&lt;/a>
&lt;figcaption>Redis单线程模型&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>client&lt;/code>&lt;/p>
&lt;p>客户端对象，Redis 是典型的 CS 架构，客户端通过 socket 与服务端建立网络通道然后发送请求命令，服务端执行请求的命令并回复。&lt;/p>
&lt;p>Redis 使用结构体 client 存储客户端的所有相关信息，包括但不限于：&lt;/p>
&lt;ul>
&lt;li>封装的套接字连接 *conn&lt;/li>
&lt;li>当前选择的数据库指针 *db&lt;/li>
&lt;li>读入缓冲区 querybuf&lt;/li>
&lt;li>写出缓冲区 buf&lt;/li>
&lt;li>写出数据链表 reply&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>aeApiPoll&lt;/code>&lt;/p>
&lt;p>I/O 多路复用 API，是基于 epoll_wait/select/kevent 等系统调用的封装，监听等待读写事件触发，然后处理，它是事件循环（Event Loop）中的核心函数，是事件驱动得以运行的基础。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>acceptTcpHandler&lt;/code>&lt;/p>
&lt;p>连接应答处理器，底层使用系统调用 accept 接受来自客户端的新连接，并为新连接注册绑定命令读取处理器，以备后续处理新的客户端 TCP 连接；除了这个处理器，还有对应的 acceptUnixHandler 负责处理 Unix Domain Socket 以及 acceptTLSHandler 负责处理 TLS 加密连接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>readQueryFromClient&lt;/code>&lt;/p>
&lt;p>命令读取处理器，解析并执行客户端的请求命令。
beforeSleep：事件循环中进入 aeApiPoll 等待事件到来之前会执行的函数，其中包含一些日常的任务，比如把 client-&amp;gt;buf 或者 client-&amp;gt;reply （后面会解释为什么这里需要两个缓冲区）中的响应写回到客户端，持久化 AOF 缓冲区的数据到磁盘等，相对应的还有一个 afterSleep 函数，在 aeApiPoll 之后执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>sendReplyToClient&lt;/code>&lt;/p>
&lt;p>命令回复处理器，当一次事件循环之后写出缓冲区中还有数据残留，则这个处理器会被注册绑定到相应的连接上，等连接触发写就绪事件时，它会将写出缓冲区剩余的数据回写到客户端。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Go 互斥锁 sync.Mutex</title><link>https://wnanbei.github.io/post/go-%E4%BA%92%E6%96%A5%E9%94%81-sync.mutex/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%BA%92%E6%96%A5%E9%94%81-sync.mutex/</guid><description>&lt;p>&lt;code>sync.Mutex&lt;/code> 是一个互斥锁，默认为零值时为开锁状态。&lt;/p>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="使用方式">使用方式&lt;/h3>
&lt;p>Lock 方法锁住 m，如果 m 已经加锁，则阻塞直到 m 解锁。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Mutex&lt;/span>) &lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unlock 方法解锁 m，如果 m 未加锁会导致运行时错误。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Mutex&lt;/span>) &lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数据结构">数据结构&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Mutex&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>
&lt;span style="color:#a6e22e">sema&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>
}
&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">mutexLocked&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">iota&lt;/span> &lt;span style="color:#75715e">// mutex is locked
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">mutexWoken&lt;/span>
&lt;span style="color:#a6e22e">mutexStarving&lt;/span>
&lt;span style="color:#a6e22e">mutexWaiterShift&lt;/span> = &lt;span style="color:#66d9ef">iota&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>state&lt;/code>&lt;/strong>&lt;/p>
&lt;p>是一个公用字段，共 32 位。其中低三位分别表示：&lt;/p>
&lt;ul>
&lt;li>Mutex 是否已被加锁&lt;/li>
&lt;li>是否有某个唤醒的 G 要尝试获取锁&lt;/li>
&lt;li>Mutex 是否处于饥饿状态&lt;/li>
&lt;/ul>
&lt;p>高 29 位则表示等待锁的 G 数量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>sema&lt;/code>&lt;/strong>&lt;/p>
&lt;p>sema 是一个信号量，用来实现阻塞/唤醒申请锁的 G。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="执行流程">执行流程&lt;/h3>
&lt;p>&lt;strong>Mutex Lock 上锁流程：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>非饥饿模式下，新获取锁的 G 将会进入自旋，去竞争锁。为了避免自旋消耗太多 cpu，G 最多会自旋 4 次,每次空转 30 个 cpu 时钟周期；&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncMutexLock.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncMutexLock.webp"
loading="lazy"
alt="syncMutexLock">
&lt;/a>
&lt;figcaption>syncMutexLock&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>Mutex UnLock 解锁流程：&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncMutexUnlock.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncMutexUnlock.webp"
loading="lazy"
alt="syncMutexUnlock">
&lt;/a>
&lt;figcaption>syncMutexUnlock&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="饥饿状态">饥饿状态&lt;/h3>
&lt;p>互斥锁有两种状态：正常状态和饥饿状态。&lt;/p>
&lt;p>&lt;strong>正常状态：&lt;/strong>&lt;/p>
&lt;p>所有等待锁的 G 按照 FIFO 顺序等待。&lt;/p>
&lt;ul>
&lt;li>刚唤醒的 G 不会直接拥有锁，而是会和新请求锁的 G 去竞争锁；&lt;/li>
&lt;li>新请求锁的 G 具有一个优势：它正在 CPU 上执行；&lt;/li>
&lt;li>可能有好几个 G 同时在新请求锁，所以刚唤醒的 G 有很大可能在锁竞争中失败；&lt;/li>
&lt;li>在这种情况下，这个被唤醒的 G 在没有获得锁之后会加入到等待队列的最前面。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>饥饿状态：&lt;/strong>&lt;/p>
&lt;p>如果一个等待的 G 超过 &lt;code>1ms&lt;/code> 没有获取锁，那么它将会把锁转变为饥饿模式。&lt;/p>
&lt;ul>
&lt;li>饥饿模式下，锁的所有权将从执行 unlock 的 G 直接交给等待队列中的第一个 G;&lt;/li>
&lt;li>新来的 G 将不能再去尝试竞争锁，即使锁是 unlock 状态，也不会去尝试自旋操作，而是放在等待队列的尾部;&lt;/li>
&lt;li>如果一个等待的 G 获取了锁，并且满足以下其中一个条件,那么该 G 会将锁的状态转换为正常状态:
&lt;ol>
&lt;li>它是队列中的最后一个 G；&lt;/li>
&lt;li>它等待的时间小于 1ms；&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;p>正常模式具有较好的性能，因为 G 可以连续多次尝试获取锁，即使还有其他的阻塞等待锁的 G，也不需要进入休眠阻塞。&lt;/p>
&lt;p>饥饿模式的作用是阻止尾部延迟的现象。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;ol>
&lt;li>Mutex 不可被复制；&lt;/li>
&lt;li>就算在较低 QPS 下，Mutex 的锁竞争也会比较激烈。如果一定要使用 Mutex，一定要采用取模分片的方式去使用其中一个 Mutex 进行资源控制，降低锁粒度；&lt;/li>
&lt;li>不同 G 可以 Unlock 同一个 Mutex，但是 Unlock 一个无锁状态的 Mutex 会报错；&lt;/li>
&lt;li>Mutex 不是可重入锁，如果连续两次 Lock 操作，会直接死锁。&lt;/li>
&lt;/ol></description></item><item><title>Go 原子操作 atomic</title><link>https://wnanbei.github.io/post/go-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-atomic/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-atomic/</guid><description>&lt;p>&lt;code>atomic&lt;/code> 包封装了系统底层的原子操作。官方建议尽量少使用此包的原子操作，尽量遵循通过通信分享内存，而不是通过分享内存来通信的原则。&lt;/p>
&lt;p>这个包的方法有以下特点：&lt;/p>
&lt;ul>
&lt;li>方法操作的都是 &lt;code>int&lt;/code> 系列类型或指针。&lt;/li>
&lt;li>操作的数据需要其地址。&lt;/li>
&lt;/ul>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="加法">加法&lt;/h3>
&lt;p>原子性的将 &lt;code>delta&lt;/code> 与 &lt;code>addr&lt;/code> 相加，并返回新值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddInt32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int32&lt;/span>, &lt;span style="color:#a6e22e">delta&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>) (&lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddInt64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">delta&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) (&lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddUint32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint32&lt;/span>, &lt;span style="color:#a6e22e">delta&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>) (&lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddUint64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#a6e22e">delta&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>) (&lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AddUintptr&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">delta&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) (&lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>int&lt;/code> 时传入负数就意味着减法，但 &lt;code>uint&lt;/code> 类型限制了数据的符号，所以如果要减法需要利用二进制补码机制：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">AddUint32&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>, ^uint32(&lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>))
&lt;span style="color:#a6e22e">AddUint64&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>, ^uint64(&lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>每次递减 &lt;code>1&lt;/code> 可以这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">AddUint32&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>, ^uint32(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;span style="color:#a6e22e">AddUint64&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>, ^uint64(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="读取">读取&lt;/h3>
&lt;p>原子性的读取 &lt;code>addr&lt;/code> 的值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoadInt32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int32&lt;/span>) (&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoadInt64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>) (&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoadUint32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint32&lt;/span>) (&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoadUint64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint64&lt;/span>) (&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoadUintptr&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uintptr&lt;/span>) (&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoadPointer&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>) (&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="存储">存储&lt;/h3>
&lt;p>原子性的将值 &lt;code>val&lt;/code> 存储到 &lt;code>addr&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StoreInt32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int32&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StoreInt64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StoreUint32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint32&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StoreUint64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StoreUintptr&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StorePointer&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="交换">交换&lt;/h3>
&lt;p>原子性的将值 &lt;code>new&lt;/code> 交换给 &lt;code>addr&lt;/code>，并返回旧值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SwapInt32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int32&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>) (&lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SwapInt64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) (&lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SwapUint32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint32&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>) (&lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SwapUint64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>) (&lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SwapUintptr&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) (&lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SwapPointer&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>) (&lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先比较再交换，原子性的先进行比较，如果 &lt;code>addr&lt;/code> 与 &lt;code>old&lt;/code> 值相同，则将 &lt;code>new&lt;/code> 交换给 &lt;code>addr&lt;/code>，返回的 &lt;code>swapped&lt;/code> 表示是否进行了交换。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CompareAndSwapInt32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int32&lt;/span>, &lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>) (&lt;span style="color:#a6e22e">swapped&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CompareAndSwapInt64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) (&lt;span style="color:#a6e22e">swapped&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CompareAndSwapUint32&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint32&lt;/span>, &lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>) (&lt;span style="color:#a6e22e">swapped&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CompareAndSwapUint64&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>) (&lt;span style="color:#a6e22e">swapped&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CompareAndSwapUintptr&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) (&lt;span style="color:#a6e22e">swapped&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CompareAndSwapPointer&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>, &lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>) (&lt;span style="color:#a6e22e">swapped&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CompareAndSwapPointer&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>, &lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">new&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>) (&lt;span style="color:#a6e22e">swapped&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="value">Value&lt;/h3>
&lt;p>&lt;code>Value&lt;/code> 是 &lt;code>atomic&lt;/code> 包中用来存储任意类型值的容器。主要有两个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Load&lt;/span>() (&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#75715e">// 获取 v 的值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#75715e">// 存储 v 的值
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例1，此例用于一个经常读取，但很少写入的数据结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Map&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(make(&lt;span style="color:#a6e22e">Map&lt;/span>))
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mu&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span> &lt;span style="color:#75715e">// 仅仅用于写入
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// 不需要进一步同步的读取函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#a6e22e">m1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>().(&lt;span style="color:#a6e22e">Map&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">m1&lt;/span>[&lt;span style="color:#a6e22e">key&lt;/span>]
}
&lt;span style="color:#75715e">// 不需要进一步同步的写入函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">insert&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#a6e22e">mu&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>() &lt;span style="color:#75715e">// 保证与其他潜在写入者同步
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">mu&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;span style="color:#a6e22e">m1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>().(&lt;span style="color:#a6e22e">Map&lt;/span>) &lt;span style="color:#75715e">// 读取数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">m2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#a6e22e">Map&lt;/span>) &lt;span style="color:#75715e">// 创建一个新 map
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">m1&lt;/span> {
&lt;span style="color:#a6e22e">m2&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#75715e">// 复制所有数据到新的 map 中
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#a6e22e">m2&lt;/span>[&lt;span style="color:#a6e22e">key&lt;/span>] = &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#75715e">// 写入更新数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#a6e22e">m2&lt;/span>) &lt;span style="color:#75715e">// 原子性的将这个对象替换为更新以后的 map
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 这一点开始后所有新的读取者都会读取新版的数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 旧版本将在读取者（如果存在）读取完毕后被垃圾回收
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例2，此例用于周期性的更新数据，并传播给使用者：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">loadConfig&lt;/span>() &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span> { &lt;span style="color:#75715e">// 加载 config 数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">requests&lt;/span>() &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> { &lt;span style="color:#75715e">// 进来的请求
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#a6e22e">loadConfig&lt;/span>()) &lt;span style="color:#75715e">// 存储初始 config 数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#75715e">// 每十秒加载一次 config 数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#a6e22e">loadConfig&lt;/span>())
}
}()
&lt;span style="color:#75715e">// 使用最新的 config 数据处理进来的请求
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">requests&lt;/span>() {
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>()
&lt;span style="color:#75715e">// 用 c 处理请求
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>
}
}()
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 对象池 sync.Pool</title><link>https://wnanbei.github.io/post/go-%E5%AF%B9%E8%B1%A1%E6%B1%A0-sync.pool/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AF%B9%E8%B1%A1%E6%B1%A0-sync.pool/</guid><description>&lt;p>sync.Pool 是一个协程安全的内存池。主要用于增加临时对象的内存复用率，减少内存分配和 GC STW 的开销。、&lt;/p>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="使用方式">使用方式&lt;/h3>
&lt;p>&lt;strong>节选自 gin 的例子：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">engine&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Engine&lt;/span>) &lt;span style="color:#a6e22e">ServeHTTP&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">engine&lt;/span>.&lt;span style="color:#a6e22e">pool&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>().(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>)
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">writermem&lt;/span>.&lt;span style="color:#a6e22e">reset&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>)
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span> = &lt;span style="color:#a6e22e">req&lt;/span>
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">reset&lt;/span>()
&lt;span style="color:#a6e22e">engine&lt;/span>.&lt;span style="color:#a6e22e">handleHTTPRequest&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;span style="color:#a6e22e">engine&lt;/span>.&lt;span style="color:#a6e22e">pool&lt;/span>.&lt;span style="color:#a6e22e">Put&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>Get&lt;/code> 方法会获取一个 Pool 已经存在的对象，如果没有，那么就调用初始化时定义的 New 方法来初始化一个对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Put&lt;/code> 方法会把对象放回池子。调用之后仅把这个对象放回池子，池子里面的&lt;strong>对象什么时候真正释放不受外部控制&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="重点">重点&lt;/h3>
&lt;ol>
&lt;li>sync.Pool 是线程安全的，但 Pool.New 不是线程安全的，此函数可能被并发调用；&lt;/li>
&lt;li>sync.Pool 不能被复制；&lt;/li>
&lt;li>sync.Pool 内部元素的回收被 GC 影响，不适合于做连接池，因为连接池需要自己管理对象的生命周期；&lt;/li>
&lt;li>不要对 Get 得到的对象有任何假设，更好的做法是归还对象时，将对象&lt;strong>清空&lt;/strong>；&lt;/li>
&lt;li>sync.Pool 不可以指定⼤⼩，⼤⼩只受制于 GC 临界值；&lt;/li>
&lt;li>在加入 &lt;code>victim&lt;/code> 机制前，sync.Pool 里对象的最⼤缓存时间是一个 GC 周期，当 GC 开始时，没有被引⽤的对象都会被清理掉。加入 &lt;code>victim&lt;/code> 机制后，最大缓存时间为两个 GC 周期；&lt;/li>
&lt;li>sync.Pool 的最底层使用切片加链表来实现双端队列，并将缓存的对象存储在切片中。&lt;/li>
&lt;/ol>
&lt;h3 id="数据结构">数据结构&lt;/h3>
&lt;p>以下是 sync.Pool 的整体结构：&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncPool.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncPool.webp"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>&lt;code>local&lt;/code>&lt;/strong>&lt;/p>
&lt;p>sync.Pool 的 local 是一个切片，存储了多个 &lt;code>poolLocal&lt;/code> 对象，每个 P 都有一个专属的 poolLocal，这样可以使 P 在执行时基本只需要访问自己拥有的 poolLocal。&lt;/p>
&lt;p>&lt;strong>&lt;code>poolLocalInternal&lt;/code>&lt;/strong>&lt;/p>
&lt;p>每个 poolLocal 内部都有一个 **private **和 &lt;strong>shared&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>private 区只存放一个对象，因为每个 P 同时执行的 G 只有一个，所以在 private 写入和取出对象是不需要加锁的。&lt;/li>
&lt;li>shared 区是一个双端链表，存放了多个对象，此区域的对象可以被其他 P 获取到。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>poolChain&lt;/code>&lt;/strong>&lt;/p>
&lt;p>在 go1.13 优化过后，&lt;code>poolChain&lt;/code> 不再使用加锁的切片，而是使用双向链表，每个链表节点指向一个无锁环形队列。&lt;/p>
&lt;p>此数据结构逻辑为单生产者，多消费者。&lt;/p>
&lt;ul>
&lt;li>只能由所属的 P 进行生产，并只能放在队列的头部。由于每个 P 任意时刻只有一个 G 被运行，所以存放对象不需要加锁。&lt;/li>
&lt;li>消费可以由所有的 P 进行消费。
&lt;ul>
&lt;li>由所属的 P 来 Get 时，从队列头部取，也不需要加锁，理由同上。&lt;/li>
&lt;li>由其他 P 来 Get 时，只能从队列尾部取，由于其他 P 可能有多个，所以使用 CAS 来实现无锁。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="执行流程">执行流程&lt;/h3>
&lt;p>&lt;strong>Pool.Get 执行流程：&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncPoolGet.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncPoolGet.webp"
loading="lazy"
alt="syncPoolGet">
&lt;/a>
&lt;figcaption>syncPoolGet&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>Pool.Put 执行流程：&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncPoolPut.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncPoolPut.webp"
loading="lazy"
alt="syncPoolPut">
&lt;/a>
&lt;figcaption>syncPoolPut&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="victim-机制">victim 机制&lt;/h3>
&lt;p>在 &lt;code>Go 1.13&lt;/code> 版本中，新增了 victim 机制来优化 sync.Pool 的性能。&lt;/p>
&lt;p>在旧版本中，每次 GC 都会将 Pool 中所有闲置的对象全部回收。此时如果存在大量的闲置对象，那么 GC 的 STW 压力会骤然变大，消耗的时间也会变长，重新 New 创建对象的消耗也会变大。&lt;/p>
&lt;p>victim 机制，则是在 GC 时，将 &lt;code>local&lt;/code> 中的所有对象移动到 &lt;code>victim&lt;/code> 中，在下一次 GC 时，再删除掉 victim 中的元素，并又一次将 local 中的对象移动到 victim 中。&lt;/p>
&lt;p>以下是新版的 &lt;strong>Pool GC 执行流程：&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncPoolGC.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncPoolGC.webp"
loading="lazy"
alt="syncPoolGC">
&lt;/a>
&lt;figcaption>syncPoolGC&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>在此过程中，&lt;code>Get&lt;/code> 如果在 local 中找不到对象，会去 victim 中查找，Put 会将取出的对象重新放回 local 中。&lt;/p>
&lt;p>此机制使得 sync.Pool 中闲置对象的最大缓存时间，从一个 GC 周期变成了两个 GC 周期。&lt;/p></description></item><item><title>Go 并发安全的 sync.Map</title><link>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84-sync.map/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84-sync.map/</guid><description>&lt;p>&lt;code>sync.Map&lt;/code> 是标准库 &lt;code>sync&lt;/code> 中实现的并发安全的 map。&lt;/p>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="使用方式">使用方式&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">操作&lt;/th>
&lt;th style="text-align:left">普通 map&lt;/th>
&lt;th style="text-align:left">sync.Map&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">map 获取某个 key&lt;/td>
&lt;td style="text-align:left">map[1]&lt;/td>
&lt;td style="text-align:left">sync.Load(1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">map 添加元素&lt;/td>
&lt;td style="text-align:left">map[1] = 10&lt;/td>
&lt;td style="text-align:left">sync.Store(1, 10)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">map 删除一个 key&lt;/td>
&lt;td style="text-align:left">delete(map, 1)&lt;/td>
&lt;td style="text-align:left">sync.Delete(1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">遍历 map&lt;/td>
&lt;td style="text-align:left">for&amp;hellip;range&lt;/td>
&lt;td style="text-align:left">sync.Range()&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>sync.Map 两个特有的函数:&lt;/p>
&lt;ul>
&lt;li>&lt;code>LoadOrStore&lt;/code> - sync.Map 存在就返回，不存在就插入&lt;/li>
&lt;li>&lt;code>LoadAndDelet&lt;/code> - sync.Map 获取某个 key，如果存在的话，同时删除这个 key&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>例子：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">syncMap&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Map&lt;/span>
&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;11&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">11&lt;/span>)
&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;22&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">22&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;11&amp;#34;&lt;/span>)) &lt;span style="color:#75715e">// 11
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;33&amp;#34;&lt;/span>)) &lt;span style="color:#75715e">// 空
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">LoadOrStore&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;33&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">33&lt;/span>)) &lt;span style="color:#75715e">// 33
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;33&amp;#34;&lt;/span>)) &lt;span style="color:#75715e">// 33
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">LoadAndDelete&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;33&amp;#34;&lt;/span>)) &lt;span style="color:#75715e">// 33
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;33&amp;#34;&lt;/span>)) &lt;span style="color:#75715e">// 空
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">syncMap&lt;/span>.&lt;span style="color:#a6e22e">Range&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;key:%v value:%v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数据结构">数据结构&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Map&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">mu&lt;/span> &lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;span style="color:#a6e22e">read&lt;/span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#75715e">// readOnly read map
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">dirty&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">interface&lt;/span>{}]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">entry&lt;/span> &lt;span style="color:#75715e">// dirty map
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">misses&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;code>read&lt;/code>&lt;/strong>&lt;/p>
&lt;p>是 &lt;code>atomic.Value&lt;/code> 类型，主要负责并发读取。使用 lock free 的方式保证 load/store 的原子性。&lt;/p>
&lt;ul>
&lt;li>如果需要更新 &lt;code>read&lt;/code>，则需要加锁保护。对于 read 中存储的 entry 字段，可能会被并发地 CAS 更新。&lt;/li>
&lt;li>如果要更新一个之前已被删除的 entry，则需要先将其状态从 expunged 改为 nil，再拷贝到 dirty 中，然后再更新。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>dirty&lt;/code>&lt;/strong>&lt;/p>
&lt;p>是一个非线程安全的原始 map。使用 &lt;code>mutex&lt;/code> 保证并发安全。&lt;/p>
&lt;p>dirty 包含新写入的 key，并且包含 &lt;code>read&lt;/code> 中的所有未被删除的 key。这样，可以快速地将 &lt;code>dirty&lt;/code> 提升为 &lt;code>read&lt;/code> 对外提供服务。&lt;/p>
&lt;p>如果 &lt;code>dirty&lt;/code> 为 nil，那么下一次写入时，会新建一个新的 &lt;code>dirty&lt;/code>，这个初始的 &lt;code>dirty&lt;/code> 是 &lt;code>read&lt;/code> 的一个拷贝，但除掉了其中已被删除的 key。&lt;/p>
&lt;ul>
&lt;li>当 dirty 为 nil 的时候，read 就代表 map 所有的数据。&lt;/li>
&lt;li>当 dirty 不为 nil 的时候，dirty 代表 map 所有的数据。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>misses&lt;/code>&lt;/strong>&lt;/p>
&lt;p>用于记录未命中 read 缓存的次数。&lt;/p>
&lt;ul>
&lt;li>每次在 read 中没找到数据，而在 dirty 中找到，则这个数字加 1。&lt;/li>
&lt;li>当 misses 大于 dirty 的数量时，会将 dirty 的数据整体复制到 read，并清空 dirty，此操作时间复杂度为 O(N)。&lt;/li>
&lt;/ul>
&lt;h3 id="使用场景">使用场景&lt;/h3>
&lt;p>sync.Map 里面有两个普通 map，read map 主要负责读，dirty map 负责读和写（加锁）。&lt;/p>
&lt;p>在读多写少的场景下，read map 的值基本不发生变化，可以让 read map 做到无锁操作，就减少了使用 &lt;code>Mutex + Map&lt;/code> 必须的加锁/解锁环节，因此也就提高了性能。&lt;/p>
&lt;p>如果某些 key 写操作特别频繁，sync.Map 基本就退化成了 &lt;code>Mutex + Map&lt;/code>，甚至有可能性能不如 Mutex + Map。&lt;/p>
&lt;p>所以 sync.Map 适用于以下场景：&lt;/p>
&lt;ul>
&lt;li>读多写少&lt;/li>
&lt;li>写操作多，但是修改的 key 和读取的 key 特别不重合。&lt;/li>
&lt;/ul>
&lt;h3 id="执行流程">执行流程&lt;/h3>
&lt;p>&lt;strong>sync.Map.Load() 取出对象流程：&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncMapLoad.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncMapLoad.webp"
loading="lazy"
alt="syncMapLoad">
&lt;/a>
&lt;figcaption>syncMapLoad&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>sync.Map.Store() 插入对象流程：&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncMapStore.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncMapStore.webp"
loading="lazy"
alt="syncMapStore">
&lt;/a>
&lt;figcaption>syncMapStore&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>sync.Map.LoadAndDelete() 删除对象流程：&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/go/syncMapDelete.webp" >
&lt;img src="https://wnanbei.github.io/images/go/syncMapDelete.webp"
loading="lazy"
alt="syncMapDelete">
&lt;/a>
&lt;figcaption>syncMapDelete&lt;/figcaption>
&lt;/figure>&lt;/p></description></item><item><title>Go 标准库 sync.WaitGroup</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-sync.waitgroup/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-sync.waitgroup/</guid><description/></item><item><title>Go 读写锁 sync.RWMutex</title><link>https://wnanbei.github.io/post/go-%E8%AF%BB%E5%86%99%E9%94%81-sync.rwmutex/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E8%AF%BB%E5%86%99%E9%94%81-sync.rwmutex/</guid><description>&lt;p>&lt;code>sync.RWMutex&lt;/code> 是一个读写锁，在读多写少的场景中，比 Mutex 的并发能力有很大的提升。&lt;/p>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="使用方式">使用方式&lt;/h3>
&lt;p>读写锁的读锁与写锁、写锁与写锁互斥，读锁与读锁之间互不影响。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rw&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RWMutex&lt;/span>) &lt;span style="color:#a6e22e">Lock&lt;/span> &lt;span style="color:#75715e">// 写锁加锁
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rw&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RWMutex&lt;/span>) &lt;span style="color:#a6e22e">Unlock&lt;/span> &lt;span style="color:#75715e">// 写锁解锁
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rw&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RWMutex&lt;/span>) &lt;span style="color:#a6e22e">RLock&lt;/span> &lt;span style="color:#75715e">// 读锁加锁
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rw&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RWMutex&lt;/span>) &lt;span style="color:#a6e22e">RUnlock&lt;/span> &lt;span style="color:#75715e">// 读锁解锁
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数据结构">数据结构&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">RWMutex&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">Mutex&lt;/span> &lt;span style="color:#75715e">// held if there are pending writers
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">writerSem&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span> &lt;span style="color:#75715e">// semaphore for writers to wait for completing readers
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">readerSem&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span> &lt;span style="color:#75715e">// semaphore for readers to wait for completing writers
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">readerCount&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> &lt;span style="color:#75715e">// number of pending readers
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">readerWait&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> &lt;span style="color:#75715e">// number of departing readers
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;code>w&lt;/code>&lt;/strong> - 用互斥锁解决多个 writer 的竞争。&lt;/p>
&lt;ul>
&lt;li>当有 G 获取写锁后，会阻塞其他 G 的写操作。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>writerSem&lt;/code>&lt;/strong> - 写操作的信号量。&lt;/p>
&lt;p>&lt;strong>&lt;code>readerSem&lt;/code>&lt;/strong> - 读操作的信号量。&lt;/p>
&lt;p>&lt;strong>&lt;code>readerCount&lt;/code>&lt;/strong> - 当前读操作的数量，以及是否有写操作在等待。&lt;/p>
&lt;ul>
&lt;li>每一次获取读锁，都会将此数量加 1，如果此数量为负数，说明有 G 获取了写锁，当前 G 会陷入休眠等锁释放。&lt;/li>
&lt;li>每一次释放读锁，都会将此数量减 1。&lt;/li>
&lt;li>获取写锁时，会阻塞后续的读操作，并休眠等待当前正在进行的读操作执行完毕。&lt;/li>
&lt;li>释放写锁时，会将此数量变回正数，释放读锁。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>readerWait&lt;/code>&lt;/strong> - 写操作请求锁时，需要等待完成的读操作数量。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>读写互斥锁在互斥锁之上提供了额外的更细粒度的控制，能够在读操作远远多于写操作时提升性能。&lt;/p></description></item><item><title>MySQL Join 连接详解</title><link>https://wnanbei.github.io/post/mysql-join-%E8%BF%9E%E6%8E%A5%E8%AF%A6%E8%A7%A3/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mysql-join-%E8%BF%9E%E6%8E%A5%E8%AF%A6%E8%A7%A3/</guid><description>&lt;p>在 MySQL 中，不同的 Join 语句会使用不同的算法扫描数据。&lt;/p>
&lt;p>直接使用 Join 时，MySQL 的优化器会自动选定 Join 的驱动表，如果使用 &lt;code>straight_join&lt;/code> 可以指定前表为驱动表。&lt;/p>
&lt;h2 id="执行流程">执行流程&lt;/h2>
&lt;h3 id="index-nested-loop-join">Index Nested-Loop Join&lt;/h3>
&lt;p>当可以用上被驱动表的索引时，会使用 &lt;code>Index Nested-Loop Join&lt;/code> 算法，简称 &lt;code>NLJ&lt;/code>。&lt;/p>
&lt;p>执行流程：&lt;/p>
&lt;ol>
&lt;li>遍历并取出 t1 驱动表中符合条件的数据。&lt;/li>
&lt;li>根据取出数据的 ON 的条件值，去 t2 被驱动表中查找满足条件的数据。&lt;/li>
&lt;/ol>
&lt;p>由于查询 t2 被驱动表使用的是索引，所以 NLJ 的性能良好，比拆分成多条单表 SQL 性能更好。&lt;/p>
&lt;h3 id="block-nested-loop-join">Block Nested-Loop Join&lt;/h3>
&lt;p>当无法使用被驱动表上的索引时，需要全表扫描被驱动表，此时 MySQL 会使用 &lt;code>Block Nested-Loop Join&lt;/code>，简称 &lt;code>BNL&lt;/code>。&lt;/p>
&lt;p>执行流程：&lt;/p>
&lt;ol>
&lt;li>把表 t1 需要用到的数据列读入线程内存 &lt;code>join_buffer&lt;/code> 中。&lt;/li>
&lt;li>扫描表 t2，把表 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回。&lt;/li>
&lt;/ol>
&lt;p>使用 BNL 与直接全表扫描，扫描的行数基本是一样的，但是 BNL 在内存中进行判断，性能会更好。&lt;/p>
&lt;p>由于有可能 join_buffer 放不下驱动表，BNL 会将驱动表分块放入 join_buffer，对比完被驱动表以后换下一块驱动表，这样会导致 Join 性能降低很多，如果遇到这种情况，可以增大 &lt;code>join_buffer_size&lt;/code> 的大小。&lt;/p>
&lt;h2 id="准则">准则&lt;/h2>
&lt;h3 id="是否可以使用-join">是否可以使用 Join&lt;/h3>
&lt;ol>
&lt;li>如果可以使用 NLJ，则可以使用 Join 语句，比拆分成多条单表 SQL 性能更好。&lt;/li>
&lt;li>如果只能使用 BNL，则会占用大量系统资源，此情况避免使用 Join。&lt;/li>
&lt;/ol>
&lt;h3 id="join-使用准则">Join 使用准则&lt;/h3>
&lt;ol>
&lt;li>Join 关联字段必须建索引。&lt;/li>
&lt;li>使用小表为驱动表。&lt;/li>
&lt;/ol>
&lt;h2 id="优化">优化&lt;/h2>
&lt;h3 id="mrr">MRR&lt;/h3>
&lt;h3 id="bka">BKA&lt;/h3></description></item><item><title>MySQL 中的锁</title><link>https://wnanbei.github.io/post/mysql-%E4%B8%AD%E7%9A%84%E9%94%81/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mysql-%E4%B8%AD%E7%9A%84%E9%94%81/</guid><description>&lt;p>根据加锁的范围，MySQL 的锁大致可以分成三类：&lt;/p>
&lt;ol>
&lt;li>全局锁&lt;/li>
&lt;li>表锁&lt;/li>
&lt;li>行锁&lt;/li>
&lt;/ol>
&lt;p>根据加锁的方式，锁通常分为两类：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>读锁（read lock），也叫共享锁（shared lock）&lt;/p>
&lt;p>针对同一份数据，多个读操作可以同时进行而不会互相影响（select），只会阻塞写操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写锁（write lock），也叫排他锁（exclusive lock）&lt;/p>
&lt;p>当前操作没完成之前，会阻塞其它读和写操作（update、insert、delete）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="全局锁">全局锁&lt;/h2>
&lt;p>MySQL 提供一个加全局读锁的方法，命令是 &lt;code>Flush tables with read lock (FTWRL)&lt;/code>。&lt;/p>
&lt;p>此命令可以让整个库处于只读状态，之后其他线程的以下语句会被阻塞：&lt;/p>
&lt;ul>
&lt;li>数据更新语句（数据的增删改）&lt;/li>
&lt;li>数据定义语句（包括建表、修改表结构等）&lt;/li>
&lt;li>更新类事务的提交语句&lt;/li>
&lt;/ul>
&lt;p>全局锁的典型使用场景是做全库逻辑备份。&lt;/p>
&lt;h2 id="表锁">表锁&lt;/h2>
&lt;p>表锁的语法是 &lt;code>lock tables … read/write&lt;/code>。可以用 &lt;code>unlock tables&lt;/code> 主动释放锁，也可以在客户端断开的时候自动释放。&lt;/p>
&lt;p>注：lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。&lt;/p>
&lt;h3 id="特点">特点&lt;/h3>
&lt;ul>
&lt;li>对整张表加锁&lt;/li>
&lt;li>开销小&lt;/li>
&lt;li>加锁快&lt;/li>
&lt;li>无死锁&lt;/li>
&lt;li>锁粒度大，发生锁冲突概率大，并发性低&lt;/li>
&lt;/ul>
&lt;h2 id="mdl-元数据锁">MDL 元数据锁&lt;/h2>
&lt;p>元数据锁（&lt;code>metadata lock&lt;/code>）是一种表级锁。&lt;/p>
&lt;p>MDL 的作用是，确保读取数据时，表结构不会被修改，保证读写的正确性。MDL 不需要显式使用，每执行一条 DML、DDL 语句时都会申请 MDL 锁。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对表做增删改查操作的时候，加 MDL 读锁&lt;/p>
&lt;p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对表做结构变更操作的时候，加 MDL 写锁&lt;/p>
&lt;p>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="特点-1">特点&lt;/h3>
&lt;ul>
&lt;li>事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。&lt;/li>
&lt;li>MDL 锁实现于 MySQL 的 server 层。&lt;/li>
&lt;li>申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁。&lt;/li>
&lt;/ul>
&lt;h3 id="版本">版本&lt;/h3>
&lt;ul>
&lt;li>MySQL 5.5 版本中引入 MDL&lt;/li>
&lt;/ul>
&lt;h2 id="行锁">行锁&lt;/h2>
&lt;p>MySQL 行锁由引擎层实现，InnoDB 支持行锁，MyISAM 不支持。&lt;/p>
&lt;p>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。&lt;/p>
&lt;h3 id="特点-2">特点&lt;/h3>
&lt;ul>
&lt;li>对一行数据加锁&lt;/li>
&lt;li>开销大&lt;/li>
&lt;li>加锁慢&lt;/li>
&lt;li>会出现死锁&lt;/li>
&lt;li>锁粒度小，发生锁冲突概率最低，并发性高&lt;/li>
&lt;/ul>
&lt;h3 id="优化">优化&lt;/h3>
&lt;ol>
&lt;li>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。&lt;/li>
&lt;/ol>
&lt;h2 id="死锁">死锁&lt;/h2>
&lt;p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。&lt;/p>
&lt;h3 id="处理策略">处理策略&lt;/h3>
&lt;p>出现死锁以后，有两种策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>直接进入等待，直到超时。&lt;/strong>&lt;/p>
&lt;p>这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。&lt;/p>
&lt;p>在 InnoDB 中，innodb_lock_wait_timeout 的默认值是 50s，意味着当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。&lt;/strong>&lt;/p>
&lt;p>将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑，此参数默认为 on。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="死锁检测">死锁检测&lt;/h3>
&lt;p>死锁检测是一个时间复杂度是 O(n) 的操作。每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁。如果大量并非要修改同一行数据，会消耗大量的 CPU 资源。&lt;/p>
&lt;p>解决由这种热点行更新导致的性能问题，有以下几个方案：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>确保业务一定不会出现死锁的情况下，临时关闭死锁检测。&lt;/strong>&lt;/p>
&lt;p>这种操作本身带有一定的风险，因为关闭死锁检测意味着可能会出现大量的超时，这是业务有损的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>控制并发度。&lt;/strong>&lt;/p>
&lt;p>如果同一行同时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。可以从以下几个方向控制并发度：&lt;/p>
&lt;ul>
&lt;li>数据库服务端硬性限制并发线程数量&lt;/li>
&lt;li>将一行数据横向拆分成多行，比如账户总额拆分成 10 行，总额由 10 行数据相加得到&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="间隙锁">间隙锁&lt;/h2>
&lt;p>为了解决幻读问题，InnoDB 引入了间隙锁 (&lt;code>Gap Lock&lt;/code>)。间隙锁指的是将两条相连数据间的位置锁住，不能插入数据。&lt;/p>
&lt;p>行锁和间隙锁组合起来，就叫做 &lt;code>next-key lock&lt;/code>。&lt;/p>
&lt;p>间隙锁是一个在索引记录之间的间隙上的锁，使用间隙锁，检索条件必须有索引。没有索引 MySQL 会全表扫描，锁定整张表所有的记录，包括不存在的记录，此时其他事务不能修改不能删除不能添加。&lt;/p>
&lt;h3 id="加锁规则">加锁规则&lt;/h3>
&lt;ol>
&lt;li>加锁的基本单位是 next-key lock，是前开后闭区间。&lt;/li>
&lt;li>查找过程中访问到的对象才会加锁。&lt;/li>
&lt;li>索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。&lt;/li>
&lt;li>索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。&lt;/li>
&lt;/ol></description></item><item><title>MySQL 事务与隔离级别</title><link>https://wnanbei.github.io/post/mysql-%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mysql-%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid><description>&lt;p>事务是保证一组数据库操作，要么全部成功，要么全部失败。&lt;/p>
&lt;p>在 MySQL 中，事务支持在引擎层实现。MySQL 并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。&lt;/p>
&lt;p>ACID（&lt;code>Atomicity&lt;/code>、&lt;code>Consistency&lt;/code>、&lt;code>Isolation&lt;/code>、&lt;code>Durability&lt;/code>，即原子性、一致性、隔离性、持久性）。&lt;/p>
&lt;h2 id="隔离级别">隔离级别&lt;/h2>
&lt;p>通常而言，事务隔离越严格，效率就会越低。因此需要要在二者之间寻找一个平衡点。&lt;/p>
&lt;h3 id="类型">类型&lt;/h3>
&lt;p>SQL 标准的事务隔离级别包括以下四种，隔离程度依次递增：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>读未提交（read uncommitted）&lt;/p>
&lt;p>事务还没提交时，它做的变更就能被别的事务看到。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读已提交（read committed）&lt;/p>
&lt;p>事务提交之后，它做的变更才会被其他事务看到。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可重复读（repeatable read）&lt;/p>
&lt;p>事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。在可重复读隔离级别下，未提交变更对其他事务也是不可见的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>串行化（serializable）&lt;/p>
&lt;p>对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注：MySQL 默认隔离级别为可重复读。&lt;/strong>&lt;/p>
&lt;h3 id="实现方式">实现方式&lt;/h3>
&lt;ul>
&lt;li>在可重复读隔离级别下，数据库会在事务启动时创建一个视图，整个事务存在期间以此视图的逻辑结果为准。&lt;/li>
&lt;li>读提交隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。&lt;/li>
&lt;li>读未提交隔离级别下直接返回记录上的最新值，没有视图概念。&lt;/li>
&lt;li>串行化隔离级别下直接用加锁的方式来避免并行访问。&lt;/li>
&lt;/ul>
&lt;h3 id="可重复读">可重复读&lt;/h3>
&lt;p>可重复读的核心就是一致性读（consistent read）。&lt;/p>
&lt;p>而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。&lt;/p>
&lt;h2 id="undo-log">Undo Log&lt;/h2>
&lt;p>undo log 就是在修改数据之前，把数据的原值先保存起来（undo log），以便能够回滚数据。&lt;/p>
&lt;p>undo log 有两个用处，事务回滚和多版本并发控制（MVCC）。&lt;/p>
&lt;p>&lt;strong>注：undo log 做的是逻辑上的数据回滚，存储在单独的表空间中。&lt;/strong>&lt;/p>
&lt;h3 id="类型-1">类型&lt;/h3>
&lt;p>&lt;code>undo log&lt;/code> 有两种类型，分别是 insert undo log 和 update undo log：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>insert undo log&lt;/code> 记录的是 insert 语句对应的 undo log。&lt;/p>
&lt;p>不涉及 MVCC，事务结束以后就可以删除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>update undo log&lt;/code> 记录的是 update、delete 语句对应的 undo log。&lt;/p>
&lt;p>涉及 MVCC，需要保存一定时间。当系统判断，没有比这个 undo log 更早的 read-view 的时候，undo log 会被删除。这是不建议使用长事务的一个原因，会导致大量回滚记录都必须保留，大量占用存储空间。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="mvcc">MVCC&lt;/h2>
&lt;p>数据库的多版本并发控制（MVCC），就是同一条记录在系统中可以存在多个版本。&lt;/p>
&lt;p>MVCC 只在读提交和可重复读两种隔离级别下工作，另两个隔离级别不兼容。&lt;/p>
&lt;p>&lt;strong>MVCC 使得数据库读数据时不会被更新数据的写锁堵住，提高了数据库的并发处理能力&lt;/strong>。&lt;/p>
&lt;h3 id="实现方式-1">实现方式&lt;/h3>
&lt;p>InnoDB 里每个事务有一个唯一的事务 ID: &lt;code>transaction id&lt;/code>。它是在事务开始的时候向 InnoDB 的事务系统申请的，按申请顺序严格递增。&lt;/p>
&lt;p>每行数据也是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，数据版本中存储 &lt;code>undo log&lt;/code>，并把 &lt;code>transaction id&lt;/code> 赋值给这个数据版本的 &lt;code>row trx_id&lt;/code>。同时，旧的数据版本保留，并且在新的数据版本中，能够有信息可以直接拿到它。&lt;/p>
&lt;p>也就是说，数据表中的一行记录，可能有多个版本 (row)，每个版本有自己的 &lt;code>row trx_id&lt;/code>。&lt;/p>
&lt;p>每次需要之前版本的数据时，通过回滚 &lt;code>undo log&lt;/code> 得到之前版本的值。&lt;/p>
&lt;h3 id="数据版本可见性规则">数据版本可见性规则&lt;/h3>
&lt;p>InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前启动了但还没提交的所有事务 ID。&lt;/p>
&lt;ul>
&lt;li>数组里面事务 ID 的最小值记为低水位&lt;/li>
&lt;li>当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位&lt;/li>
&lt;/ul>
&lt;p>这个视图数组和高水位，组成了当前事务的一致性视图（read-view）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>而数据版本的可见性规则，就是基于数据的 row trx_id 和这个一致性视图的对比结果得到。&lt;/p>
&lt;ul>
&lt;li>如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，是可见的。&lt;/li>
&lt;li>如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的。&lt;/li>
&lt;li>如果落在黄色部分，包括两种情况：
&lt;ol>
&lt;li>若 &lt;code>row trx_id&lt;/code> 在数组中，表示这个版本是由还没提交的事务生成的，不可见。&lt;/li>
&lt;li>若 &lt;code>row trx_id&lt;/code> 不在数组中，表示这个版本是已经提交了的事务生成的，可见。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="数据更新">数据更新&lt;/h3>
&lt;p>MVCC 只能解决数据更新时不影响读取，而如果要更新数据时，数据更新的逻辑则不能再使用 MVCC 版本控制，只能使用读锁进行阻塞。&lt;/p>
&lt;p>&lt;strong>更新数据都是先读后写的，而这个读，只能读当前的值，称为当前读（current read）。&lt;/strong>&lt;/p>
&lt;p>除了 update 语句外，select 语句如果加锁，也是当前读。&lt;/p>
&lt;h2 id="可能出现的问题">可能出现的问题&lt;/h2>
&lt;h3 id="脏读">脏读&lt;/h3>
&lt;p>脏读 (Dirty Read) 是一个事务读到了另一个未提交事务修改过的数据。&lt;/p>
&lt;p>脏读只在读未提交隔离级别才会出现。&lt;/p>
&lt;h3 id="不可重复读">不可重复读&lt;/h3>
&lt;p>不可重复读指在同一个事务中，同一条数据，查询到的数据内容不同。&lt;/p>
&lt;p>不可重复读在读未提交和读已提交两个级别中可能出现。&lt;/p>
&lt;h3 id="幻读">幻读&lt;/h3>
&lt;p>幻读是指在同一个事务中，同样的查询语句执行多次，得到了不同的结果集。&lt;/p>
&lt;p>除了串行化隔离级别，其他隔离级别都有可能出现幻读问题。&lt;/p>
&lt;p>MySQL 主要使用 MVCC 和间隙锁两种方式解决幻读问题。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MVCC：&lt;/strong>&lt;/p>
&lt;p>由于 MVCC 机制，快照中的普通读取使用的是快照读，只能读取到快照，解决了普通读的幻读问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>间隙锁：&lt;/strong>&lt;/p>
&lt;p>事务中的更新数据操作都是使用的当前读，如果其他事务在此期间插入了新数据，而读锁又锁不住加锁之后新插入的数据，就会出现幻读问题。查询行为如果加锁，也会变成当前读，也会出现幻读问题。&lt;/p>
&lt;p>间隙锁将读取行为扫描到的所有数据的间隙间和行上锁，使其他事务无法在这个范围内插入新数据，由此解决了幻读问题。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>MySQL 安装与配置</title><link>https://wnanbei.github.io/post/mysql-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mysql-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>&lt;code>MySQL&lt;/code> 在今年初发布了正式的 8.0 版本，据说性能相比 5.7 提升了两倍。今天我们就来安装和配置一下&lt;code>MySQL8.0&lt;/code>。&lt;/p>
&lt;p>安装环境为 &lt;code>Centos7&lt;/code>。&lt;/p>
&lt;p>MySQL 的安装主要有两种方式，一种是使用 &lt;code>yum&lt;/code> 命令在线安装，一种是下载源代码，离线安装。&lt;/p>
&lt;h2 id="在线安装">在线安装&lt;/h2>
&lt;h3 id="添加仓库及安装">添加仓库及安装&lt;/h3>
&lt;p>首先，我们需要将 &lt;code>MySQL&lt;/code> 的仓库添加到你系统的仓库列表之中：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>访问 &lt;a class="link" href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener"
>MySQL仓库下载地址&lt;/a>，选择你需要下载的 MySQL 版本，我们要安装的是 &lt;code>MySQL8.0&lt;/code>，安装环境为&lt;code>Centos7&lt;/code>，所以我们选择的是：&lt;code>mysql80-community-release-el7-1.noarch.rpm&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 Centos 中使用 &lt;code>wget&lt;/code> 将仓库下载下来：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>然后将仓库添加到系统仓库列表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo yum localinstall mysql80-community-release-el7-1.noarch.rpm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加完成之后，就可以开始安装 MySQL 了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 MySQL&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo yum install mysql-community-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="启用服务">启用服务&lt;/h3>
&lt;p>安装完毕之后，我们需要开启 MySQL 的服务，才能正常使用:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl start mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启之后，我们可以使用以下命令查看服务的状态：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">shell&amp;gt; sudo service mysqld status
Redirecting to /bin/systemctl status mysqld.service
● mysqld.service - MySQL Server
Loaded: loaded &lt;span style="color:#f92672">(&lt;/span>/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled&lt;span style="color:#f92672">)&lt;/span>
Active: active &lt;span style="color:#f92672">(&lt;/span>running&lt;span style="color:#f92672">)&lt;/span> since 二 2018-08-28 16:36:37 CST; 27min ago
Docs: man:mysqld&lt;span style="color:#f92672">(&lt;/span>8&lt;span style="color:#f92672">)&lt;/span>
http://dev.mysql.com/doc/refman/en/using-systemd.html
Process: &lt;span style="color:#ae81ff">997&lt;/span> ExecStartPre&lt;span style="color:#f92672">=&lt;/span>/usr/bin/mysqld_pre_systemd &lt;span style="color:#f92672">(&lt;/span>code&lt;span style="color:#f92672">=&lt;/span>exited, status&lt;span style="color:#f92672">=&lt;/span>0/SUCCESS&lt;span style="color:#f92672">)&lt;/span>
Main PID: &lt;span style="color:#ae81ff">1026&lt;/span> &lt;span style="color:#f92672">(&lt;/span>mysqld&lt;span style="color:#f92672">)&lt;/span>
Status: &lt;span style="color:#e6db74">&amp;#34;SERVER_OPERATING&amp;#34;&lt;/span>
CGroup: /system.slice/mysqld.service
└─1026 /usr/sbin/mysqld
8月 &lt;span style="color:#ae81ff">28&lt;/span> 16:36:34 localhost.localdomain systemd&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>: Starting MySQL Server...
8月 &lt;span style="color:#ae81ff">28&lt;/span> 16:36:37 localhost.localdomain systemd&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>: Started MySQL Server.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="设置密码">设置密码&lt;/h3>
&lt;p>开启服务后，我们就可以连接 MySQL 了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mysql -u root -p
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是，在使用 yum 自动安装之后，MySQL 会自动给 root 账户设置一个随机密码，我们需要先获得这个随机密码，登陆后，再去修改 root 用户密码。&lt;/p>
&lt;p>使用以下命令可以查看随机密码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">shell&amp;gt; sudo grep &lt;span style="color:#e6db74">&amp;#39;temporary password&amp;#39;&lt;/span> /var/log/mysqld.log
2018-08-28T08:17:04.632047Z &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Note&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-010454&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Server&lt;span style="color:#f92672">]&lt;/span> A temporary password is generated &lt;span style="color:#66d9ef">for&lt;/span> root@localhost: sbt1Y9o.s5k5
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用此密码登陆成功后，我们需要修改这个密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">USER&lt;/span> &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>&lt;span style="color:#f92672">@&lt;/span>&lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">IDENTIFIED&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> &lt;span style="color:#e6db74">&amp;#39;MyNewPass4!&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是，&lt;code>MySQL8.0&lt;/code> 设置的密码需要包含大小写字母，数字以及特殊字符，才能设置成功。&lt;/p>
&lt;h2 id="编码问题">编码问题&lt;/h2>
&lt;p>&lt;code>MySQL8.0&lt;/code> 还有一点改进是，不再使用 &lt;code>latin&lt;/code> 作为默认编码，转而使用 &lt;code>utf8mb4&lt;/code> 作为默认编码。&lt;/p>
&lt;p>这样在使用时就不用再修改默认编码了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">mysql&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">show&lt;/span> variables &lt;span style="color:#66d9ef">like&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%char%&amp;#39;&lt;/span>;
&lt;span style="color:#f92672">+--------------------------------------+--------------------------------+&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> Variable_name &lt;span style="color:#f92672">|&lt;/span> Value &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">+--------------------------------------+--------------------------------+&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> character_set_client &lt;span style="color:#f92672">|&lt;/span> utf8mb4 &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> character_set_connection &lt;span style="color:#f92672">|&lt;/span> utf8mb4 &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> character_set_database &lt;span style="color:#f92672">|&lt;/span> utf8mb4 &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> character_set_filesystem &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">binary&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> character_set_results &lt;span style="color:#f92672">|&lt;/span> utf8mb4 &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> character_set_server &lt;span style="color:#f92672">|&lt;/span> utf8mb4 &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> character_set_system &lt;span style="color:#f92672">|&lt;/span> utf8 &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> character_sets_dir &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">/&lt;/span>usr&lt;span style="color:#f92672">/&lt;/span>share&lt;span style="color:#f92672">/&lt;/span>mysql&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>.&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">/&lt;/span>charsets&lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> validate_password.special_char_count &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">|&lt;/span>
&lt;span style="color:#f92672">+--------------------------------------+--------------------------------+&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> rows &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span> (&lt;span style="color:#ae81ff">0&lt;/span>.&lt;span style="color:#ae81ff">02&lt;/span> sec)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="临时修改编码">临时修改编码&lt;/h3>
&lt;p>利用以下命令可以修改编码格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">set&lt;/span> character_set_database &lt;span style="color:#f92672">=&lt;/span> utf8;
&lt;span style="color:#66d9ef">set&lt;/span> character_set_server &lt;span style="color:#f92672">=&lt;/span> utf8;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但在命令行中修改的话，每次重启Mysql就会失效，所以我们需要把这两行语句写入到Mysql的配置文件中。&lt;/p>
&lt;h3 id="修改配置文件">修改配置文件&lt;/h3>
&lt;p>首先，我们可以通过 &lt;code>mysql --help&lt;/code> 命令查看mysql读取配置文件的优先路径。一般会看到如下所示的内容：&lt;/p>
&lt;blockquote>
&lt;p>Default options are read from the following files in the given order:
/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf&lt;/p>
&lt;/blockquote>
&lt;p>所以我们就可以使用以下命令编辑或创建配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">vim /etc/my.cnf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>[mysqld]&lt;/code> 标签下加上以下内容：&lt;/p>
&lt;blockquote>
&lt;p>default-character-set = utf8
character_set_server = utf8&lt;/p>
&lt;/blockquote>
&lt;p>注意：如果此标签下已经存在 &lt;code>default-character-set=GBK&lt;/code> 类似的内容，只需修改即可。&lt;/p>
&lt;p>在 &lt;code>[mysql]&lt;/code> 标签下加上一行&lt;/p>
&lt;blockquote>
&lt;p>default-character-set = utf8&lt;/p>
&lt;/blockquote>
&lt;p>之后再次进入 MySql 用之前提到过的查看命令查看即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo service mysql restart
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MySQL 建表与修改</title><link>https://wnanbei.github.io/post/mysql-%E5%BB%BA%E8%A1%A8%E4%B8%8E%E4%BF%AE%E6%94%B9/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mysql-%E5%BB%BA%E8%A1%A8%E4%B8%8E%E4%BF%AE%E6%94%B9/</guid><description>&lt;h2 id="建表">建表&lt;/h2>
&lt;h3 id="语句">语句&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> [TEMPORARY] &lt;span style="color:#66d9ef">TABLE&lt;/span> [&lt;span style="color:#66d9ef">IF&lt;/span> &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">EXISTS&lt;/span>] &lt;span style="color:#a6e22e">tb_name&lt;/span>
(create_definition,...)
[table_options]
[partition_options]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关键字：&lt;/p>
&lt;ul>
&lt;li>&lt;code>TEMPORARY&lt;/code> - 可以使用此关键字创建临时表，临时表只在当前会话中可见，并且会在会话关闭时自动删除。&lt;/li>
&lt;li>&lt;code>IF NOT EXISTS&lt;/code> - 当表中不存在此表时，才执行 &lt;code>CREATE TABLE&lt;/code> 语句，以免创建重名表引发异常。&lt;/li>
&lt;li>&lt;code>create_definition&lt;/code> - 在 &lt;code>tb_name&lt;/code> 字段后方括号中的，是表中定义字段的语句，定义多条字段字段时用逗号分隔。&lt;/li>
&lt;li>&lt;code>table_options&lt;/code> - 用来优化表的选项。在大多数时候不需要指定。可以在这里指定表的引擎(&lt;code>engine&lt;/code>)，如果没有指定的话则默认使用 &lt;code>InnoDB&lt;/code> 引擎。&lt;/li>
&lt;li>&lt;code>partition_optins&lt;/code> - 可以用于创建表的分区。&lt;/li>
&lt;/ul>
&lt;h3 id="定义字段">定义字段&lt;/h3>
&lt;p>即上方建表语句中的 &lt;code>create_definition&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">col_name data_type[size] [&lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#66d9ef">NULL&lt;/span>] [&lt;span style="color:#66d9ef">DEFAULT&lt;/span> value] [&lt;span style="color:#66d9ef">AUTO_INCREMENT&lt;/span>],
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了需要在这里指定字段的名字、数据类型和约束条件之外，还有一些选项可以在此指定：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>COMMENT&lt;/code>&lt;/p>
&lt;p>使用 &lt;code>COMMENT&lt;/code> 可以为字段写入注释，最多 1024 个字符。如果要显示注释的话需要使用 &lt;code>SHOW CREATE TABLE&lt;/code> 或者 &lt;code>SHOW FULL COLUMNS&lt;/code> 语句。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>UNSIGNED&lt;/code>&lt;/p>
&lt;p>无符号，数值类型可以使用 &lt;code>UNSIGNED&lt;/code> 来指定数据只表示正数，这样的话能使字段表示的最大范围翻倍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ZEROFILL&lt;/code>&lt;/p>
&lt;p>用 &lt;code>0&lt;/code> 填充，当数值类型插入的数据长度比设定的最大长度小时，设定了 &lt;code>ZEROFILL&lt;/code> 选项的字段将自动在数据的左端填充 &lt;code>0&lt;/code>，将数据补充到设定的最大长度。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="约束条件">约束条件&lt;/h3>
&lt;p>所谓约束条件，指的是对于字段，除了数据类型和数据长度以外其他的规定，例如非空、自增长等。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>NOT NULL&lt;/code>&lt;/p>
&lt;p>非空，如果没有指定 &lt;code>NOT NULL&lt;/code> 这个约束条件的话，那么插入一条数据的时候，这个字段是可以不插入值的，这个时候，MySQL 会自动将这个字段的值设置为 &lt;code>NULL&lt;/code>。&lt;/p>
&lt;p>而如果设置了 &lt;code>NOT NULL&lt;/code> 约束条件，那么在插入数据的时候，这个字段必须有值，否则会报错。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">name &lt;span style="color:#66d9ef">VARCHAR&lt;/span>(&lt;span style="color:#ae81ff">20&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>AUTO_INCREMENT&lt;/code>&lt;/p>
&lt;p>自增长，整数类型或浮点数类型，可以设置这个约束条件，每张表中只能设置一个 &lt;code>AUTO_INCREMENT&lt;/code> 字段，且不能设置默认值 &lt;code>DEFAULT&lt;/code>。&lt;code>AUTO_INCREMENT&lt;/code> 字段必须为一个 &lt;code>KEY&lt;/code>。&lt;/p>
&lt;p>当你在插入数据的时候，如果给这个字段插入 &lt;code>NULL&lt;/code> 或者 &lt;code>0&lt;/code>，甚至不插入值时，这个字段会自动找出这个字段中最大的值，并将这个值 +1 并填充到当前这条数据中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">id &lt;span style="color:#66d9ef">INT&lt;/span>(&lt;span style="color:#ae81ff">11&lt;/span>) &lt;span style="color:#66d9ef">AUTO_INCREMENT&lt;/span>,
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>DEFAULT&lt;/code>&lt;/p>
&lt;p>指定默认值，如果插入数据时，这个字段没有插入值，那么将会使用默认值来填充此字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">name &lt;span style="color:#66d9ef">VARCHAR&lt;/span>(&lt;span style="color:#ae81ff">20&lt;/span>) &lt;span style="color:#66d9ef">DEFAULT&lt;/span> &lt;span style="color:#e6db74">&amp;#39;nobody&amp;#39;&lt;/span>,
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>UNIQUE&lt;/code>&lt;/p>
&lt;p>唯一值，当我们希望某一个字段的值都唯一的情况下，我们可以给这个字段指定 &lt;code>UNIQUE&lt;/code> 约束条件。如果在插入一条新数据时，给一个 &lt;code>UNIQUE&lt;/code> 字段插入一个已经存在的值，那么将会抛出一个异常。&lt;/p>
&lt;p>需要注意的是，&lt;code>UNIQUE&lt;/code> 不会把 &lt;code>NULL&lt;/code> 视为重复的值，也就是说，&lt;code>UNIQUE&lt;/code> 字段中可以包含多个 &lt;code>NULL&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">id &lt;span style="color:#66d9ef">INT&lt;/span>(&lt;span style="color:#ae81ff">11&lt;/span>) &lt;span style="color:#66d9ef">UNIQUE&lt;/span>,
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要在建表之后再设定某个字段为&lt;code>UNIQUE&lt;/code>，可以用这种方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">ADD&lt;/span> &lt;span style="color:#66d9ef">UNIQUE&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span>(number);
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>PRIMARY KEY&lt;/code>&lt;/p>
&lt;p>主键，通常是用来作为一条数据的唯一标识，所以主键字段的值必须是唯一的，且这个字段必须设置为 &lt;code>NOT NULL&lt;/code>，每一张表中也只能设置一个主键。&lt;/p>
&lt;p>当没有设置主键的时候，表中第一个出现的 &lt;code>NOT NULL&lt;/code> 且 &lt;code>UNIQUE&lt;/code> 字段，将会被视为主键。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">id &lt;span style="color:#66d9ef">INT&lt;/span>(&lt;span style="color:#ae81ff">11&lt;/span>) &lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span>,
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当建表之后需要设置主键时：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">ADD&lt;/span> &lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> (id);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>主键还可以被撤销：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">DROP&lt;/span> &lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>FOREIGN KEY&lt;/code>&lt;/p>
&lt;p>外键，可以将表中的某一个字段与另一张表中的一个字段联系起来，从而为两张表建立联系。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CONSTRAINT&lt;/span> foreign_name &lt;span style="color:#66d9ef">FOREIGN&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> (Id_P) &lt;span style="color:#66d9ef">REFERENCES&lt;/span> &lt;span style="color:#a6e22e">Persons&lt;/span>(Id_P)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="修改表结构">修改表结构&lt;/h2>
&lt;p>可以使用 &lt;code>ALTER TABLE&lt;/code> 语句来更改现有表的结构。&lt;/p>
&lt;h3 id="修改语句">修改语句&lt;/h3>
&lt;p>&lt;code>ALTER TABLE&lt;/code> 语句可用来&lt;strong>添加列&lt;/strong>，&lt;strong>删除列&lt;/strong>，更改列的&lt;strong>数据类型&lt;/strong>，&lt;strong>添加主键&lt;/strong>，&lt;strong>重命名表&lt;/strong>等等。 以下是 &lt;code>ALTER TABLE&lt;/code> 语句语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name
[alter_specification [, alter_specification] ...]
[partition_options]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是多条修改语句间需要使用&lt;code>,&lt;/code>分割。&lt;/p>
&lt;h3 id="例子">例子&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>重命名表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">RENAME&lt;/span> new_name;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">ADD&lt;/span> col_name &lt;span style="color:#66d9ef">TIMESTAMP&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要指定添加字段的位置，那么可以在后面跟上一个 &lt;code>AFTER&lt;/code> 子句，添加到某个字段下方。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">ADD&lt;/span> col_name &lt;span style="color:#66d9ef">TIMESTAMP&lt;/span> AFTER col_name2;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>AFTER&lt;/code> 能添加到除了第一行之外的所有位置，那么想添加到第一行的话，需要使用 FIRST。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">ADD&lt;/span> col_name &lt;span style="color:#66d9ef">TIMESTAMP&lt;/span> FIRST;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>删除字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">DROP&lt;/span> &lt;span style="color:#66d9ef">COLUMN&lt;/span> col_name;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>重命名并修改字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name &lt;span style="color:#66d9ef">CHANGE&lt;/span> old_col_name new_col_name data_type;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改字段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tb_name MODIFY col_name data_type;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>MySQL 数据库设计规范</title><link>https://wnanbei.github.io/post/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</guid><description>&lt;p>MySQL 数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用 MySQL 数据库的时候需要遵循一定规范，扬长避短。&lt;/p>
&lt;p>本规范旨在帮助或指导 RD、QA、OP 等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL 编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。&lt;/p>
&lt;h2 id="设计规范">设计规范&lt;/h2>
&lt;h3 id="数据库设计">数据库设计&lt;/h3>
&lt;p>以下所有规范会按照【高危】、【强制】、【建议】三个级别进行标注，遵守优先级从高到低。&lt;/p>
&lt;p>对于不满足【高危】和【强制】两个级别的设计，DBA会强制打回要求修改。&lt;/p>
&lt;h3 id="库名">库名&lt;/h3>
&lt;ol>
&lt;li>【强制】库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量体现join的关系，如user表和user_login表。&lt;/li>
&lt;li>【强制】库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。&lt;/li>
&lt;li>【强制】一般分库名称命名格式是&lt;code>库通配名_编号&lt;/code>，编号从0开始递增，比如&lt;code>wenda_001&lt;/code>以时间进行分库的名称格式是“库通配名_时间”&lt;/li>
&lt;li>【强制】创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：&lt;code>create database db1 default character set utf8;&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h3 id="表结构">表结构&lt;/h3>
&lt;ol>
&lt;li>【强制】表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。&lt;/li>
&lt;li>【强制】表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。&lt;/li>
&lt;li>【强制】创建表时必须显式指定字符集为utf8或utf8mb4。&lt;/li>
&lt;li>【强制】创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。&lt;/li>
&lt;li>【强制】建表必须有comment&lt;/li>
&lt;li>【强制】中间表用于保留中间结果集，名称必须以&lt;code>tmp_&lt;/code>开头。备份表用于备份或抓取源表快照，名称必须以&lt;code>bak_&lt;/code>开头。中间表和备份表定期清理。&lt;/li>
&lt;li>【强制】对于超过100W行的大表进行&lt;code>alter table&lt;/code>，必须经过DBA审核，并在业务低峰期执行。因为&lt;code>alter table&lt;/code>会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。&lt;/li>
&lt;li>【建议】建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为&lt;code>auto_increment(2)&lt;/code>标识表里每一行主体的字段不要设为主键，建议设为其他字段如&lt;code>user_id&lt;/code>，&lt;code>order_id&lt;/code>等，并建立unique key索引（可参考&lt;code>cdb.teacher&lt;/code>表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降。&lt;/li>
&lt;li>【建议】核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段&lt;code>create_time&lt;/code>和最后更新时间字段&lt;code>update_time&lt;/code>，便于查问题。&lt;/li>
&lt;li>【建议】表中所有字段必须都是&lt;code>NOT NULL&lt;/code>属性，业务可以根据需要定义&lt;code>DEFAULT&lt;/code>值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。&lt;/li>
&lt;li>【建议】建议对表里的&lt;code>blob&lt;/code>、&lt;code>text&lt;/code>等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。&lt;/li>
&lt;li>【建议】反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如&lt;code>user_name&lt;/code>属性在&lt;code>user_account&lt;/code>，&lt;code>user_login_log&lt;/code>等表里冗余一份，减少join查询。&lt;/li>
&lt;/ol>
&lt;h3 id="列数据类型优化">列数据类型优化&lt;/h3>
&lt;ol>
&lt;li>【建议】表中的自增列（&lt;code>auto_increment&lt;/code>属性），推荐使用&lt;code>bigint&lt;/code>类型。因为无符号&lt;code>int&lt;/code>存储范围为&lt;code>-2147483648~2147483647&lt;/code>（大约21亿左右），溢出后会导致报错。&lt;/li>
&lt;li>【建议】业务中选择性很少的状态&lt;code>status&lt;/code>、类型&lt;code>type&lt;/code>等字段推荐使用&lt;code>tinytint&lt;/code>或者&lt;code>smallint&lt;/code>类型节省存储空间。&lt;/li>
&lt;li>【建议】业务中IP地址字段推荐使用&lt;code>int&lt;/code>类型，不推荐用&lt;code>char(15)&lt;/code>。因为&lt;code>int&lt;/code>只占4字节，可以用如下函数相互转换，而&lt;code>char(15)&lt;/code>占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：&lt;code>select inet_aton('192.168.2.12'); select inet_ntoa(3232236044);&lt;/code> PHP: &lt;code>ip2long(‘192.168.2.12’); long2ip(3530427185);&lt;/code>&lt;/li>
&lt;li>【建议】不推荐使用&lt;code>enum&lt;/code>，&lt;code>set&lt;/code>。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用&lt;code>tinyint&lt;/code>或&lt;code>smallint&lt;/code>。&lt;/li>
&lt;li>【建议】不推荐使用&lt;code>blob&lt;/code>，&lt;code>text&lt;/code>等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在&lt;code>overflow-page&lt;/code>里。不幸的是在&lt;code>compact&lt;/code>行格式下，原始&lt;code>page&lt;/code>和&lt;code>overflow-page&lt;/code>都会加载。&lt;/li>
&lt;li>【建议】存储金钱的字段，建议用&lt;code>int&lt;/code>，程序端乘以100和除以100进行存取。因为&lt;code>int&lt;/code>占用4字节，而&lt;code>double&lt;/code>占用8字节，空间浪费。&lt;/li>
&lt;li>【建议】文本数据尽量用&lt;code>varchar&lt;/code>存储。因为&lt;code>varchar&lt;/code>是变长存储，比&lt;code>char&lt;/code>更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为&lt;code>mediumtext&lt;/code>字段。而&lt;code>text&lt;/code>在utf8字符集下最多存21844个字符，&lt;code>mediumtext&lt;/code>最多存 2^24^/3 个字符，&lt;code>longtext&lt;/code>最多存 2^32^ 个字符。一般建议用&lt;code>varchar&lt;/code>类型，字符数不要超过2700。&lt;/li>
&lt;li>【建议】时间类型尽量选取&lt;code>timestamp&lt;/code>。因为&lt;code>datetime&lt;/code>占用8字节，&lt;code>timestamp&lt;/code>仅占用4字节，但是范围为&lt;code>1970-01-01 00:00:01&lt;/code>到&lt;code>2038-01-01 00:00:00&lt;/code>。更为高阶的方法，选用&lt;code>int&lt;/code>来存储时间，使用SQL函数&lt;code>unix_timestamp()&lt;/code>和&lt;code>from_unixtime()&lt;/code>来进行转换。&lt;/li>
&lt;/ol>
&lt;h3 id="索引设计">索引设计&lt;/h3>
&lt;ol>
&lt;li>【强制】InnoDB表必须主键为&lt;code>id int/bigint auto_increment&lt;/code>,且主键值禁止被更新。&lt;/li>
&lt;li>【强制】InnoDB和MyISAM存储引擎表，索引类型必须为&lt;code>BTREE&lt;/code>；MEMORY表可以根据需要选择&lt;code>HASH&lt;/code>或者&lt;code>BTREE&lt;/code>类型索引。&lt;/li>
&lt;li>【强制】单个索引中每个索引记录的长度不能超过64KB。&lt;/li>
&lt;li>【建议】主键的名称以“&lt;code>pk_&lt;/code>”开头，唯一键以“&lt;code>uk_&lt;/code>”或“&lt;code>uq_&lt;/code>”开头，普通索引以“&lt;code>idx_&lt;/code>”开头，一律使用小写格式，以表名/字段的名称或缩写作为后缀。&lt;/li>
&lt;li>【建议】单个表上的索引个数不能超过7个。&lt;/li>
&lt;li>【建议】在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列&lt;code>userid&lt;/code>的区分度可由&lt;code>select count(distinct userid)&lt;/code>计算出来。&lt;/li>
&lt;li>【建议】在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。&lt;/li>
&lt;li>【建议】建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在&lt;code>key(a,b)&lt;/code>，则&lt;code>key(a)&lt;/code>为冗余索引，需要删除。&lt;/li>
&lt;/ol>
&lt;h3 id="分库分表分区表">分库分表、分区表&lt;/h3>
&lt;ol>
&lt;li>【强制】分区表的分区字段（&lt;code>partition-key&lt;/code>）必须有索引，或者是组合索引的首列。&lt;/li>
&lt;li>【强制】单个分区表中的分区（包括子分区）个数不能超过1024。&lt;/li>
&lt;li>【强制】上线前RD或者DBA必须指定分区表的创建、清理策略。&lt;/li>
&lt;li>【强制】访问分区表的SQL必须包含分区键。&lt;/li>
&lt;li>【强制】对于分区表执行&lt;code>alter table&lt;/code>操作，必须在业务低峰期执行。&lt;/li>
&lt;li>【强制】采用分库策略的，库的数量不能超过1024&lt;/li>
&lt;li>【强制】采用分表策略的，表的数量不能超过4096&lt;/li>
&lt;li>【建议】单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。&lt;/li>
&lt;li>【建议】单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。&lt;/li>
&lt;li>【建议】水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。&lt;/li>
&lt;/ol>
&lt;h3 id="字符集">字符集&lt;/h3>
&lt;ol>
&lt;li>【强制】数据库本身库、表、列所有字符集必须保持一致，为&lt;code>utf8&lt;/code>或&lt;code>utf8mb4&lt;/code>。&lt;/li>
&lt;li>【强制】前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为&lt;code>utf8&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h3 id="程序层-dao-设计建议">程序层 DAO 设计建议&lt;/h3>
&lt;ol>
&lt;li>【建议】新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。&lt;/li>
&lt;li>【建议】前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。&lt;/li>
&lt;li>【建议】前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。&lt;/li>
&lt;li>【建议】对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。&lt;/li>
&lt;li>【建议】对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。&lt;/li>
&lt;li>【建议】在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。&lt;/li>
&lt;li>【建议】多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。&lt;/li>
&lt;li>【建议】业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。&lt;/li>
&lt;li>【建议】对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。&lt;/li>
&lt;/ol>
&lt;h3 id="一个规范的建表语句示例">一个规范的建表语句示例&lt;/h3>
&lt;p>一个较为规范的建表语句为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#66d9ef">user&lt;/span> (
&lt;span style="color:#f92672">`&lt;/span>id&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">bigint&lt;/span>(&lt;span style="color:#ae81ff">11&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> &lt;span style="color:#66d9ef">AUTO_INCREMENT&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>user_id&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">bigint&lt;/span>(&lt;span style="color:#ae81ff">11&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#960050;background-color:#1e0010">‘用户&lt;/span>id&lt;span style="color:#960050;background-color:#1e0010">’&lt;/span>
&lt;span style="color:#f92672">`&lt;/span>username&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">varchar&lt;/span>(&lt;span style="color:#ae81ff">45&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#e6db74">&amp;#39;真实姓名&amp;#39;&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>email&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">varchar&lt;/span>(&lt;span style="color:#ae81ff">30&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#960050;background-color:#1e0010">‘用户邮箱’&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>nickname&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">varchar&lt;/span>(&lt;span style="color:#ae81ff">45&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#e6db74">&amp;#39;昵称&amp;#39;&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>avatar&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>(&lt;span style="color:#ae81ff">11&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#e6db74">&amp;#39;头像&amp;#39;&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>birthday&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">date&lt;/span> &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#e6db74">&amp;#39;生日&amp;#39;&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>sex&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">tinyint&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#66d9ef">DEFAULT&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> COMMENT &lt;span style="color:#e6db74">&amp;#39;性别&amp;#39;&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>short_introduce&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">varchar&lt;/span>(&lt;span style="color:#ae81ff">150&lt;/span>) &lt;span style="color:#66d9ef">DEFAULT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#e6db74">&amp;#39;一句话介绍自己，最多50个汉字&amp;#39;&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>user_resume&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">varchar&lt;/span>(&lt;span style="color:#ae81ff">300&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#e6db74">&amp;#39;用户提交的简历存放地址&amp;#39;&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>user_register_ip&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#960050;background-color:#1e0010">‘用户注册时的源&lt;/span>ip&lt;span style="color:#960050;background-color:#1e0010">’&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>create_time&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">timestamp&lt;/span> &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#960050;background-color:#1e0010">‘用户记录创建的时间’&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>update_time&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">timestamp&lt;/span> &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#960050;background-color:#1e0010">‘用户资料修改的时间’&lt;/span>,
&lt;span style="color:#f92672">`&lt;/span>user_review_status&lt;span style="color:#f92672">`&lt;/span> &lt;span style="color:#66d9ef">tinyint&lt;/span> &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> COMMENT &lt;span style="color:#960050;background-color:#1e0010">‘用户资料审核状态，&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">为通过，&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">为审核中，&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">为未通过，&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">为还未提交审核’&lt;/span>,
&lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> (&lt;span style="color:#f92672">`&lt;/span>id&lt;span style="color:#f92672">`&lt;/span>),
&lt;span style="color:#66d9ef">UNIQUE&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> &lt;span style="color:#f92672">`&lt;/span>idx_user_id&lt;span style="color:#f92672">`&lt;/span> (&lt;span style="color:#f92672">`&lt;/span>user_id&lt;span style="color:#f92672">`&lt;/span>),
&lt;span style="color:#66d9ef">KEY&lt;/span> &lt;span style="color:#f92672">`&lt;/span>idx_username&lt;span style="color:#f92672">`&lt;/span>(&lt;span style="color:#f92672">`&lt;/span>username&lt;span style="color:#f92672">`&lt;/span>),
&lt;span style="color:#66d9ef">KEY&lt;/span> &lt;span style="color:#f92672">`&lt;/span>idx_create_time&lt;span style="color:#f92672">`&lt;/span>(&lt;span style="color:#f92672">`&lt;/span>create_time&lt;span style="color:#f92672">`&lt;/span>,&lt;span style="color:#f92672">`&lt;/span>user_review_status&lt;span style="color:#f92672">`&lt;/span>)
) &lt;span style="color:#66d9ef">ENGINE&lt;/span>&lt;span style="color:#f92672">=&lt;/span>InnoDB &lt;span style="color:#66d9ef">DEFAULT&lt;/span> &lt;span style="color:#66d9ef">CHARSET&lt;/span>&lt;span style="color:#f92672">=&lt;/span>utf8 COMMENT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;网站用户基本信息&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sql">SQL&lt;/h2>
&lt;h3 id="dml-语句">DML 语句&lt;/h3>
&lt;ol>
&lt;li>【强制】SELECT语句必须指定具体字段名称，禁止写成&lt;code>*&lt;/code>。因为&lt;code>select *&lt;/code>会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。&lt;/li>
&lt;li>【强制】insert语句指定具体字段名称，不要写成&lt;code>insert into t1 values(…)&lt;/code>，道理同上。&lt;/li>
&lt;li>【强制】事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。&lt;/li>
&lt;li>【强制】写入和事务发往主库，只读SQL发往从库。&lt;/li>
&lt;li>【强制】除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。&lt;/li>
&lt;li>【强制】生产环境禁止使用&lt;code>hint&lt;/code>，如&lt;code>sql_no_cache&lt;/code>，&lt;code>force index&lt;/code>，&lt;code>ignore key&lt;/code>，&lt;code>straight join&lt;/code>等。因为&lt;code>hint&lt;/code>是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！&lt;/li>
&lt;li>【强制】where条件里等号左右字段类型必须一致，否则无法利用索引。&lt;/li>
&lt;li>【强制】生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。&lt;/li>
&lt;li>【强制】WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。&lt;/li>
&lt;li>【建议】&lt;code>insert into…values(XX),(XX),(XX)…&lt;/code>。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。&lt;/li>
&lt;li>【建议】SELECT语句不要使用&lt;code>UNION&lt;/code>，推荐使用&lt;code>UNION ALL&lt;/code>，并且&lt;code>UNION&lt;/code>子句个数限制在5个以内。因为&lt;code>union all&lt;/code>不需要去重，节省数据库资源，提高性能。&lt;/li>
&lt;li>【建议】in值列表限制在500以内。例如&lt;code>select… where userid in(….500个以内…)&lt;/code>，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。&lt;/li>
&lt;li>【建议】事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。&lt;/li>
&lt;li>【建议】&lt;code>SELECT|UPDATE|DELETE|REPLACE&lt;/code>要有WHERE子句，且WHERE子句的条件必需使用索引查找。&lt;/li>
&lt;li>【建议】索引列不要使用函数或表达式，否则无法利用索引。如&lt;code>where length(name)='Admin'&lt;/code>或&lt;code>where user_id+2=10023&lt;/code>。&lt;/li>
&lt;li>【建议】减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如&lt;code>where a=1 or b=2&lt;/code>优化为&lt;code>where a=1… union …where b=2, key(a),key(b)&lt;/code>。&lt;/li>
&lt;li>【建议】分页查询，当limit起点较高时，可先用过滤条件进行过滤。如&lt;code>select a,b,c from t1 limit 10000,20;&lt;/code>优化为: &lt;code>select a,b,c from t1 where id&amp;gt;10000 limit 20;&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h3 id="多表连接">多表连接&lt;/h3>
&lt;ol>
&lt;li>【强制】禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。&lt;/li>
&lt;li>【强制】禁止在业务的更新类SQL语句中使用join，比如&lt;code>update t1 join t2…&lt;/code>。&lt;/li>
&lt;li>【建议】不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。&lt;/li>
&lt;li>【建议】线上环境，多表join不要超过3个表。&lt;/li>
&lt;li>【建议】多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如&lt;code>select a from db1.table1 alias1 where …&lt;/code>。&lt;/li>
&lt;li>【建议】在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。&lt;/li>
&lt;/ol>
&lt;h3 id="事务">事务&lt;/h3>
&lt;ol>
&lt;li>【强制】程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为&lt;code>repeatable-read&lt;/code>。&lt;/li>
&lt;li>【建议】事务中&lt;code>INSERT|UPDATE|DELETE|REPLACE&lt;/code>语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。&lt;/li>
&lt;li>【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。&lt;/li>
&lt;li>【建议】对于有&lt;code>auto_increment&lt;/code>属性字段的表的插入操作，并发需要控制在200以内。&lt;/li>
&lt;li>【建议】事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。&lt;/li>
&lt;li>【建议】事务里更新语句尽量基于主键或&lt;code>unique key&lt;/code>，如&lt;code>update … where id=XX&lt;/code>; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。&lt;/li>
&lt;li>【建议】尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。&lt;/li>
&lt;li>【建议】对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。&lt;/li>
&lt;/ol>
&lt;h3 id="排序和分组">排序和分组&lt;/h3>
&lt;ol>
&lt;li>【建议】减少使用&lt;code>order by&lt;/code>，和业务沟通能不排序就不排序，或将排序放到程序端去做。&lt;code>order by&lt;/code>、&lt;code>group by&lt;/code>、&lt;code>distinct&lt;/code>这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。&lt;/li>
&lt;li>【建议】&lt;code>order by&lt;/code>、&lt;code>group by&lt;/code>、&lt;code>distinct&lt;/code>这些SQL尽量利用索引直接检索出排序好的数据。如&lt;code>where a=1 order by&lt;/code>可以利用&lt;code>key(a,b)&lt;/code>。&lt;/li>
&lt;li>【建议】包含了&lt;code>order by&lt;/code>、&lt;code>group by&lt;/code>、&lt;code>distinct&lt;/code>这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。&lt;/li>
&lt;/ol>
&lt;h3 id="线上禁止使用的-sql-语句">线上禁止使用的 SQL 语句&lt;/h3>
&lt;ol>
&lt;li>【高危】禁用&lt;code>update|delete t1 … where a=XX limit XX;&lt;/code> 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上&lt;code>order by PK&lt;/code>。&lt;/li>
&lt;li>【高危】禁止使用关联子查询，如&lt;code>update t1 set … where name in(select name from user where…);&lt;/code>效率极其低下。&lt;/li>
&lt;li>【强制】禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。&lt;/li>
&lt;li>【强制】禁用&lt;code>insert into …on duplicate key update…&lt;/code>在高并发环境下，会造成主从不一致。&lt;/li>
&lt;li>【强制】禁止联表更新语句，如&lt;code>update t1,t2 where t1.id=t2.id…&lt;/code>。&lt;/li>
&lt;/ol></description></item><item><title>MySQL 索引详解</title><link>https://wnanbei.github.io/post/mysql-%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mysql-%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3/</guid><description>&lt;p>索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。&lt;/p>
&lt;h2 id="索引模型">索引模型&lt;/h2>
&lt;p>&lt;strong>优点&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>能大大的加快数据库中查询的速度。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>缺点&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>索引会占用额外的存储空间，如果创建索引过多，占用空间会很大。&lt;/li>
&lt;li>在对建立了索引的表中写入数据时，索引需要动态的维护。也就是说，会影响写入数据的效率。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>注意事项&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>避免给经常更新的表建立太多索引，以免影响太多写入效率。&lt;/li>
&lt;li>建立索引的字段，越短越好，数值类型越简单越好。&lt;/li>
&lt;li>尽量避免字段中出现 &lt;code>NULL&lt;/code>，因为 &lt;code>NULL&lt;/code> 值的查询是不走索引的，含空值的列是很难做查询优化的。所以要在建立字段时加上 &lt;code>NOT NULL&lt;/code> 的约束条件，空值用 &lt;code>0&lt;/code> 或者空字符代替。&lt;/li>
&lt;li>索引不要盲目建立，一般只需要给在 &lt;code>WHERE&lt;/code> 和 &lt;code>JOIN&lt;/code> 字句中需要出现的字段建立索引即可。&lt;/li>
&lt;li>建立索引后，查询的时候不要进行运算，因为运算的话会变成全表查询。只有这些运算符：&lt;code>&amp;lt;&lt;/code>，&lt;code>&amp;lt;=&lt;/code>，&lt;code>=&lt;/code>，&lt;code>&amp;gt;&lt;/code>，&lt;code>&amp;gt;=&lt;/code>，&lt;code>BETWEEN&lt;/code>，&lt;code>IN&lt;/code>，以及某些时候的&lt;code>LIKE&lt;/code>会被索引支持。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>索引类型&lt;/strong>&lt;/p>
&lt;p>索引是在存储引擎中实现的，不同的存储引擎有不同的索引方式。常用的 &lt;code>InnoDB&lt;/code> 和 &lt;code>MyISAM&lt;/code> 引擎都只能使用 &lt;code>B-tree&lt;/code> 索引。&lt;/p>
&lt;p>根据索引的使用方式，分为&lt;code>单列索引&lt;/code>、&lt;code>组合索引&lt;/code>、&lt;code>全文索引&lt;/code>和&lt;code>空间索引&lt;/code>，这其中单例索引又分为&lt;code>普通索引&lt;/code>、&lt;code>唯一索引&lt;/code>和&lt;code>主键索引&lt;/code>。&lt;/p>
&lt;h3 id="常见索引模型">常见索引模型&lt;/h3>
&lt;p>常见的三种索引模型分别是哈希表、有序数组和搜索树。&lt;/p>
&lt;ul>
&lt;li>哈希表：由于哈希表存储数据是无序的，所以适用于等值查询，不适用于范围查询，效率很低。&lt;/li>
&lt;li>有序数组：由于是有序的，等值查询可以用二分法，所以等值查询和范围查询都适合。但更新数据效率很低。&lt;/li>
&lt;li>搜索树：根据搜索需求逐渐演变，从二叉树到 N 叉树。N 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。&lt;/li>
&lt;/ul>
&lt;h2 id="单列索引">单列索引&lt;/h2>
&lt;p>在 InnoDB 中，表根据主键顺序以索引的形式存放，这种存储方式的表称为索引组织表。同时，InnoDB 使用了 B+ 树索引模型，所以数据都存储在 B+ 树中。&lt;/p>
&lt;p>每一个索引在 InnoDB 里面对应一棵 B+ 树。&lt;/p>
&lt;h3 id="普通索引">普通索引&lt;/h3>
&lt;p>以下是创建普通索引三种的方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">INDEX&lt;/span> indexName &lt;span style="color:#66d9ef">ON&lt;/span> &lt;span style="color:#a6e22e">tbname&lt;/span>(&lt;span style="color:#a6e22e">colname&lt;/span>(length));
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span> tableName &lt;span style="color:#66d9ef">ADD&lt;/span> &lt;span style="color:#66d9ef">INDEX&lt;/span> &lt;span style="color:#a6e22e">indexName&lt;/span>(colname);
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#a6e22e">tbname&lt;/span>(
ID &lt;span style="color:#66d9ef">INT&lt;/span> &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
username &lt;span style="color:#66d9ef">VARCHAR&lt;/span>(&lt;span style="color:#ae81ff">16&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;span style="color:#66d9ef">INDEX&lt;/span> [indexName] (&lt;span style="color:#a6e22e">colname&lt;/span>(length))
);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建索引时，如果字段是 &lt;code>CHAR&lt;/code>，&lt;code>VARCHAR&lt;/code> 类型，&lt;code>length&lt;/code> 可以小于字段实际长度。如果是&lt;code>BLOB&lt;/code>和&lt;code>TEXT&lt;/code>类型，必须指定 &lt;code>length&lt;/code>。&lt;/p>
&lt;p>同时，索引的名字也是可选的，如果没有指定名字的话，那么 &lt;code>MySQL&lt;/code> 会默认用字段名作为索引的名字。&lt;/p>
&lt;p>索引建好之后，可以使用以下命令查看：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">SHOW&lt;/span> &lt;span style="color:#66d9ef">INDEX&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> table_name;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样也可以使用以下命令删除普通索引：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">DROP&lt;/span> &lt;span style="color:#66d9ef">INDEX&lt;/span> [indexName] &lt;span style="color:#66d9ef">ON&lt;/span> table_name;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="唯一索引">唯一索引&lt;/h3>
&lt;p>在 &lt;code>MySQL&lt;/code> 之中，有一个比较特殊的地方就是，&lt;code>KEY&lt;/code> 和 &lt;code>INDEX&lt;/code> 常常被混淆在一起，虽然说本质上 &lt;code>KEY&lt;/code> 和 &lt;code>INDEX&lt;/code> 不是同一个东西，但是究其原因，&lt;code>MySQL&lt;/code> 中的约束效果是通过索引来实现的，&lt;code>MySQL&lt;/code>数据库判断是否当前列是否 unique 就是通过 unique 索引判断的。&lt;/p>
&lt;p>因为这个原因，所以其实我们的 &lt;code>UNIQUE KEY&lt;/code> 约束条件其实也就建立了索引，两者被完全绑定到了一起。&lt;/p>
&lt;p>以下是建立唯一索引的方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">UNIQUE&lt;/span> &lt;span style="color:#66d9ef">INDEX&lt;/span> indexName &lt;span style="color:#66d9ef">ON&lt;/span> &lt;span style="color:#a6e22e">tablename&lt;/span>(&lt;span style="color:#a6e22e">colname&lt;/span>(length));
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> table_name &lt;span style="color:#66d9ef">ADD&lt;/span> &lt;span style="color:#66d9ef">UNIQUE&lt;/span> indexName &lt;span style="color:#66d9ef">ON&lt;/span> (&lt;span style="color:#a6e22e">colname&lt;/span>(length));
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span> (
id &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> &lt;span style="color:#66d9ef">AUTO_INCREMENT&lt;/span>,
name &lt;span style="color:#66d9ef">varchar&lt;/span>(&lt;span style="color:#ae81ff">20&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;span style="color:#66d9ef">UNIQUE&lt;/span> [indexName] (&lt;span style="color:#a6e22e">colname&lt;/span>(length))
);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>唯一索引的删除方式与普通索引是一致的。&lt;/p>
&lt;h3 id="主键索引">主键索引&lt;/h3>
&lt;p>主键索引也是类似，与主键这个约束条件基本是相同的，创建的方式与主键通用，就不一一赘述了。&lt;/p>
&lt;p>这里主要讲一讲 &lt;code>InnoDB&lt;/code> 引擎上主键的选择。在没有特殊需求的情况下，主键都应该使用无关业务逻辑的自增字段。&lt;/p>
&lt;p>有人会觉得，使用身份证之类的数据来作为主键也是可以的，但是在算法层面上，如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。这样会形成一个紧凑的索引结构，提高效率。&lt;/p>
&lt;p>而如果使用的是身份证号这种非自增数据的话，那么数据的值就是类似随机的数据，就达不到这个效果了。&lt;/p>
&lt;h3 id="主键索引和普通索引">主键索引和普通索引&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（&lt;code>clustered index&lt;/code>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（&lt;code>secondary index&lt;/code>）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>基于主键索引和普通索引的查询区别：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如果语句是 &lt;code>select * from T where ID=500&lt;/code>，即主键查询方式，则只需要搜索 ID 这棵 B+ 树。&lt;/li>
&lt;li>如果语句是 &lt;code>select * from T where k=5&lt;/code>，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为回表。&lt;/li>
&lt;/ul>
&lt;p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，在应用中应该尽量使用主键查询。&lt;/p>
&lt;p>&lt;strong>为什么要使用自增主键：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。&lt;/p>
&lt;p>而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="组合索引">组合索引&lt;/h2>
&lt;p>组合索引其实就是用多个字段做一个索引，在查询时如果有多个字段做为索引条件的话，那么组合索引的效率会大大高于每个字段做一个单列索引。&lt;/p>
&lt;p>因为 &lt;code>MySQL&lt;/code> 的查询每次只能使用一个索引，所以多个单列索引只会用到一个索引，其他字段的查询就会变成全文搜索。&lt;/p>
&lt;p>建立组合索引的方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">INDEX&lt;/span> indexname &lt;span style="color:#66d9ef">On&lt;/span> &lt;span style="color:#a6e22e">tbName&lt;/span>(&lt;span style="color:#a6e22e">colname&lt;/span>(length),&lt;span style="color:#a6e22e">colname&lt;/span>(length),...);
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> tbname &lt;span style="color:#66d9ef">ADD&lt;/span> &lt;span style="color:#66d9ef">INDEX&lt;/span> &lt;span style="color:#a6e22e">indexname&lt;/span> (&lt;span style="color:#a6e22e">colname&lt;/span>(length),&lt;span style="color:#a6e22e">colname&lt;/span>(length),...);
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="覆盖索引">覆盖索引&lt;/h3>
&lt;p>如果查询的值已经在索引树上了，则可以直接提供查询结果，不需要回表，可以减少数的搜索次数。这种情况被称为覆盖索引，是一种常用的性能优化手段。&lt;/p>
&lt;p>而通过联合索引，可以将需要查询的值放到索引上，用于加速查询效率。&lt;/p>
&lt;p>例如，如果要根据市民的身份证号查询他的姓名，那么可以建立一个（身份证号、姓名）的联合索引。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。&lt;/p>
&lt;h3 id="最左前缀">最左前缀&lt;/h3>
&lt;p>B+ 树中，索引项是按照索引定义里面出现的字段顺序排序的。由于 B+ 树这种索引结构，可以利用索引的&lt;code>最左前缀&lt;/code>，来定位记录。&lt;/p>
&lt;p>这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。只要满足最左前缀，就可以利用索引来加速检索。&lt;/p>
&lt;p>&lt;strong>如何安排联合索引字段顺序？&lt;/strong>&lt;/p>
&lt;p>评估标准是，索引的复用能力。&lt;/p>
&lt;p>因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。&lt;/p>
&lt;h3 id="索引下推">索引下推&lt;/h3>
&lt;p>在搜索时，如果满足最左前缀原则，则可以直接在索引上定位记录。&lt;/p>
&lt;p>在 MySQL 5.6 之前，如果有不满足最左前缀原则的搜索条件，只能先根据最左前缀索引找出所有匹配的记录，然后逐条数据开始一个个回表。到主键索引上找出数据行，再对比字段值。&lt;/p>
&lt;p>而 MySQL 5.6 引入的索引下推优化（&lt;code>index condition pushdown&lt;/code>)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，再开始回表查询，减少了回表次数。&lt;/p></description></item><item><title>MySQL 运算符与数据类型</title><link>https://wnanbei.github.io/post/mysql-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/mysql-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>&lt;p>MySQL 常用类型简单介绍如下：&lt;/p>
&lt;p>整数类型：&lt;code>BIT、BOOL、TINY INT、SMALL INT、MEDIUM INT、 INT、 BIG INT&lt;/code>&lt;/p>
&lt;p>浮点数类型：&lt;code>FLOAT、DOUBLE、DECIMAL&lt;/code>&lt;/p>
&lt;p>字符串类型：&lt;code>CHAR、VARCHAR、TINY TEXT、TEXT、MEDIUM TEXT、LONGTEXT、TINY BLOB、BLOB、MEDIUM BLOB、LONG BLOB&lt;/code>&lt;/p>
&lt;p>日期类型：&lt;code>Date、DateTime、TimeStamp、Time、Year&lt;/code>&lt;/p>
&lt;p>其他数据类型：&lt;code>BINARY、VARBINARY、ENUM、SET&lt;/code>&amp;hellip;&lt;/p>
&lt;h2 id="运算符">运算符&lt;/h2>
&lt;p>MySQL中主要有四种运算符，分别是：&lt;/p>
&lt;ul>
&lt;li>算术运算符&lt;/li>
&lt;li>比较运算符&lt;/li>
&lt;li>逻辑运算符&lt;/li>
&lt;li>位运算符&lt;/li>
&lt;/ul>
&lt;h3 id="算术运算符">算术运算符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>算术运算符&lt;/th>
&lt;th style="text-align:center">&lt;code>+&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>-&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>*&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>/&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>%&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>作用&lt;/td>
&lt;td style="text-align:center">加&lt;/td>
&lt;td style="text-align:center">减&lt;/td>
&lt;td style="text-align:center">乘&lt;/td>
&lt;td style="text-align:center">除&lt;/td>
&lt;td style="text-align:center">取余&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="逻辑运算符">逻辑运算符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">逻辑运算符&lt;/th>
&lt;th style="text-align:center">&lt;code>&amp;amp;&amp;amp;&lt;/code>或&lt;code>AND&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>!&lt;/code>或&lt;code>NOT&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>||&lt;/code>或&lt;code>OR&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>XOR&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">作用&lt;/td>
&lt;td style="text-align:center">与&lt;/td>
&lt;td style="text-align:center">非&lt;/td>
&lt;td style="text-align:center">或&lt;/td>
&lt;td style="text-align:center">异或&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="位运算符">位运算符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">位运算符&lt;/th>
&lt;th style="text-align:center">&lt;code>&amp;amp;&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>|&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>~&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>^&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/th>
&lt;th style="text-align:center">&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">作用&lt;/td>
&lt;td style="text-align:center">按位与&lt;/td>
&lt;td style="text-align:center">按位或&lt;/td>
&lt;td style="text-align:center">按位取反&lt;/td>
&lt;td style="text-align:center">按位异或&lt;/td>
&lt;td style="text-align:center">按位左移&lt;/td>
&lt;td style="text-align:center">按位右移&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="比较运算符">比较运算符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">比较运算符&lt;/th>
&lt;th style="text-align:center">作用&lt;/th>
&lt;th style="text-align:center">示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>=&lt;/code>&lt;/td>
&lt;td style="text-align:center">等于&lt;/td>
&lt;td style="text-align:center">Id=5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">大于&lt;/td>
&lt;td style="text-align:center">Id&amp;gt;5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">小于&lt;/td>
&lt;td style="text-align:center">Id&amp;lt;5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;td style="text-align:center">大于等于&lt;/td>
&lt;td style="text-align:center">Id&amp;gt;=5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;td style="text-align:center">小于等于&lt;/td>
&lt;td style="text-align:center">Id&amp;lt;=5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>!=&lt;/code>或&lt;code>&amp;lt;&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">不等于&lt;/td>
&lt;td style="text-align:center">Id!=5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>IS NULL&lt;/code>&lt;/td>
&lt;td style="text-align:center">为&lt;code>NULL&lt;/code>&lt;/td>
&lt;td style="text-align:center">Id IS NULL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>IS NOT NULL&lt;/code>&lt;/td>
&lt;td style="text-align:center">不为&lt;code>NULL&lt;/code>&lt;/td>
&lt;td style="text-align:center">Id IS NOT NULL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>BETWEEN AND&lt;/code>&lt;/td>
&lt;td style="text-align:center">在&amp;hellip;范围之间&lt;/td>
&lt;td style="text-align:center">Id BETWEEN 10 AND 15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>IN&lt;/code>&lt;/td>
&lt;td style="text-align:center">在&amp;hellip;列表中&lt;/td>
&lt;td style="text-align:center">Id IN (3,4,5)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>NOT IN&lt;/code>&lt;/td>
&lt;td style="text-align:center">不在&amp;hellip;列表中&lt;/td>
&lt;td style="text-align:center">Id NOT IN (3,4,5)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>LIKE&lt;/code>&lt;/td>
&lt;td style="text-align:center">模式匹配&lt;/td>
&lt;td style="text-align:center">Name LIKE &amp;lsquo;brow_&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>NOT LIKE&lt;/code>&lt;/td>
&lt;td style="text-align:center">模式匹配&lt;/td>
&lt;td style="text-align:center">Name NOT LIKE &amp;lsquo;brow_&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>REGEXP&lt;/code>&lt;/td>
&lt;td style="text-align:center">正则表达式匹配&lt;/td>
&lt;td style="text-align:center">Name REGEXP &amp;lsquo;^bro&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="数据类型">数据类型&lt;/h2>
&lt;p>MySQL 主要提供了大致三大类数据类型：数值类型，字符类型和日期类型。&lt;/p>
&lt;h3 id="char-和-varchar">CHAR 和 VARCHAR&lt;/h3>
&lt;p>字符类型。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>最大长度&lt;/th>
&lt;th>占用空间&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CHAR(M)&lt;/td>
&lt;td>0-255 字节&lt;/td>
&lt;td>数据实际长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VARCHAR(M)&lt;/td>
&lt;td>0-65535 字节&lt;/td>
&lt;td>数据长度+1或+2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>注1&lt;/code>：&lt;code>M&lt;/code> 表示的是字符数，而最大长度的单位是字节。&lt;/p>
&lt;p>&lt;code>注2&lt;/code>：当插入的数据长度超出 M 的范围时，超出部分会被裁剪，严格模式下如果超出长度，则会发生异常。&lt;/p>
&lt;p>区别：&lt;/p>
&lt;ul>
&lt;li>&lt;code>CHAR&lt;/code> 存储的长度指定后为固定值，占用存储空间也会固定。在存储的值没有达到指定值时，会在字符串右方补齐空格，而在检索的时候，右方补齐的空格会被删掉。&lt;/li>
&lt;li>&lt;code>VARCHAR&lt;/code> 存储的字符长度是可变的，存储的空间大小也相对应是可变的。当字符长度在 0-255 范围时，&lt;code>VARCHAR&lt;/code> 会使用一个字节来记录字符的长度，当长度超过 255 时，&lt;code>VARCHAR&lt;/code> 会使用两个字节来记录字符的长度。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>VARCHAR&lt;/code> 大于某些数值的时候，其会自动转换为 &lt;code>text&lt;/code>，大概规则如下：&lt;/p>
&lt;ul>
&lt;li>大于 varchar(255) 变为 &lt;code>TINYTEXT&lt;/code>&lt;/li>
&lt;li>大于 varchar(500) 变为 &lt;code>TEXT&lt;/code>&lt;/li>
&lt;li>大于 varchar(20000) 变为 &lt;code>MEDIUMTEXT&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="char-和-varchar-区别">Char 和 Varchar 区别&lt;/h4>
&lt;p>CHAR 是固定长度的字符类型，VARCHAR 则是可变长度的字符类型。&lt;/p>
&lt;p>&lt;strong>共同点&lt;/strong>&lt;/p>
&lt;p>CHAR(M) 和 VARCHAR(M) 都表示该列能存储 M 个字符。&lt;/p>
&lt;p>&lt;strong>CHAR类型特点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>CHAR 最多可以存储 255 个字符 (注意不是字节)，字符有不同的编码集，比如 UTF8 编码 (3字节)、GBK 编码 (2字节) 等。&lt;/li>
&lt;li>对于 &lt;code>CHAR(M)&lt;/code> 如果实际存储的数据长度小于M，则 MySQL 会自动会在它的右边用空格字符补足，但是在检索操作中那些填补出来的空格字符会被去掉。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>VARCHAR类型特点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>VARCHAR 的最大长度为 65535 个字节。&lt;/li>
&lt;li>VARCHAR 存储的是实际的字符串加1或2个字节用来记录字符串实际长度，字符串长度小于255字节用1字节记录，超过255就需要2字节记录。&lt;/li>
&lt;/ul>
&lt;h3 id="blob-和-text">BLOB 和 TEXT&lt;/h3>
&lt;p>&lt;code>BLOB&lt;/code> 表示的是二进制字符串(byte strings)。&lt;/p>
&lt;p>&lt;code>TEXT&lt;/code> 表示的则是非二进制字符串，也就是普通的字符串。&lt;/p>
&lt;p>&lt;code>BLOB&lt;/code> 和 &lt;code>TEXT&lt;/code> 都分别有四个类型，类型间的区别只是长度的区别。L 表示插入的字符串实际占用的字节大小。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数据类型&lt;/th>
&lt;th>占用存储空间&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>TINYBLOB&lt;/code>，&lt;code>TINYTEXT&lt;/code>&lt;/td>
&lt;td>&lt;strong>当L &amp;lt; 2的8次方，需要L + 1字节&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BLOB&lt;/code>，&lt;code>TEXT&lt;/code>&lt;/td>
&lt;td>&lt;strong>当L &amp;lt; 2的16次方，需要L + 2字节&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>MEDIUMBLOB&lt;/code>，&lt;code>MEDIUMTEXT&lt;/code>&lt;/td>
&lt;td>&lt;strong>当L &amp;lt; 2的24次方，需要L + 3字节&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LONGBLOB&lt;/code>，&lt;code>LONGTEXT&lt;/code>&lt;/td>
&lt;td>&lt;strong>当L &amp;lt; 2的32次方，需要L + 4字节&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>大多数情况下，&lt;code>TEXT&lt;/code> 和 &lt;code>VARCHAR&lt;/code> 基本可以等同，它们的区别主要有两个方面：&lt;/p>
&lt;ul>
&lt;li>&lt;code>BLOB&lt;/code> 和 &lt;code>TEXT&lt;/code> 不能设置默认值。&lt;/li>
&lt;li>对 &lt;code>BLOB&lt;/code> 和 &lt;code>TEXT&lt;/code> 的索引，必须指定索引长度。&lt;/li>
&lt;/ul>
&lt;h3 id="enum">ENUM&lt;/h3>
&lt;p>枚举类型，声明枚举类型的字段可以指定一个由字符串组成的列表，则之后插入的值只能在指定的字符串中选择。&lt;/p>
&lt;h3 id="整形">整形&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>存储大小(字节)&lt;/th>
&lt;th>有符号最小值&lt;/th>
&lt;th>无符号最小值&lt;/th>
&lt;th>无符号最大值&lt;/th>
&lt;th>无符号最大值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>TINYINT&lt;/code>&lt;/td>
&lt;td>1&lt;/td>
&lt;td>&lt;code>-128&lt;/code>&lt;/td>
&lt;td>&lt;code>0&lt;/code>&lt;/td>
&lt;td>&lt;code>127&lt;/code>&lt;/td>
&lt;td>&lt;code>255&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SMALLINT&lt;/code>&lt;/td>
&lt;td>2&lt;/td>
&lt;td>&lt;code>-32768&lt;/code>&lt;/td>
&lt;td>&lt;code>0&lt;/code>&lt;/td>
&lt;td>&lt;code>32767&lt;/code>&lt;/td>
&lt;td>&lt;code>65535&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>MEDIUMINT&lt;/code>&lt;/td>
&lt;td>3&lt;/td>
&lt;td>&lt;code>-8388608&lt;/code>&lt;/td>
&lt;td>&lt;code>0&lt;/code>&lt;/td>
&lt;td>&lt;code>8388607&lt;/code>&lt;/td>
&lt;td>&lt;code>16777215&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>INT&lt;/code>&lt;/td>
&lt;td>4&lt;/td>
&lt;td>&lt;code>-2147483648&lt;/code>&lt;/td>
&lt;td>&lt;code>0&lt;/code>&lt;/td>
&lt;td>&lt;code>2147483647&lt;/code>&lt;/td>
&lt;td>&lt;code>4294967295&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BIGINT&lt;/code>&lt;/td>
&lt;td>8&lt;/td>
&lt;td>&lt;code>-2&lt;/code>的63次方&lt;/td>
&lt;td>&lt;code>0&lt;/code>&lt;/td>
&lt;td>&lt;code>2&lt;/code>的63次方-1&lt;/td>
&lt;td>&lt;code>2&lt;/code>的64次方-1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="int10-和-bigint10能存储的数据大小一样吗">int(10) 和 bigint(10)能存储的数据大小一样吗？&lt;/h4>
&lt;p>不一样，具体原因如下：&lt;/p>
&lt;ul>
&lt;li>int 能存储四字节有符号整数。&lt;/li>
&lt;li>bigint 能存储八字节有符号整数。&lt;/li>
&lt;/ul>
&lt;p>所以能存储的数据大小不一样，其中的数字 &lt;code>10&lt;/code> 代表的只是数据的显示宽度。[^13]&lt;/p>
&lt;ul>
&lt;li>显示宽度指明Mysql最大可能显示的数字个数，数值的位数小于指定的宽度时数字左边会用&lt;strong>空格填充&lt;/strong>，空格不容易看出。&lt;/li>
&lt;li>如果插入了大于显示宽度的值，只要该值不超过该类型的取值范围，数值依然可以插入且能够显示出来。&lt;/li>
&lt;li>建表的时候指定 &lt;code>zerofill&lt;/code> 选项，则不足显示宽度的部分用 &lt;code>0&lt;/code> 填充，如果是 1 会显示成 &lt;code>0000000001&lt;/code>。&lt;/li>
&lt;li>如果没指定显示宽度， bigint 默认宽度是 20 ，int默认宽度 11。&lt;/li>
&lt;/ul>
&lt;h3 id="浮点型">浮点型&lt;/h3>
&lt;p>浮点型数值类型主要两种，&lt;code>FlOAT&lt;/code> 和 &lt;code>DOUBLE&lt;/code> 类型，分别表示单精度和双精度数值。&lt;/p>
&lt;p>&lt;code>FLOAT&lt;/code> 类型可以表示精度在 0-23 范围内的单精度数值，存储时占四个字节大小。&lt;/p>
&lt;p>&lt;code>DOUBLE&lt;/code> 类型可以表示精度在 24-53 范围内的双精度数值，存储时占八个字节大小。&lt;/p>
&lt;p>浮点型数据可以使用一种非标准的语法来指定数据的精度，例如 &lt;code>FLOAT(M,D)&lt;/code>，&lt;code>DOUBLE(M,D)&lt;/code>。在这里 &lt;code>M&lt;/code> 值指的是整个数字的最大位数，&lt;code>N&lt;/code> 值指的是小数部分的最大位数，如 &lt;code>FLOAT(7,4)&lt;/code> 能表示的最大数值是 999.9999。同时，MySQL 采用四舍五入，如果把 999.00009 插入到 &lt;code>FLOAT(7,4)&lt;/code> 中，那么最终保存的结果是 999.0001。&lt;/p>
&lt;h3 id="定点型">定点型&lt;/h3>
&lt;p>由于有一些应用场景需要精确的数字，所以就有了 &lt;code>DECIMAL&lt;/code> 类型，主要用来表示精确小数。&lt;/p>
&lt;p>&lt;code>DECIMAL&lt;/code> 同样能使用跟浮点数一样的语法来指定数据的精度，如 &lt;code>DECIMAL(M,D)&lt;/code>。需要注意的是 &lt;code>DECIMAL&lt;/code> 最大能表示的位数为 65，但是 &lt;code>DECIMAL&lt;/code> 默认的限制位数为 &lt;code>DECIMAL(10,0)&lt;/code>，所以如果要表示更大的位数，需要自行指定。&lt;/p>
&lt;h3 id="日期类型">日期类型&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数据类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>范围&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DATE()&lt;/td>
&lt;td>日期。格式：YYYY-MM-DD&lt;/td>
&lt;td>从 &amp;lsquo;1000-01-01&amp;rsquo; 到 &amp;lsquo;9999-12-31&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DATETIME()&lt;/td>
&lt;td>日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS&lt;/td>
&lt;td>从 &amp;lsquo;1000-01-01 00:00:00&amp;rsquo; 到 &amp;lsquo;9999-12-31 23:59:59&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIMESTAMP()&lt;/td>
&lt;td>时间戳。TIMESTAMP 值使用 Unix 纪元(&amp;lsquo;1970-01-01 00:00:00&amp;rsquo; UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS&lt;/td>
&lt;td>从 &amp;lsquo;1970-01-01 00:00:01&amp;rsquo; UTC 到 &amp;lsquo;2038-01-09 03:14:07&amp;rsquo; UTC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIME()&lt;/td>
&lt;td>时间。格式：HH:MM:SS&lt;/td>
&lt;td>从 &amp;lsquo;-838:59:59&amp;rsquo; 到 &amp;lsquo;838:59:59&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>YEAR()&lt;/td>
&lt;td>2 位或 4 位格式的年。&lt;/td>
&lt;td>4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>PostgreSQL 安装与配置</title><link>https://wnanbei.github.io/post/postgresql-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/postgresql-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="单机安装">单机安装&lt;/h2>
&lt;h3 id="准备">准备&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>安装依赖包&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Centos&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">yum install -y gcc readline readline-devel openssl openssl-devel zlib zlib-devel
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Ubuntu&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get install gcc make libreadline-dev openssl zlib1g-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>创建特定的数据库用户&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">groupadd -g &lt;span style="color:#ae81ff">60000&lt;/span> postgres
useradd -u &lt;span style="color:#ae81ff">60000&lt;/span> -g postgres postgres
passwd postgres
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建所需要的数据库相关目录，并对用户授权&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p /postgres/&lt;span style="color:#f92672">{&lt;/span>pgdata,pg12,archive&lt;span style="color:#f92672">}&lt;/span>
chown -R postgres:postgres /postgres
chmod -R &lt;span style="color:#ae81ff">750&lt;/span> /postgres
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>下载 &lt;code>https://www.postgresql.org/download/&lt;/code> 源文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解压源文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">tar -xjf postgresql-12.4.tar.bz2
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="安装">安装&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>进入源文件解压后目录，配置安装位置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./configure --prefix&lt;span style="color:#f92672">=&lt;/span>/postgres/pg12
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>编译并安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="环境变量">环境变量&lt;/h3>
&lt;p>在 &lt;code>.bash_profile&lt;/code> 等启动文件中配置以下环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">export PGHOME&lt;span style="color:#f92672">=&lt;/span>/postgres/pg12
export PATH&lt;span style="color:#f92672">=&lt;/span>$PGHOME/bin:$PATH
export PGDATA&lt;span style="color:#f92672">=&lt;/span>/postgres/pgdata
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="初始化数据库集簇">初始化数据库集簇&lt;/h3>
&lt;p>初始化之前需要切换到 &lt;code>postgres&lt;/code> 用户&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">/postgres/pg12/bin/initdb -D /postgres/pgdata -U postgres
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="基础配置">基础配置&lt;/h2>
&lt;h3 id="连接权限">连接权限&lt;/h3>
&lt;p>此配置文件位于 &lt;code>$PGDATA/pg_hba.conf&lt;/code>，用于控制数据库连接权限。配置格式：&lt;/p>
&lt;pre tabindex="0">&lt;code># TYPE DATABASE USER ADDRESS METHOD
host test pgtest 10.10.56.17/32 md5
&lt;/code>&lt;/pre>&lt;p>5个字段的意思分别是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>TYPE&lt;/code> - 访问类型。值：
&lt;ul>
&lt;li>&lt;code>local&lt;/code> - 本机连接&lt;/li>
&lt;li>&lt;code>host&lt;/code> - 通过 TCP/IP 连接&lt;/li>
&lt;li>&lt;code>hostssl&lt;/code> - SSL 的 TCP/IP 连接&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>DATABASE&lt;/code> - 数据库名称。值：
&lt;ul>
&lt;li>&lt;code>all&lt;/code> - 所有数据库，不包括 replication&lt;/li>
&lt;li>&lt;code>sameuser&lt;/code> - 只能连接到与 user 相同的数据库&lt;/li>
&lt;li>&lt;code>replication&lt;/code> - 物理复制连接&lt;/li>
&lt;li>具体数据库名称&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>USER&lt;/code> - 用户
&lt;ul>
&lt;li>&lt;code>all&lt;/code> - 所有账户&lt;/li>
&lt;li>具体用户名称&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ADDRESS&lt;/code> - 访问来源地址
&lt;ul>
&lt;li>&lt;code>0.0.0.0/0&lt;/code> - 所有 ipv4 地址&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>METHOD&lt;/code> - 请求方法
&lt;ul>
&lt;li>&lt;code>trust&lt;/code> - 表示信任，不需要密码即可访问&lt;/li>
&lt;li>&lt;code>reject&lt;/code> - 拒绝连接&lt;/li>
&lt;li>&lt;code>password&lt;/code> - 密码访问&lt;/li>
&lt;li>&lt;code>md5&lt;/code> - 通过 md5 加密密码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="数据库密码">数据库密码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>password postgres
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="开启日志">开启日志&lt;/h3>
&lt;p>postgres 的日志记录默认是关闭的，需要在 &lt;code>postgresql.conf&lt;/code> 配置里手动开启，默认路径为 &lt;code>$PGDATA/pg_log/&lt;/code>。&lt;/p>
&lt;pre tabindex="0">&lt;code>logging_collector = on # 开启日志
log_directory = 'pg_log' # 日志文件路径
log_filename = 'postgresql-%a.log'
log_truncate_on_rotation = on
&lt;/code>&lt;/pre>&lt;h3 id="时区">时区&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>查看当前数据库时间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">select&lt;/span> now();
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看当前数据库时区&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">show&lt;/span> time &lt;span style="color:#66d9ef">zone&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看数据库可供选择的时区&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> pg_timezone_names;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改数据库时区，在 &lt;code>postgresql.conf&lt;/code> 中找到 &lt;code>time_zone&lt;/code> 字段，更改为指定的时区名即可&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">time_zone = Asia/Shanghai
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="高级设置">高级设置&lt;/h2>
&lt;h3 id="开机自启动">开机自启动&lt;/h3>
&lt;p>使用 &lt;code>systemctl&lt;/code> 服务实现开机自启动。&lt;/p>
&lt;p>在 &lt;code>/etc/systemd/system/&lt;/code> 文件夹下，创建一个 &lt;code>.server&lt;/code> 文件，文件内容如下，主要分为&lt;code>[unit]&lt;/code>，&lt;code>[service]&lt;/code>，&lt;code>[install]&lt;/code> 三个小节。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-server" data-lang="server">[Unit]
Description=postgresql project # 描述
After=pgserver.service # 在此服务启动后才启动，这里可以不写
[Service]
Type=forking
User=ppas
Group=ppas
ExecStart=/opt/PostgresPlus/9.5AS/bin/pg_ctl start -D /opt/PostgresPlus/9.5AS/data # 启动命令
ExecReload=/opt/PostgresPlus/9.5AS/bin/pg_ctl restart -D /opt/PostgresPlus/9.5AS/data # 重新加载
ExecStop=/opt/PostgresPlus/9.5AS/bin/pg_ctl stop -D /opt/PostgresPlus/9.5AS/data # 停止，以上三命令都需要绝对路径
PrivateTmp=true # 是否给服务分配独立的临时空间（true/false）
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>Type&lt;/code> - 服务的类型，常用的有 &lt;code>simple&lt;/code>（默认类型） 和 &lt;code>forking&lt;/code>。默认的 simple 类型可以适应于绝大多数的场景，因此一般可以忽略这个参数的配置。而如果服务程序启动后会通过 fork 系统调用创建子进程，然后关闭应用程序本身进程的情况，则应该将 Type 的值设置为 forking，否则 systemd 将不会跟踪子进程的行为，而认为服务已经退出。 postgres 需要通过 fork 来创建一些子进程，所以这里选择 forKing。&lt;/li>
&lt;li>&lt;code>WantedBy&lt;/code> - 依赖当前服务的模块。&lt;code>WantedBy=multi-user.target&lt;/code> 表明当系统以多用户方式（默认的运行级别）启动时，这个服务需要被自动运行。当然还需要 systemctl enable 激活这个服务以后自动运行才会生效&lt;/li>
&lt;/ul>
&lt;h3 id="主从复制">主从复制&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>主库配置 &lt;code>postgresql.conf&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf"># 选择物理复制模式
wal_level = replica
# 开启归档
archive_mode = on
# 归档命令
archive_command = 'test ! -f /postgres/archive/%f &amp;amp;&amp;amp; cp %p /postgres/archive/%f'
max_wal_senders = 10
wal_keep_segments = 256
# 归档超时时间
wal_sender_timeout = 60s
&lt;/code>&lt;/pre>&lt;p>切换归档&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">select&lt;/span> pg_switch_wal();
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>主库创建流复制角色&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">create&lt;/span> &lt;span style="color:#66d9ef">role&lt;/span> repuser login &lt;span style="color:#66d9ef">encrypted&lt;/span> password &lt;span style="color:#e6db74">&amp;#39;password&amp;#39;&lt;/span> replication;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>主库打开流复制权限&lt;/p>
&lt;pre tabindex="0">&lt;code>host replication repuser 0.0.0.0/0 md5
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>切换到从库，使用命令拷贝主库数据库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pg_basebackup -D /postgres/pgdata -F p -P -R -h 192.168.1.61 -p &lt;span style="color:#ae81ff">5432&lt;/span> -U repuser
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置从库 &lt;code>postgresql.conf&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code># 配置到主库的连接
primary_conninfo = 'host=192.168.1.67 port=5432 user=repuser password=password'
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>主库查看备份配置情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> pg_stat_replication;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="分区表">分区表&lt;/h3>
&lt;p>首先创建主表：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#a6e22e">measurement&lt;/span> (
city_id &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">not&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>,
logdate &lt;span style="color:#66d9ef">date&lt;/span> &lt;span style="color:#66d9ef">not&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>,
peaktemp &lt;span style="color:#66d9ef">int&lt;/span>,
unitsales &lt;span style="color:#66d9ef">int&lt;/span>
) PARTITION &lt;span style="color:#66d9ef">BY&lt;/span> &lt;span style="color:#a6e22e">RANGE&lt;/span> (logdate);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后按照需要的时间粒度创建分区：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> measurement_y2006m02 PARTITION OF measurement
&lt;span style="color:#66d9ef">FOR&lt;/span> &lt;span style="color:#66d9ef">VALUES&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;2006-02-01&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">TO&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;2006-03-01&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> measurement_y2006m03 PARTITION OF measurement
&lt;span style="color:#66d9ef">FOR&lt;/span> &lt;span style="color:#66d9ef">VALUES&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;2006-03-01&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">TO&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;2006-04-01&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在主表上创建的索引会自动创建到分区上：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">INDEX&lt;/span> &lt;span style="color:#66d9ef">ON&lt;/span> &lt;span style="color:#a6e22e">measurement&lt;/span> (logdate);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外，需要在配置文件中将 &lt;code>constraint_exclusion&lt;/code> 修改为 &lt;code>partition&lt;/code>。&lt;/p></description></item><item><title>PostgreSQL 数据库与表</title><link>https://wnanbei.github.io/post/postgresql-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%A1%A8/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/postgresql-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%A1%A8/</guid><description>&lt;h2 id="数据库">数据库&lt;/h2>
&lt;h3 id="创建数据库">创建数据库&lt;/h3>
&lt;p>创建数据库需要 &lt;code>superuser&lt;/code> 或者 &lt;code>CREATEDB&lt;/code> 的权限。&lt;/p>
&lt;p>默认情况下，创建的新数据库是克隆的数据库标准模板 &lt;code>template1&lt;/code>，如果需要创建原始的数据库，需要指定模板为 &lt;code>template0&lt;/code>。&lt;/p>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">DATABASE&lt;/span> name
[ [ &lt;span style="color:#66d9ef">WITH&lt;/span> ] [ &lt;span style="color:#66d9ef">OWNER&lt;/span> [&lt;span style="color:#f92672">=&lt;/span>] user_name ]
[ &lt;span style="color:#66d9ef">TEMPLATE&lt;/span> [&lt;span style="color:#f92672">=&lt;/span>] &lt;span style="color:#66d9ef">template&lt;/span> ]
[ &lt;span style="color:#66d9ef">ENCODING&lt;/span> [&lt;span style="color:#f92672">=&lt;/span>] &lt;span style="color:#66d9ef">encoding&lt;/span> ]
[ LC_COLLATE [&lt;span style="color:#f92672">=&lt;/span>] lc_collate ]
[ LC_CTYPE [&lt;span style="color:#f92672">=&lt;/span>] lc_ctype ]
[ TABLESPACE [&lt;span style="color:#f92672">=&lt;/span>] tablespace_name ]
[ ALLOW_CONNECTIONS [&lt;span style="color:#f92672">=&lt;/span>] allowconn ]
[ &lt;span style="color:#66d9ef">CONNECTION&lt;/span> &lt;span style="color:#66d9ef">LIMIT&lt;/span> [&lt;span style="color:#f92672">=&lt;/span>] connlimit ]
[ IS_TEMPLATE [&lt;span style="color:#f92672">=&lt;/span>] istemplate ] ]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>name&lt;/code> - 数据库名。&lt;/li>
&lt;li>&lt;code>user_name&lt;/code> - 数据库的拥有者，未指定则默认为执行创建数据库命令的用户。&lt;/li>
&lt;li>&lt;code>template&lt;/code> - 数据库创建模板，默认为 &lt;code>template1&lt;/code>。&lt;/li>
&lt;li>&lt;code>encoding&lt;/code> - 字符编码，默认为模板的编码。&lt;/li>
&lt;li>&lt;code>tablespace_name&lt;/code> - 默认表空间的名称。&lt;/li>
&lt;li>&lt;code>connlimit&lt;/code> - 连接数量限制。&lt;/li>
&lt;/ul>
&lt;h3 id="删除数据库">删除数据库&lt;/h3>
&lt;p>如果有任何人正在连接到数据库，则此时无法删除数据库。&lt;/p>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">DROP&lt;/span> &lt;span style="color:#66d9ef">DATABASE&lt;/span> [ &lt;span style="color:#66d9ef">IF&lt;/span> &lt;span style="color:#66d9ef">EXISTS&lt;/span> ] name
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查看数据库">查看数据库&lt;/h3>
&lt;p>使用 &lt;code>\l+&lt;/code> 可以列出数据库的详细信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql"> List &lt;span style="color:#66d9ef">of&lt;/span> databases
Name &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Owner&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Encoding&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Collate&lt;/span> &lt;span style="color:#f92672">|&lt;/span> Ctype &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">Access&lt;/span> &lt;span style="color:#66d9ef">privileges&lt;/span>
&lt;span style="color:#75715e">-----------+----------+----------+------------+------------+-----------------------
&lt;/span>&lt;span style="color:#75715e">&lt;/span> postgres &lt;span style="color:#f92672">|&lt;/span> postgres &lt;span style="color:#f92672">|&lt;/span> UTF8 &lt;span style="color:#f92672">|&lt;/span> en_US.utf8 &lt;span style="color:#f92672">|&lt;/span> en_US.utf8 &lt;span style="color:#f92672">|&lt;/span>
template0 &lt;span style="color:#f92672">|&lt;/span> postgres &lt;span style="color:#f92672">|&lt;/span> UTF8 &lt;span style="color:#f92672">|&lt;/span> en_US.utf8 &lt;span style="color:#f92672">|&lt;/span> en_US.utf8 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">c&lt;/span>&lt;span style="color:#f92672">/&lt;/span>postgres &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> postgres&lt;span style="color:#f92672">=&lt;/span>CTc&lt;span style="color:#f92672">/&lt;/span>postgres
template1 &lt;span style="color:#f92672">|&lt;/span> postgres &lt;span style="color:#f92672">|&lt;/span> UTF8 &lt;span style="color:#f92672">|&lt;/span> en_US.utf8 &lt;span style="color:#f92672">|&lt;/span> en_US.utf8 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">c&lt;/span>&lt;span style="color:#f92672">/&lt;/span>postgres &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> postgres&lt;span style="color:#f92672">=&lt;/span>CTc&lt;span style="color:#f92672">/&lt;/span>postgres
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="切换数据库">切换数据库&lt;/h3>
&lt;p>使用 &lt;code>\c&lt;/code> 可以切换数据库，使用 &lt;code>\conninfo&lt;/code> 可以查看当前连接情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">postgres&lt;span style="color:#f92672">=#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#66d9ef">c&lt;/span> test;
You &lt;span style="color:#66d9ef">are&lt;/span> now connected &lt;span style="color:#66d9ef">to&lt;/span> &lt;span style="color:#66d9ef">database&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">user&lt;/span> &lt;span style="color:#e6db74">&amp;#34;postgres&amp;#34;&lt;/span>.
test&lt;span style="color:#f92672">=#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>conninfo
You &lt;span style="color:#66d9ef">are&lt;/span> connected &lt;span style="color:#66d9ef">to&lt;/span> &lt;span style="color:#66d9ef">database&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">user&lt;/span> &lt;span style="color:#e6db74">&amp;#34;postgres&amp;#34;&lt;/span> via socket &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/var/run/postgresql&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">at&lt;/span> port &lt;span style="color:#e6db74">&amp;#34;5432&amp;#34;&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Kubernetes 对象</title><link>https://wnanbei.github.io/post/kubernetes-%E5%AF%B9%E8%B1%A1/</link><pubDate>Wed, 06 Jan 2021 16:17:25 +0000</pubDate><guid>https://wnanbei.github.io/post/kubernetes-%E5%AF%B9%E8%B1%A1/</guid><description>&lt;p>Kubernetes 对象指的是 Kubernetes 系统的持久化实体，所有这些对象合起来，代表了集群的实际情况。&lt;/p>
&lt;p>常规的应用里，把应用程序的数据存储在数据库中，Kubernetes 将其数据以对象的形式通过 &lt;code>apiserver&lt;/code> 存储在 &lt;code>etcd&lt;/code> 中。&lt;/p>
&lt;p>这些 Kubernetes 对象描述了：&lt;/p>
&lt;ol>
&lt;li>集群中运行了哪些容器化应用程序，以及在哪个节点上运行。&lt;/li>
&lt;li>集群中对应用程序可用的资源。&lt;/li>
&lt;li>应用程序相关的策略定义，例如：重启策略、升级策略、容错策略。&lt;/li>
&lt;li>其他 Kubernetes 管理应用程序时所需要的信息。&lt;/li>
&lt;/ol>
&lt;p>一个 Kubernetes 对象代表着用户的一个意图，一旦创建了一个 Kubernetes 对象，Kubernetes 将持续工作，以尽量实现此用户的意图。&lt;/p>
&lt;h3 id="spec-和-status">spec 和 status&lt;/h3>
&lt;p>每一个 Kubernetes 对象都包含了两个重要的字段：&lt;/p>
&lt;ul>
&lt;li>&lt;code>spec&lt;/code> 由用户提供，描述了对该对象所期望的&lt;strong>目标状态&lt;/strong>。&lt;/li>
&lt;li>&lt;code>status&lt;/code> 由 Kubernetes 系统来修改，描述了该对象在 Kubernetes 系统中的&lt;strong>实际状态&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>Kubernetes 系统将不断地比较实际状态 &lt;code>staus&lt;/code> 和目标状态 &lt;code>spec&lt;/code> 之间的差异，并根据差异做出对应的调整。例如，如果任何一个副本运行失败了，Kubernetes 将启动一个新的副本，以替代失败的副本。&lt;/p>
&lt;h3 id="用-yaml-描述对象">用 yaml 描述对象&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx-deployment&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#ae81ff">....&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.yaml&lt;/code> 文件中有几个必填字段：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>apiVersion&lt;/code> - 创建对象所使用的 Kubernetes API 版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>kind&lt;/code> - 被创建对象的类型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>metadata&lt;/code> - 用于唯一确定该对象的元数据，包括 &lt;code>name&lt;/code> 和 &lt;code>namespace&lt;/code>。&lt;/p>
&lt;p>如果 &lt;code>namespace&lt;/code> 为空，则默认值为 &lt;code>default&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>spec&lt;/code> - 描述用户对该对象的期望状态。不同类型的对象，其 &lt;code>spec&lt;/code> 的格式不同。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>以下命令可以使用 &lt;code>.yaml&lt;/code> 文件创建对象：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">kubectl apply -f xxxxx.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pod">Pod&lt;/h2>
&lt;p>&lt;code>Pod&lt;/code> 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。&lt;/p>
&lt;ul>
&lt;li>Pod 通常封装一个或多个紧密相关的容器，共享一个生命周期和消耗性资源。同一个 Pod 里的容器可以使用 localhost 互相通信。&lt;/li>
&lt;li>Pod 默认不能从集群外部访问，需要设置端口才能访问。&lt;/li>
&lt;/ul>
&lt;p>在 k8s 中，Pod 的生命周期是短暂的，并不是持续性实体。&lt;/p>
&lt;p>通常不需要直接管理 Pod，而应该使用更好的可管理的高级对象，例如 &lt;code>Services&lt;/code>、&lt;code>Deployment&lt;/code>。在这些高级对象中，常常会自动的创建、销毁 Pod。&lt;/p>
&lt;p>Pod 通常也不需要一个个分别创建，而是可以使用模版批量创建。&lt;/p>
&lt;h3 id="示例">示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
  &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">twocontainers&lt;/span>
  &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
  &lt;span style="color:#f92672">labels&lt;/span>:
    &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">twocontainers&lt;/span>
  &lt;span style="color:#f92672">annotations&lt;/span>:
    &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
    &lt;span style="color:#f92672">releasedBy&lt;/span>: &lt;span style="color:#ae81ff">david&lt;/span>
    &lt;span style="color:#f92672">purpose&lt;/span>: &lt;span style="color:#ae81ff">demo&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">restartPolicy&lt;/span>: &lt;span style="color:#ae81ff">Always&lt;/span>
  &lt;span style="color:#f92672">containers&lt;/span>:
  - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">sise&lt;/span> &lt;span style="color:#75715e">#容器的名称&lt;/span>
    &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">quay.io/openshiftlabs/simpleservice:0.5.0&lt;/span> &lt;span style="color:#75715e">#创建容器所使用的镜像&lt;/span>
    &lt;span style="color:#f92672">ports&lt;/span>:
    - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">9876&lt;/span> &lt;span style="color:#75715e">#应用监听的端口&lt;/span>
  - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">shell&lt;/span> &lt;span style="color:#75715e">#容器的名称&lt;/span>
    &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">centos:7&lt;/span> &lt;span style="color:#75715e">#创建容器所使用的镜像&lt;/span>
    &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#75715e">#容器启动命令&lt;/span>
      - &lt;span style="color:#e6db74">&amp;#34;bin/bash&amp;#34;&lt;/span>
      - &lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>
      - &lt;span style="color:#e6db74">&amp;#34;sleep 10000&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="label">Label&lt;/h3>
&lt;p>一些 Pod 是有 &lt;code>Label&lt;/code> 的，这些 Label 用于声明 Pod 的属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">key1&lt;/span>: &lt;span style="color:#ae81ff">value1&lt;/span>
&lt;span style="color:#f92672">key2&lt;/span>: &lt;span style="color:#ae81ff">value2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>标签的例子有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>release: stable&lt;/code>、&lt;code>release: canary&lt;/code>&lt;/li>
&lt;li>&lt;code>environment: dev&lt;/code>、&lt;code>environment: qa&lt;/code>、&lt;code>environment: production&lt;/code>&lt;/li>
&lt;li>&lt;code>tier: frontend&lt;/code>、&lt;code>tier: backend&lt;/code>、&lt;code>tier: cache&lt;/code>&lt;/li>
&lt;li>&lt;code>partition: customerA&lt;/code>、&lt;code>partition: customerB&lt;/code>&lt;/li>
&lt;li>&lt;code>track: daily&lt;/code>、&lt;code>track: weekly&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>而其他的高级对象，可以使用 &lt;code>Label Selector&lt;/code> 批量选择特定 Label 的 Pod，来进行操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">component&lt;/span>: &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="annotation">Annotation&lt;/h3>
&lt;p>&lt;code>annotation&lt;/code> 可以用来向 Kubernetes 对象的 &lt;code>metadata.annotations&lt;/code> 字段添加任意的信息。Kubernetes 的客户端或者自动化工具可以存取这些信息以实现其自定义的逻辑。&lt;/p>
&lt;p>类似于下面的信息可以记录在注解中：&lt;/p>
&lt;ul>
&lt;li>声明式配置层用到的状态信息。&lt;/li>
&lt;li>Build、release、image 信息，例如：timestamp、release ID、git branch、PR number、image hash、registry address。&lt;/li>
&lt;li>日志、监控、分析、审计系统的参数。&lt;/li>
&lt;li>第三方工具所需要的信息，例如：name、version、build information、URL。&lt;/li>
&lt;li>轻量级的发布工具用到的信息，例如：config、checkpoint。&lt;/li>
&lt;li>负责人的联系方式，例如：电话号码、网址、电子信箱。&lt;/li>
&lt;li>用户用来记录备忘信息的说明，例如：对标准镜像做了什么样的修改、维护过程中有什么特殊信息需要记住。&lt;/li>
&lt;/ul>
&lt;h3 id="namespace">NameSpace&lt;/h3>
&lt;p>Kubernetes 通过 namespace 在同一个物理集群上支持多个虚拟集群。&lt;/p>
&lt;p>namespace 的用途是为不同团队的用户（或项目）提供虚拟的集群空间，也可以用来区分开发环境/测试环境、准上线环境/生产环境。&lt;/p>
&lt;ul>
&lt;li>namespace 内部的同类型对象不能重名。&lt;/li>
&lt;li>namespace 不可以嵌套，任何一个 Kubernetes 对象只能在一个 namespace 中。&lt;/li>
&lt;/ul>
&lt;p>当 Kubernetes 对象之间的差异不大时，无需使用名称空间来区分。&lt;/p>
&lt;h2 id="service">Service&lt;/h2>
&lt;p>&lt;code>Service&lt;/code> 主要用于描述一组 pod 的网络状态，服务连接方式。&lt;/p>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;p>&lt;code>Deployment&lt;/code> 主要用于描述一组 pod 的创建、运行、升级方式。&lt;/p></description></item><item><title>Kubernetes 架构</title><link>https://wnanbei.github.io/post/kubernetes-%E6%9E%B6%E6%9E%84/</link><pubDate>Wed, 06 Jan 2021 16:17:25 +0000</pubDate><guid>https://wnanbei.github.io/post/kubernetes-%E6%9E%B6%E6%9E%84/</guid><description>&lt;p>以下是 k8s 官方的架构图：&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/k8s/components-of-kubernetes.png" >
&lt;img src="https://wnanbei.github.io/images/k8s/components-of-kubernetes.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="control-plane">Control Plane&lt;/h2>
&lt;p>Kubernetes 的控制面 &lt;code>Control Plane&lt;/code>，负责整个集群的管理和控制。为了保证高可用，需要将控制面部署在多个 Master 实例上。&lt;/p>
&lt;h3 id="kube-apiserver">kube-apiserver&lt;/h3>
&lt;p>kube-apiserver 提供了所有内部和外部的 API 请求操作的唯一入口。同时也负责整个集群的认证、授权、访问控制、服务发现等能力。APIServer 还提供很多可扩展的能力，方便增强自己的功能。&lt;/p>
&lt;p>当集群规模很大的时候，APIServer 的吞吐量以及占用的 CPU 和内存都要很大。&lt;/p>
&lt;h3 id="kube-scheduler">kube-scheduler&lt;/h3>
&lt;p>Kube-scheduler 监听未调度的 Pod，按照预定的调度策略绑定到满足条件的节点上。&lt;/p>
&lt;h3 id="kube-controller-manager">kube-controller-manager&lt;/h3>
&lt;p>Kube-Controller-Manager 负责维护整个 Kubernetes 集群的状态，比如多副本创建、滚动更新等。&lt;/p>
&lt;p>Kube-controller-manager 并不是一个单一组件，内部包含了一组资源控制器，在启动的时候，会通过 goroutine 拉起多个资源控制器。这些控制器的逻辑仅依赖于当前状态，因为在分布式系统中没办法保证全局状态的同步。&lt;/p>
&lt;h3 id="etcd">etcd&lt;/h3>
&lt;p>etcd 是兼具一致性和高可用性的分布式键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。&lt;/p>
&lt;h2 id="node">Node&lt;/h2>
&lt;p>Node 为计算节点，或者叫作工作负载节点，每个 Node 上都会运行一些负载容器。&lt;/p>
&lt;h3 id="kubelet">kubelet&lt;/h3>
&lt;p>Kubelet 负责维护 Pod 的生命周期，比如创建和删除 Pod 对应的容器。同时也负责存储和网络的管理。一般会配合 CSI、CNI 插件一起工作。&lt;/p>
&lt;h3 id="kube-proxy">kube-proxy&lt;/h3>
&lt;p>Kube-Proxy 主要负责 Kubernetes 内部的服务通信，在主机上维护网络规则并提供转发及负载均衡能力。&lt;/p>
&lt;h3 id="container-runtime">container runtime&lt;/h3>
&lt;p>容器运行时主要负责容器的镜像管理以及容器创建及运行。&lt;/p>
&lt;p>Docker 就是很常用的容器，此外还有 Kata、Frakti 等。只要符合 CRI（Container Runtime Interface，容器运行时接口）规范的运行时，都可以在 Kubernetes 中使用。&lt;/p></description></item><item><title>动态规划之子序列问题</title><link>https://wnanbei.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</guid><description>&lt;p>&lt;strong>子序列&lt;/strong>是指给定一个序列，将给定序列中零个或多个元素去掉之后得到的结果，子序列可以是不连续的。&lt;/p>
&lt;p>一般来说，这类问题都是求一个最长子序列。而一旦涉及到子序列和最值，那几乎可以肯定，考察的是动态规划技巧，时间复杂度一般都是 $O(n^2)$。&lt;/p>
&lt;h2 id="思路">思路&lt;/h2>
&lt;p>子序列问题大概分为两种套路。&lt;/p>
&lt;h3 id="一维-dp-数组">一维 DP 数组&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = len(&lt;span style="color:#a6e22e">array&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">i&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">最值&lt;/span>(&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>], &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]&lt;span style="color:#f92672">+...&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此思路中 DP 数组定义为：&lt;/p>
&lt;p>&lt;strong>在子数组 &lt;code>array[0..i]&lt;/code> 中，以 &lt;code>array[i]&lt;/code> 结尾的目标子序列（最长递增子序列）的长度是 &lt;code>dp[i]&lt;/code>&lt;/strong>。&lt;/p>
&lt;h3 id="二维-dp-数组">二维 DP 数组&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = len(&lt;span style="color:#a6e22e">array&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([][]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">arr&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">arr&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>][&lt;span style="color:#a6e22e">j&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>][&lt;span style="color:#a6e22e">j&lt;/span>] = &lt;span style="color:#a6e22e">最值&lt;/span>(&lt;span style="color:#f92672">...&lt;/span>)
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这种思路中，分为两种情况：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>涉及两个字符串/数组时：&lt;/strong>&lt;/p>
&lt;p>DP 数组的含义为：&lt;strong>在子数组 &lt;code>arr1[0..i]&lt;/code> 和子数组 &lt;code>arr2[0..j]&lt;/code> 中，我们要求的子序列长度为 &lt;code>dp[i][j]&lt;/code>&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>只涉及一个字符串/数组时：&lt;/strong>&lt;/p>
&lt;p>DP 数组的含义为：&lt;strong>在子数组 &lt;code>array[i..j]&lt;/code> 中，我们要求的子序列的长度为 &lt;code>dp[i][j]&lt;/code>&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="编辑距离">编辑距离&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener"
>72. 编辑距离&lt;/a>&lt;/p>
&lt;p>给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数。&lt;/p>
&lt;p>你可以对一个单词进行如下三种操作：&lt;/p>
&lt;ul>
&lt;li>插入一个字符&lt;/li>
&lt;li>删除一个字符&lt;/li>
&lt;li>替换一个字符&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">minDistance&lt;/span>(&lt;span style="color:#a6e22e">word1&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">word2&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">word1&lt;/span>), len(&lt;span style="color:#a6e22e">word2&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">i&lt;/span>
}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] = &lt;span style="color:#a6e22e">i&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">tmp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">word1&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">word2&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] = &lt;span style="color:#a6e22e">last&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] = &lt;span style="color:#a6e22e">min&lt;/span>(
&lt;span style="color:#a6e22e">last&lt;/span>,
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>],
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>],
) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
}
&lt;span style="color:#a6e22e">last&lt;/span> = &lt;span style="color:#a6e22e">tmp&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>]
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">m&lt;/span> = &lt;span style="color:#a6e22e">n&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:] {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">m&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="最长递增子序列">最长递增子序列&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener"
>300. 最长递增子序列&lt;/a>&lt;/p>
&lt;p>给定一个整数数组 nums ，找到其中最长严格递增子序列的长度。&lt;/p>
&lt;p>&lt;strong>动态规划解法：&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/longest-increasing-subsequence.gif" >
&lt;img src="https://wnanbei.github.io/images/algorithm/longest-increasing-subsequence.gif"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/longest-increasing-subsequence_2.gif" >
&lt;img src="https://wnanbei.github.io/images/algorithm/longest-increasing-subsequence_2.gif"
loading="lazy"
alt="longest-increasing-subsequence_2">
&lt;/a>
&lt;figcaption>longest-increasing-subsequence_2&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">lengthOfLIS&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, len(&lt;span style="color:#a6e22e">nums&lt;/span>))
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">i&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &amp;lt; &lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
}
}
}
}
&lt;span style="color:#a6e22e">res&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">res&lt;/span> {
&lt;span style="color:#a6e22e">res&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="最长公共子序列">最长公共子序列&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener"
>1143. 最长公共子序列&lt;/a>&lt;/p>
&lt;p>给定两个字符串 text1 和 text2，返回这两个字符串的&lt;code>最长公共子序列&lt;/code>的长度。如果不存在公共子序列，返回 0。&lt;/p>
&lt;p>一个字符串的&lt;code>子序列&lt;/code>是指这样一个新的字符串：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。&lt;/p>
&lt;p>例如，&lt;code>ace&lt;/code> 是 &lt;code>abcde&lt;/code> 的子序列，但 &lt;code>aec&lt;/code> 不是 &lt;code>abcde&lt;/code> 的子序列。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两个字符串的公共子序列是这两个字符串所共同拥有的子序列。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">longestCommonSubsequence&lt;/span>(&lt;span style="color:#a6e22e">text1&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">text2&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">text1&lt;/span>), len(&lt;span style="color:#a6e22e">text2&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">m&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">tmp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">text1&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">text2&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &amp;gt; &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]
}
}
&lt;span style="color:#a6e22e">last&lt;/span> = &lt;span style="color:#a6e22e">tmp&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="两个字符串的删除操作">两个字符串的删除操作&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/delete-operation-for-two-strings/" target="_blank" rel="noopener"
>583. 两个字符串的删除操作&lt;/a>&lt;/p>
&lt;p>给定两个单词 &lt;em>word1&lt;/em> 和 &lt;em>word2&lt;/em>，找到使得 &lt;em>word1&lt;/em> 和 &lt;em>word2&lt;/em> 相同所需的最小的操作步数，每步可以删除任意一个字符串中的一个字符。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">minDistance&lt;/span>(&lt;span style="color:#a6e22e">word1&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">word2&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">longestCommonSubsequence&lt;/span>(&lt;span style="color:#a6e22e">word1&lt;/span>, &lt;span style="color:#a6e22e">word2&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> len(&lt;span style="color:#a6e22e">word1&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">+&lt;/span> len(&lt;span style="color:#a6e22e">word2&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">longestCommonSubsequence&lt;/span>(&lt;span style="color:#a6e22e">text1&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">text2&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">text1&lt;/span>), len(&lt;span style="color:#a6e22e">text2&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">m&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">tmp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">text1&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">text2&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &amp;gt; &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]
}
}
&lt;span style="color:#a6e22e">last&lt;/span> = &lt;span style="color:#a6e22e">tmp&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="两个字符串的最小ascii删除和">两个字符串的最小ASCII删除和&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/minimum-ascii-delete-sum-for-two-strings/" target="_blank" rel="noopener"
>712. 两个字符串的最小ASCII删除和&lt;/a>&lt;/p>
&lt;p>给定两个字符串 &lt;code>s1, s2&lt;/code>，找到使两个字符串相等所需删除字符的ASCII值的最小和。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">minimumDeleteSum&lt;/span>(&lt;span style="color:#a6e22e">s1&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">s2&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sumStr&lt;/span>(&lt;span style="color:#a6e22e">s1&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">sumStr&lt;/span>(&lt;span style="color:#a6e22e">s2&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">longestCommonSubsequence&lt;/span>(&lt;span style="color:#a6e22e">s1&lt;/span>, &lt;span style="color:#a6e22e">s2&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">longestCommonSubsequence&lt;/span>(&lt;span style="color:#a6e22e">text1&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">text2&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">text1&lt;/span>), len(&lt;span style="color:#a6e22e">text2&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">m&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">tmp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">text1&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">text2&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">+&lt;/span> int(&lt;span style="color:#a6e22e">text1&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>])
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &amp;gt; &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]
}
}
&lt;span style="color:#a6e22e">last&lt;/span> = &lt;span style="color:#a6e22e">tmp&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>]
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">sumStr&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">asciiCount&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span> {
&lt;span style="color:#a6e22e">asciiCount&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> int(&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>])
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">asciiCount&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="最长回文子序列">最长回文子序列&lt;/h3>
&lt;p>leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener"
>516. 最长回文子序列&lt;/a>&lt;/p>
&lt;p>给定一个字符串 s，找出其中最长的回文子序列，并返回该序列的长度。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">longestPalindromeSubseq&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#ae81ff">1&lt;/span>
}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">--&lt;/span> {
&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">tmp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] = &lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &amp;lt; &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] = &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
}
}
&lt;span style="color:#a6e22e">last&lt;/span> = &lt;span style="color:#a6e22e">tmp&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>动态规划之背包问题</title><link>https://wnanbei.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid><description>&lt;p>背包问题（Knapsack problem）是一种组合优化的NP完全问题。&lt;/p>
&lt;p>问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。&lt;/p>
&lt;p>问题的名称来源于如何选择最合适的物品放置于给定背包中。&lt;/p>
&lt;h2 id="类型">类型&lt;/h2>
&lt;h3 id="0-1背包问题">0-1背包问题&lt;/h3>
&lt;p>给定一个可装载重量为 &lt;code>W&lt;/code> 的背包和 &lt;code>N&lt;/code> 个物品，每个物品有重量和价值两个属性。&lt;/p>
&lt;ul>
&lt;li>其中第 &lt;code>i&lt;/code> 个物品的重量为 &lt;code>wt[i]&lt;/code>，价值为 &lt;code>val[i]&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>现在让你用这个背包装物品，最多能装的价值是多少？&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="分割等和子集">分割等和子集&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/partition-equal-subset-sum/" target="_blank" rel="noopener"
>416. 分割等和子集&lt;/a>&lt;/p>
&lt;p>给定一个只包含正整数的非空数组 &lt;code>nums&lt;/code>，判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">canPartition&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span> {
&lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span>&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">nums&lt;/span>)
&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">m&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">--&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] = &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]]
}
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="零钱兑换-ii">零钱兑换 II&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/coin-change-2/" target="_blank" rel="noopener"
>518. 零钱兑换 II&lt;/a>&lt;/p>
&lt;p>给定一个整数数组 &lt;code>coins&lt;/code> 表示不同面额的硬币，另给一个整数 amount 表示总金额。&lt;/p>
&lt;p>计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0。&lt;/p>
&lt;ul>
&lt;li>每一种面额的硬币有无限个。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">change&lt;/span>(&lt;span style="color:#a6e22e">amount&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">coins&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">coins&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">amount&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">amount&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">coins&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">coins&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]]
}
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">amount&lt;/span>]
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>动态规划之贪心算法</title><link>https://wnanbei.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid><description>&lt;p>贪心算法可以认为是动态规划算法的一个特例，相比动态规划：&lt;/p>
&lt;ul>
&lt;li>使用贪心算法需要满足更多的条件（贪心选择性质）。&lt;/li>
&lt;li>效率比动态规划高。&lt;/li>
&lt;/ul>
&lt;p>一个算法问题使用暴力解法需要指数级时间，如果能使用动态规划消除重叠子问题，就可以降到多项式级别的时间，如果满足贪心选择性质，那么可以进一步降低时间复杂度，达到线性级别。&lt;/p>
&lt;h2 id="概念">概念&lt;/h2>
&lt;h3 id="贪心选择性质">贪心选择性质&lt;/h3>
&lt;p>贪心选择性质就是：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>每一步都做出一个局部最优的选择，最终的结果就是全局最优。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>注：这是一种特殊性质，只有一小部分问题拥有这个性质。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="无重叠区间">无重叠区间&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/non-overlapping-intervals/" target="_blank" rel="noopener"
>435. 无重叠区间&lt;/a>&lt;/p>
&lt;p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。&lt;/p>
&lt;ul>
&lt;li>可以认为区间的终点总是大于它的起点。&lt;/li>
&lt;li>区间 &lt;code>[1,2]&lt;/code> 和 &lt;code>[2,3]&lt;/code> 的边界相互&lt;code>接触&lt;/code>，但没有相互重叠。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">eraseOverlapIntervals&lt;/span>(&lt;span style="color:#a6e22e">intervals&lt;/span> [][]&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">sort&lt;/span>.&lt;span style="color:#a6e22e">Slice&lt;/span>(&lt;span style="color:#a6e22e">intervals&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">intervals&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>][&lt;span style="color:#ae81ff">1&lt;/span>] &amp;lt; &lt;span style="color:#a6e22e">intervals&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>][&lt;span style="color:#ae81ff">1&lt;/span>]
})
&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">intervals&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">intervals&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">intervals&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:] {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">end&lt;/span> {
&lt;span style="color:#a6e22e">end&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="用最少数量的箭引爆气球">用最少数量的箭引爆气球&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener"
>452. 用最少数量的箭引爆气球&lt;/a>&lt;/p>
&lt;p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。&lt;/p>
&lt;p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 &lt;code>x&lt;/code> 处射出一支箭，若有一个气球的直径的开始和结束坐标为 &lt;code>xstart，xend&lt;/code>， 且满足 &lt;code>xstart ≤ x ≤ xend&lt;/code>，则该气球会被引爆。&lt;/p>
&lt;ul>
&lt;li>可以射出的弓箭的数量没有限制。&lt;/li>
&lt;li>弓箭一旦被射出之后，可以无限地前进。&lt;/li>
&lt;/ul>
&lt;p>求想找到使得所有气球全部被引爆，所需的弓箭的最小数量。&lt;/p>
&lt;p>给定一个数组 &lt;code>points&lt;/code>，其中 &lt;code>points [i] = [xstart,xend]&lt;/code>，返回引爆所有气球所必须射出的最小弓箭数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">findMinArrowShots&lt;/span>(&lt;span style="color:#a6e22e">points&lt;/span> [][]&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">sort&lt;/span>.&lt;span style="color:#a6e22e">Slice&lt;/span>(&lt;span style="color:#a6e22e">points&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>][&lt;span style="color:#ae81ff">1&lt;/span>] &amp;lt; &lt;span style="color:#a6e22e">points&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>][&lt;span style="color:#ae81ff">1&lt;/span>]
})
&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:] {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &amp;gt; &lt;span style="color:#a6e22e">end&lt;/span> {
&lt;span style="color:#a6e22e">end&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>数据结构与算法之二叉搜索树</title><link>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>&lt;p>二叉搜索树 &lt;code>Binary Search Tree&lt;/code> 简称 &lt;code>BST&lt;/code>，是二叉树的一种特殊形式。二叉搜索树每个节点 &lt;code>node&lt;/code> 都具有以下性质：&lt;/p>
&lt;ul>
&lt;li>左子树所有子节点的值都比 &lt;code>node&lt;/code> 的值要小，右子树所有子节点的值都比 &lt;code>node&lt;/code> 的值大。&lt;/li>
&lt;li>它的左侧子树和右侧子树都是 BST。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>BST 有一个重要的性质: BST 的中序遍历结果是有序的（升序）&lt;/strong>。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/bst_example.png" >
&lt;img src="https://wnanbei.github.io/images/algorithm/bst_example.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="不同的二叉搜索树-ii">不同的二叉搜索树 II&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/unique-binary-search-trees-ii/" target="_blank" rel="noopener"
>不同的二叉搜索树 II&lt;/a>&lt;/p>
&lt;p>一个整数 &lt;code>n&lt;/code>，生成并返回所有由 &lt;code>n&lt;/code> 个节点组成且节点值从 &lt;code>1&lt;/code> 到 &lt;code>n&lt;/code> 互不相同的不同二叉搜索树。&lt;/p>
&lt;p>可以按任意顺序返回答案。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">generateTrees&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">generate&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">generate&lt;/span>(&lt;span style="color:#a6e22e">low&lt;/span>, &lt;span style="color:#a6e22e">high&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#a6e22e">trees&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">low&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">high&lt;/span> {
&lt;span style="color:#a6e22e">trees&lt;/span> = append(&lt;span style="color:#a6e22e">trees&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">trees&lt;/span>
}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">low&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">high&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">leftTrees&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">generate&lt;/span>(&lt;span style="color:#a6e22e">low&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#a6e22e">rightTrees&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">generate&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">high&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">leftTrees&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">rightTrees&lt;/span> {
&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>{
&lt;span style="color:#a6e22e">Val&lt;/span>: &lt;span style="color:#a6e22e">i&lt;/span>,
&lt;span style="color:#a6e22e">Left&lt;/span>: &lt;span style="color:#a6e22e">left&lt;/span>,
&lt;span style="color:#a6e22e">Right&lt;/span>: &lt;span style="color:#a6e22e">right&lt;/span>,
}
&lt;span style="color:#a6e22e">trees&lt;/span> = append(&lt;span style="color:#a6e22e">trees&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>)
}
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">trees&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="不同的二叉搜索树">不同的二叉搜索树&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener"
>不同的二叉搜索树&lt;/a>&lt;/p>
&lt;p>给定一个整数 &lt;code>n&lt;/code>，求由 &lt;code>n&lt;/code> 个节点组成且节点值从 &lt;code>1&lt;/code> 到 &lt;code>n&lt;/code> 互不相同的二叉搜索树有多少种？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">cache&lt;/span> [][]&lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">numTrees&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">cache&lt;/span> = make([][]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">:=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span>&lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">cache&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>(&lt;span style="color:#a6e22e">low&lt;/span>, &lt;span style="color:#a6e22e">high&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">low&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">high&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">cache&lt;/span>[&lt;span style="color:#a6e22e">low&lt;/span>][&lt;span style="color:#a6e22e">high&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cache&lt;/span>[&lt;span style="color:#a6e22e">low&lt;/span>][&lt;span style="color:#a6e22e">high&lt;/span>]
}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">low&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">high&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>(&lt;span style="color:#a6e22e">low&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">high&lt;/span>)
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span>
}
&lt;span style="color:#a6e22e">cache&lt;/span>[&lt;span style="color:#a6e22e">low&lt;/span>][&lt;span style="color:#a6e22e">high&lt;/span>] = &lt;span style="color:#a6e22e">c&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="验证二叉搜索树">验证二叉搜索树&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener"
>验证二叉搜索树&lt;/a>&lt;/p>
&lt;p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">isValidBST&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">validBST&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">validBST&lt;/span> = &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">validBST&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>, &lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">validBST&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">max&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">validBST&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="二叉搜索树中第k小的元素">二叉搜索树中第K小的元素&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/" target="_blank" rel="noopener"
>二叉搜索树中第K小的元素&lt;/a>&lt;/p>
&lt;p>给定一个二叉搜索树的根节点 &lt;code>root&lt;/code>，和一个整数 &lt;code>k&lt;/code>，设计一个算法查找其中第 &lt;code>k&lt;/code> 个最小元素（从 1 开始计数）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">kthSmallest&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">stack&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>{}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> len(&lt;span style="color:#a6e22e">stack&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">stack&lt;/span> = append(&lt;span style="color:#a6e22e">stack&lt;/span>, &lt;span style="color:#a6e22e">root&lt;/span>)
&lt;span style="color:#a6e22e">root&lt;/span> = &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">stack&lt;/span>[len(&lt;span style="color:#a6e22e">stack&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#a6e22e">stack&lt;/span> = &lt;span style="color:#a6e22e">stack&lt;/span>[:len(&lt;span style="color:#a6e22e">stack&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#a6e22e">k&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>
}
&lt;span style="color:#a6e22e">root&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除二叉搜索树中的节点">删除二叉搜索树中的节点&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/delete-node-in-a-bst/" target="_blank" rel="noopener"
>删除二叉搜索树中的节点&lt;/a>&lt;/p>
&lt;p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，保证二叉搜索树的性质不变。返回二叉搜索树的根节点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">deleteNode&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>:
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> = &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>
&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">deleteNode&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>)
}
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">key&lt;/span>:
&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">deleteNode&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">key&lt;/span>:
&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> = &lt;span style="color:#a6e22e">deleteNode&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">n&lt;/span> = &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="把二叉搜索树转换为累加树">把二叉搜索树转换为累加树&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/convert-bst-to-greater-tree/" target="_blank" rel="noopener"
>把二叉搜索树转换为累加树&lt;/a>&lt;/p>
&lt;p>给出二叉搜索树的根节点，该树的节点值各不相同，将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。&lt;/p>
&lt;p>二叉搜索树满足下列约束条件：&lt;/p>
&lt;ul>
&lt;li>节点的左子树仅包含键&lt;strong>小于&lt;/strong>节点键的节点。&lt;/li>
&lt;li>节点的右子树仅包含键&lt;strong>大于&lt;/strong>节点键的节点。&lt;/li>
&lt;li>左右子树也必须是二叉搜索树。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">convertBST&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">bfs&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>)
&lt;span style="color:#a6e22e">bfs&lt;/span> = &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">bfs&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
&lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> = &lt;span style="color:#a6e22e">sum&lt;/span>
&lt;span style="color:#a6e22e">bfs&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>)
}
&lt;span style="color:#a6e22e">bfs&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="二叉搜索树中的搜索">二叉搜索树中的搜索&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener"
>二叉搜索树中的搜索&lt;/a>&lt;/p>
&lt;p>给定二叉搜索树的根节点和一个值，在 BST 中找到节点值等于给定值的节点，返回以该节点为根的子树，如果节点不存在，返回 NULL。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">searchBST&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">dfs&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>)
&lt;span style="color:#a6e22e">dfs&lt;/span> = &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>:
&lt;span style="color:#a6e22e">node&lt;/span> = &lt;span style="color:#a6e22e">n&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>:
&lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>:
&lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
}
}
&lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="二叉搜索树中的插入操作">二叉搜索树中的插入操作&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/" target="_blank" rel="noopener"
>二叉搜索树中的插入操作&lt;/a>&lt;/p>
&lt;p>给定二叉搜索树的根节点和要插入树中的值，将值插入二叉搜索树。返回插入后二叉搜索树的根节点。&lt;/p>
&lt;ul>
&lt;li>输入的数据和原始二叉搜索树中的任意节点值都不同。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">insertIntoBST&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">dfs&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>
&lt;span style="color:#a6e22e">dfs&lt;/span> = &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>{&lt;span style="color:#a6e22e">Val&lt;/span>: &lt;span style="color:#a6e22e">val&lt;/span>}
}
&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>:
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> = &lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>:
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>数据结构与算法之二叉树</title><link>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>&lt;p>树是一种经常用到的数据结构，用来模拟具有树状结构性质的数据集合。树里的每一个节点有一个值和一个包含所有子节点的列表。&lt;/p>
&lt;p>从图的观点来看，树也可视为一个拥有 N 个节点和 N-1 条边的一个有向无环图。&lt;/p>
&lt;p>二叉树是一种典型的树状结构，是每个节点最多有两个子树的树结构，通常子树被称作左子树和右子树。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="概念">概念&lt;/h2>
&lt;h3 id="完美二叉树">完美二叉树&lt;/h3>
&lt;p>&lt;code>Perfect Binary Tree&lt;/code>，国内也称满二叉树。指二叉树所有叶子节点都在同一层，每个父节点都有两个子节点。&lt;/p>
&lt;p>如果完美二叉树的层数为 K，则节点总数为 $k^2 - 1$。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/perfect_binary_tree.png" >
&lt;img src="https://wnanbei.github.io/images/algorithm/perfect_binary_tree.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="完全二叉树">完全二叉树&lt;/h3>
&lt;p>&lt;code>Complete Binary Tree&lt;/code>，指每一层节点都紧凑靠左排列。&lt;/p>
&lt;p>如果完全二叉树的层数为 K，则：&lt;/p>
&lt;ul>
&lt;li>除第 K 层外，其他所有层的节点都是满的。&lt;/li>
&lt;li>第 K 层所有节点都连续集中在左边。&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/complete_binary_tree.png" >
&lt;img src="https://wnanbei.github.io/images/algorithm/complete_binary_tree.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="full-binary-tree">Full binary tree&lt;/h3>
&lt;p>&lt;code>Full binary tree&lt;/code> 所有节点，要么两个子节点都存在，要么两个子节点都不存在。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/full_binary_tree.png" >
&lt;img src="https://wnanbei.github.io/images/algorithm/full_binary_tree.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="深度优先搜索">深度优先搜索&lt;/h2>
&lt;p>这是递归遍历二叉树的三种方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 二叉树遍历框架
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">traverse&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Node&lt;/span>) {
&lt;span style="color:#75715e">// 前序遍历
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">traverse&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>)
&lt;span style="color:#75715e">// 中序遍历
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">traverse&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
&lt;span style="color:#75715e">// 后序遍历
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>快速排序&lt;/code>就是个二叉树的前序遍历&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>归并排序&lt;/code>就是个二叉树的后序遍历&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="前序遍历">前序遍历&lt;/h3>
&lt;p>前序遍历首先访问根节点，然后遍历左子树，最后遍历右子树。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/binary_tree_1.png" >
&lt;img src="https://wnanbei.github.io/images/algorithm/binary_tree_1.png"
loading="lazy"
alt="binary_tree_1">
&lt;/a>
&lt;figcaption>binary_tree_1&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="中序遍历">中序遍历&lt;/h3>
&lt;p>中序遍历是先遍历左子树，然后访问根节点，然后遍历右子树。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/binary_tree_2.png" >
&lt;img src="https://wnanbei.github.io/images/algorithm/binary_tree_2.png"
loading="lazy"
alt="binary_tree_2">
&lt;/a>
&lt;figcaption>binary_tree_2&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="后序遍历">后序遍历&lt;/h3>
&lt;p>后序遍历是先遍历左子树，然后遍历右子树，最后访问树的根节点。&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/binary_tree_3.png" >
&lt;img src="https://wnanbei.github.io/images/algorithm/binary_tree_3.png"
loading="lazy"
alt="binary_tree_3">
&lt;/a>
&lt;figcaption>binary_tree_3&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="二叉树题解">二叉树题解&lt;/h2>
&lt;h3 id="从前序与中序遍历序列构造二叉树">从前序与中序遍历序列构造二叉树&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="noopener"
>从前序与中序遍历序列构造二叉树&lt;/a>&lt;/p>
&lt;p>给定一棵树的前序遍历 &lt;code>preorder&lt;/code> 与中序遍历 &lt;code>inorder&lt;/code>。请构造二叉树并返回其根节点。&lt;/p>
&lt;p>&lt;strong>注意:&lt;/strong> 可以假设树中没有重复的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">buildTree&lt;/span>(&lt;span style="color:#a6e22e">preorder&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">inorder&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">preorder&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> len(&lt;span style="color:#a6e22e">inorder&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">TreeNode&lt;/span>)
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> = &lt;span style="color:#a6e22e">preorder&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">rootIndex&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">inorder&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">preorder&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] {
&lt;span style="color:#a6e22e">rootIndex&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>
&lt;span style="color:#66d9ef">break&lt;/span>
}
}
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> = &lt;span style="color:#a6e22e">buildTree&lt;/span>(&lt;span style="color:#a6e22e">preorder&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:&lt;span style="color:#a6e22e">rootIndex&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#a6e22e">inorder&lt;/span>[:&lt;span style="color:#a6e22e">rootIndex&lt;/span>])
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">buildTree&lt;/span>(&lt;span style="color:#a6e22e">preorder&lt;/span>[&lt;span style="color:#a6e22e">rootIndex&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:], &lt;span style="color:#a6e22e">inorder&lt;/span>[&lt;span style="color:#a6e22e">rootIndex&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:])
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="从中序与后序遍历序列构造二叉树">从中序与后序遍历序列构造二叉树&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="noopener"
>从中序与后序遍历序列构造二叉树&lt;/a>&lt;/p>
&lt;p>根据一棵树的中序遍历与后序遍历构造二叉树。&lt;/p>
&lt;p>&lt;strong>注意:&lt;/strong> 可以假设树中没有重复的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">buildTree&lt;/span>(&lt;span style="color:#a6e22e">inorder&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">postorder&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">inorder&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> len(&lt;span style="color:#a6e22e">postorder&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">TreeNode&lt;/span>)
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> = &lt;span style="color:#a6e22e">postorder&lt;/span>[len(&lt;span style="color:#a6e22e">postorder&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">rootIndex&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">inorder&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> {
&lt;span style="color:#a6e22e">rootIndex&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>
&lt;span style="color:#66d9ef">break&lt;/span>
}
}
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> = &lt;span style="color:#a6e22e">buildTree&lt;/span>(&lt;span style="color:#a6e22e">inorder&lt;/span>[:&lt;span style="color:#a6e22e">rootIndex&lt;/span>], &lt;span style="color:#a6e22e">postorder&lt;/span>[:&lt;span style="color:#a6e22e">rootIndex&lt;/span>])
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">buildTree&lt;/span>(&lt;span style="color:#a6e22e">inorder&lt;/span>[&lt;span style="color:#a6e22e">rootIndex&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:], &lt;span style="color:#a6e22e">postorder&lt;/span>[&lt;span style="color:#a6e22e">rootIndex&lt;/span>:len(&lt;span style="color:#a6e22e">postorder&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="二叉树展开为链表">二叉树展开为链表&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="noopener"
>二叉树展开为链表&lt;/a>&lt;/p>
&lt;p>给你二叉树的根结点 root，将它展开为一个单链表：&lt;/p>
&lt;ul>
&lt;li>展开后的单链表应该同样使用 TreeNode，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null。&lt;/li>
&lt;li>展开后的单链表应该与二叉树&lt;code>先序遍历&lt;/code>顺序相同。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">flatten&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">flatten&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>)
&lt;span style="color:#a6e22e">flatten&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
&lt;span style="color:#a6e22e">tmp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>
&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>
&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">p&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>
}
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">tmp&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="填充每个节点的下一个右侧节点指针">填充每个节点的下一个右侧节点指针&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/" target="_blank" rel="noopener"
>填充每个节点的下一个右侧节点指针&lt;/a>&lt;/p>
&lt;p>给定一个&lt;code>完美二叉树&lt;/code>，其所有叶子节点都在同一层，每个父节点都有两个子节点。&lt;/p>
&lt;p>二叉树定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span> {
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span>;
&lt;span style="color:#a6e22e">Node&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">left&lt;/span>;
&lt;span style="color:#a6e22e">Node&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">right&lt;/span>;
&lt;span style="color:#a6e22e">Node&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">next&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。&lt;/p>
&lt;p>初始状态下，所有 next 指针都被设置为 NULL。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">connect&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Node&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Node&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">top&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>; &lt;span style="color:#a6e22e">top&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>; &lt;span style="color:#a6e22e">top&lt;/span> = &lt;span style="color:#a6e22e">top&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">top&lt;/span>; &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>; &lt;span style="color:#a6e22e">node&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> {
&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>
}
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="翻转二叉树">翻转二叉树&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/invert-binary-tree/" target="_blank" rel="noopener"
>翻转二叉树&lt;/a>&lt;/p>
&lt;p>翻转一棵二叉树。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">invertTree&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#a6e22e">invert&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">invert&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>
&lt;span style="color:#a6e22e">invert&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>)
&lt;span style="color:#a6e22e">invert&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="二叉树的最近公共祖先">二叉树的最近公共祖先&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener"
>二叉树的最近公共祖先&lt;/a>&lt;/p>
&lt;p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p>
&lt;ul>
&lt;li>一个节点可以是它自己的祖先。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">lowestCommonAncestor&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">q&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>
}
&lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">lowestCommonAncestor&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span>)
&lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">lowestCommonAncestor&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span>)
&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="二叉树的序列化与反序列化">二叉树的序列化与反序列化&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/" target="_blank" rel="noopener"
>二叉树的序列化与反序列化&lt;/a>&lt;/p>
&lt;p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。&lt;/p>
&lt;p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列/反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;strings&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Codec&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Constructor&lt;/span>() &lt;span style="color:#a6e22e">Codec&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Codec&lt;/span>{}
}
&lt;span style="color:#75715e">// Serializes a tree to a single string.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">this&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Codec&lt;/span>) &lt;span style="color:#a6e22e">serialize&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#a6e22e">builder&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Builder&lt;/span>{}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">serl&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>)
&lt;span style="color:#a6e22e">serl&lt;/span> = &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">builder&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;null,&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">builder&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>))
&lt;span style="color:#a6e22e">builder&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">serl&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>)
&lt;span style="color:#a6e22e">serl&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
}
&lt;span style="color:#a6e22e">serl&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">builder&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()
}
&lt;span style="color:#75715e">// Deserializes your encoded data to tree.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">this&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Codec&lt;/span>) &lt;span style="color:#a6e22e">deserialize&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Split&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">deserl&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">deserl&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">*&lt;/span>[]&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#a6e22e">nodeV&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span> = (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)[&lt;span style="color:#ae81ff">1&lt;/span>:]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">nodeV&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;null&amp;#34;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Atoi&lt;/span>(&lt;span style="color:#a6e22e">nodeV&lt;/span>)
&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>{&lt;span style="color:#a6e22e">Val&lt;/span>: &lt;span style="color:#a6e22e">v&lt;/span>}
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> = &lt;span style="color:#a6e22e">deserl&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">deserl&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="寻找二叉树重复的子树">寻找二叉树重复的子树&lt;/h3>
&lt;p>Leetcode 题目描述: &lt;a class="link" href="https://leetcode-cn.com/problems/find-duplicate-subtrees/" target="_blank" rel="noopener"
>寻找二叉树重复的子树&lt;/a>&lt;/p>
&lt;p>给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。&lt;/p>
&lt;p>两棵树重复是指它们具有相同的结构以及相同的结点值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">findDuplicateSubtrees&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#a6e22e">nodes&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">dfs&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">dfs&lt;/span> = &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
}
&lt;span style="color:#a6e22e">strBuilder&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Builder&lt;/span>{}
&lt;span style="color:#a6e22e">strBuilder&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span>))
&lt;span style="color:#a6e22e">strBuilder&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">strBuilder&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>))
&lt;span style="color:#a6e22e">strBuilder&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">strBuilder&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>))
&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strBuilder&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>[&lt;span style="color:#a6e22e">s&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;span style="color:#a6e22e">nodes&lt;/span> = append(&lt;span style="color:#a6e22e">nodes&lt;/span>, &lt;span style="color:#a6e22e">node&lt;/span>)
}
}
&lt;span style="color:#a6e22e">count&lt;/span>[&lt;span style="color:#a6e22e">s&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>
}
&lt;span style="color:#a6e22e">dfs&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">nodes&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="最大二叉树">最大二叉树&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/maximum-binary-tree/" target="_blank" rel="noopener"
>最大二叉树&lt;/a>&lt;/p>
&lt;p>给定一个不含重复元素的整数数组 &lt;code>nums&lt;/code> 。一个以此数组直接递归构建的&lt;code>最大二叉树&lt;/code>定义如下：&lt;/p>
&lt;ol>
&lt;li>二叉树的根是数组 nums 中的最大元素。&lt;/li>
&lt;li>左子树是通过数组中 最大值左边部分 递归构造出的最大二叉树。&lt;/li>
&lt;li>右子树是通过数组中 最大值右边部分 递归构造出的最大二叉树。&lt;/li>
&lt;/ol>
&lt;p>返回有给定数组 nums 构建的 最大二叉树 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">constructMaximumBinaryTree&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">nums&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">TreeNode&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">nums&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> = &lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>
}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>, &lt;span style="color:#a6e22e">nodeVal&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">nodeVal&lt;/span> {
&lt;span style="color:#a6e22e">index&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>
&lt;span style="color:#a6e22e">nodeVal&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>
}
}
&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> = &lt;span style="color:#a6e22e">nodeVal&lt;/span>
&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span> = &lt;span style="color:#a6e22e">constructMaximumBinaryTree&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#a6e22e">index&lt;/span>])
&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span> = &lt;span style="color:#a6e22e">constructMaximumBinaryTree&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#a6e22e">index&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> : len(&lt;span style="color:#a6e22e">nums&lt;/span>)])
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="完全二叉树题解">完全二叉树题解&lt;/h2>
&lt;h3 id="完全二叉树的节点个数">完全二叉树的节点个数&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener"
>222. 完全二叉树的节点个数&lt;/a>&lt;/p>
&lt;p>求出一棵完全二叉树的节点个数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">countNodes&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
}
&lt;span style="color:#a6e22e">leftHeight&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">countLeft&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>)
&lt;span style="color:#a6e22e">rightHeight&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">countRight&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">leftHeight&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">rightHeight&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">leftHeight&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">countNodes&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">countNodes&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">countLeft&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">n&lt;/span> = &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Left&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">countRight&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TreeNode&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">n&lt;/span> = &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Right&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>数据结构与算法之单链表问题</title><link>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98/</guid><description>&lt;p>常说的链表为单链表，数据结构如下：&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/images/algorithm/linkedlist.png" >
&lt;img src="https://wnanbei.github.io/images/algorithm/linkedlist.png"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Go 实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ListNode&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Val&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">Next&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="反转链表">反转链表&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener"
>206. 反转链表&lt;/a>&lt;/p>
&lt;p>输入一个链表的头节点，反转该链表并输出反转后链表的头节点。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;blockquote>
&lt;p>输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>双指针&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reverseList&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span>, &lt;span style="color:#a6e22e">cur&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">head&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">cur&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">cur&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>, &lt;span style="color:#a6e22e">pre&lt;/span>, &lt;span style="color:#a6e22e">cur&lt;/span> = &lt;span style="color:#a6e22e">pre&lt;/span>, &lt;span style="color:#a6e22e">cur&lt;/span>, &lt;span style="color:#a6e22e">cur&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>递归&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reverseList&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">head&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">head&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> { &lt;span style="color:#75715e">// head == nil 判断是避免传入一个无节点空链表时发生异常
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">head&lt;/span>
}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">newNode&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>
&lt;span style="color:#a6e22e">newNode&lt;/span> = &lt;span style="color:#a6e22e">reverseList&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>)
&lt;span style="color:#a6e22e">head&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">head&lt;/span>
&lt;span style="color:#a6e22e">head&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">newNode&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="反转部分链表">反转部分链表&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/reverse-linked-list-ii/" target="_blank" rel="noopener"
>92. 反转链表 II&lt;/a>&lt;/p>
&lt;p>给定单链表的头指针 head 和两个整数 left 和 right，其中 left &amp;lt;= right。&lt;/p>
&lt;p>反转从位置 left 到位置 right 的链表节点，返回反转后的链表 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reverseBetween&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>, &lt;span style="color:#a6e22e">left&lt;/span>, &lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span> {
&lt;span style="color:#75715e">// 设置 dummyNode 是这一类问题的一般做法
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">dummyNode&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>{&lt;span style="color:#a6e22e">Val&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>}
&lt;span style="color:#a6e22e">dummyNode&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">head&lt;/span>
&lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dummyNode&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">left&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">pre&lt;/span> = &lt;span style="color:#a6e22e">pre&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
&lt;span style="color:#a6e22e">cur&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">right&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">left&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cur&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#a6e22e">cur&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">pre&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#a6e22e">pre&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">next&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dummyNode&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="k-个一组翻转链表">K 个一组翻转链表&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener"
>25. K 个一组翻转链表&lt;/a>&lt;/p>
&lt;p>给定一个链表，每 k 个节点一组进行翻转，返回翻转后的链表。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>k 是一个正整数，它的值小于或等于链表的长度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果节点总数不是 k 的整数倍，那么将最后剩余的节点保持原有顺序。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span>, &lt;span style="color:#a6e22e">tail&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>) {
&lt;span style="color:#a6e22e">pre&lt;/span>, &lt;span style="color:#a6e22e">cur&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tail&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>, &lt;span style="color:#a6e22e">head&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">tail&lt;/span> {
&lt;span style="color:#a6e22e">tmp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cur&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#a6e22e">cur&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">pre&lt;/span>
&lt;span style="color:#a6e22e">pre&lt;/span> = &lt;span style="color:#a6e22e">cur&lt;/span>
&lt;span style="color:#a6e22e">cur&lt;/span> = &lt;span style="color:#a6e22e">tmp&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">tail&lt;/span>, &lt;span style="color:#a6e22e">head&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reverseKGroup&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span> {
&lt;span style="color:#a6e22e">dmy&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">ListNode&lt;/span>)
&lt;span style="color:#a6e22e">dmy&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">head&lt;/span>
&lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dmy&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">head&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">tail&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">k&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">tail&lt;/span> = &lt;span style="color:#a6e22e">tail&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">tail&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dmy&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
}
&lt;span style="color:#a6e22e">nex&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tail&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#a6e22e">head&lt;/span>, &lt;span style="color:#a6e22e">tail&lt;/span> = &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span>, &lt;span style="color:#a6e22e">tail&lt;/span>)
&lt;span style="color:#a6e22e">pre&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">head&lt;/span>
&lt;span style="color:#a6e22e">tail&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">nex&lt;/span>
&lt;span style="color:#a6e22e">pre&lt;/span> = &lt;span style="color:#a6e22e">tail&lt;/span>
&lt;span style="color:#a6e22e">head&lt;/span> = &lt;span style="color:#a6e22e">tail&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dmy&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="回文链表">回文链表&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/palindrome-linked-list/" target="_blank" rel="noopener"
>234. 回文链表&lt;/a>&lt;/p>
&lt;p>给定一个单链表的头节点 &lt;code>head&lt;/code>，判断该链表是否为回文链表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">isPalindrome&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#a6e22e">slow&lt;/span>, &lt;span style="color:#a6e22e">fast&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">head&lt;/span>, &lt;span style="color:#a6e22e">head&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">fast&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">fast&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">slow&lt;/span> = &lt;span style="color:#a6e22e">slow&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#a6e22e">fast&lt;/span> = &lt;span style="color:#a6e22e">fast&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">fast&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">slow&lt;/span> = &lt;span style="color:#a6e22e">slow&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
&lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#a6e22e">slow&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">head&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span>.&lt;span style="color:#a6e22e">Val&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#a6e22e">head&lt;/span> = &lt;span style="color:#a6e22e">head&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#a6e22e">right&lt;/span> = &lt;span style="color:#a6e22e">right&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#a6e22e">head&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">cur&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ListNode&lt;/span> = &lt;span style="color:#a6e22e">head&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">cur&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cur&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;span style="color:#a6e22e">cur&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">pre&lt;/span>
&lt;span style="color:#a6e22e">pre&lt;/span> = &lt;span style="color:#a6e22e">cur&lt;/span>
&lt;span style="color:#a6e22e">cur&lt;/span> = &lt;span style="color:#a6e22e">next&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>数据结构与算法之常见动态规划问题</title><link>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/</guid><description>&lt;p>&lt;strong>动态规划问题的一般形式就是求最值&lt;/strong>。比如求&lt;strong>最长&lt;/strong>递增子序列，&lt;strong>最小&lt;/strong>编辑距离等等。&lt;/p>
&lt;p>&lt;strong>求解动态规划的核心问题是穷举&lt;/strong>。因为要求最值，要把所有可行的答案穷举出来，然后在其中找最值。&lt;/p>
&lt;h2 id="概念">概念&lt;/h2>
&lt;h3 id="动态规划三要素">动态规划三要素&lt;/h3>
&lt;ul>
&lt;li>&lt;code>重叠子问题&lt;/code> - 动态规划的穷举比较特别，因为存在重叠子问题，如果暴力穷举的话效率会极其低下，所以需要&lt;code>备忘录&lt;/code>或者 &lt;code>DP table&lt;/code> 来优化穷举过程，避免不必要的计算。&lt;/li>
&lt;li>&lt;code>最优子结构&lt;/code> - 动态规划问题一定会具备最优子结构，才能通过子问题的最值得到原问题的最值。&lt;/li>
&lt;li>&lt;code>状态转移方程&lt;/code> - 虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出正确的状态转移方程，才能正确地穷举。&lt;/li>
&lt;/ul>
&lt;h3 id="状态转移方程">状态转移方程&lt;/h3>
&lt;p>动态规划三要素中，写出状态转移方程是最困难的，以下是辅助思考状态转移方程的一个思维框架：&lt;/p>
&lt;ol>
&lt;li>明确 &lt;code>base case&lt;/code>&lt;/li>
&lt;li>明确 &lt;code>状态&lt;/code>&lt;/li>
&lt;li>明确 &lt;code>选择&lt;/code>&lt;/li>
&lt;li>定义 &lt;code>dp 数组&lt;/code>/&lt;code>函数&lt;/code>的含义&lt;/li>
&lt;/ol>
&lt;h3 id="最优子结构">最优子结构&lt;/h3>
&lt;p>最优子结构是某些问题的一种特定性质，通过子问题的最优值推出规模更大的问题的最优值。&lt;/p>
&lt;p>找最优子结构的过程，其实就是证明状态转移方程正确性的过程，方程符合最优子结构就可以写暴力解了，写出暴力解就可以看出有没有重叠子问题了，有则优化，无则 OK。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="斐波那契数">斐波那契数&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener"
>509. 斐波那契数&lt;/a>&lt;/p>
&lt;p>斐波那契数，通常用 &lt;code>F(n)&lt;/code> 表示，形成的序列称为斐波那契数列。&lt;/p>
&lt;p>该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：&lt;/p>
&lt;blockquote>
&lt;p>F(0) = 0，F(1) = 1
F(n) = F(n - 1) + F(n - 2)，其中 n &amp;gt; 1&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>代码实现：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">fib&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">3&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
}
&lt;span style="color:#a6e22e">pre&lt;/span>, &lt;span style="color:#a6e22e">cur&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">cur&lt;/span>
&lt;span style="color:#a6e22e">pre&lt;/span>, &lt;span style="color:#a6e22e">cur&lt;/span> = &lt;span style="color:#a6e22e">cur&lt;/span>, &lt;span style="color:#a6e22e">sum&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cur&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="零钱兑换">零钱兑换&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener"
>322. 零钱兑换&lt;/a>&lt;/p>
&lt;p>给定一个整数数组 &lt;code>coins&lt;/code>，表示不同面额的硬币。以及一个整数 &lt;code>amount&lt;/code>，表示总金额。&lt;/p>
&lt;ul>
&lt;li>计算并返回可以凑成总金额所需的最少的硬币个数。&lt;/li>
&lt;li>如果没有任何一种硬币组合能组成总金额，返回 -1。&lt;/li>
&lt;li>每种硬币的数量是无限的。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>状态转移方程：&lt;/strong>&lt;/p>
&lt;p>$ dp(n)=\left{\begin{aligned} 0,n=0 \ -1,n&amp;lt;1 \ \min{dp(n-coin)+1|coin\in(coins)},n&amp;gt;0 \end{aligned} \right.$&lt;/p>
&lt;p>&lt;strong>代码实现：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">coinChange&lt;/span>(&lt;span style="color:#a6e22e">coins&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">amount&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">amount&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">amount&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
}
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">coin&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">coins&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">coin&lt;/span> {
&lt;span style="color:#66d9ef">continue&lt;/span>
}
&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">coin&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &amp;gt; &lt;span style="color:#a6e22e">next&lt;/span> {
&lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">next&lt;/span>
}
}
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">amount&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">amount&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">amount&lt;/span>]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="下降路径最小和">下降路径最小和&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/minimum-falling-path-sum/" target="_blank" rel="noopener"
>931. 下降路径最小和&lt;/a>&lt;/p>
&lt;p>给定一个 &lt;code>n x n&lt;/code> 的方形整数数组 &lt;code>matrix&lt;/code> ，找出并返回通过 &lt;code>matrix&lt;/code> 的下降路径的最小和 。&lt;/p>
&lt;p>下降路径：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>可以从第一行中的任何元素开始，并从每一行中选择一个元素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。&lt;/p>
&lt;p>具体来说，位置 &lt;code>(row, col)&lt;/code> 的下一个元素应当是 &lt;code>(row + 1, col - 1)&lt;/code>、&lt;code>(row + 1, col)&lt;/code> 或者 &lt;code>(row + 1, col + 1)&lt;/code> 。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">minFallingPathSum&lt;/span>(&lt;span style="color:#a6e22e">matrix&lt;/span> [][]&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">matrix&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">--&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">matrix&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>][&lt;span style="color:#a6e22e">j&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">matrix&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>][&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &amp;lt; &lt;span style="color:#a6e22e">m&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span> = &lt;span style="color:#a6e22e">matrix&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>][&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
}
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">matrix&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>][&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &amp;lt; &lt;span style="color:#a6e22e">m&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span> = &lt;span style="color:#a6e22e">matrix&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>][&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
}
}
&lt;span style="color:#a6e22e">matrix&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>][&lt;span style="color:#a6e22e">j&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>(&lt;span style="color:#a6e22e">matrix&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">...&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">res&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">MaxInt32&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">res&lt;/span> {
&lt;span style="color:#a6e22e">res&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>数据结构与算法之数组</title><link>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84/</guid><description>&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="两数之和">两数之和&lt;/h3>
&lt;p>Leetcode: &lt;a class="link" href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener"
>1. 两数之和&lt;/a>&lt;/p>
&lt;p>给定一个整数数组 &lt;code>nums&lt;/code> 和一个整数目标值 &lt;code>target&lt;/code>，在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。&lt;/p>
&lt;ul>
&lt;li>可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。&lt;/li>
&lt;li>可以按任意顺序返回答案。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">twoSum&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">target&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) []&lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#a6e22e">hashTable&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">hashTable&lt;/span>[&lt;span style="color:#a6e22e">target&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>}
}
&lt;span style="color:#a6e22e">hashTable&lt;/span>[&lt;span style="color:#a6e22e">x&lt;/span>] = &lt;span style="color:#a6e22e">i&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>时间复杂度：O(N)，其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x。&lt;/p>
&lt;p>空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。&lt;/p></description></item><item><title>Gin 启动与配置</title><link>https://wnanbei.github.io/post/gin-%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>Gin 的安装、启动、配置与部分简介。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ go get -u github.com/gin-gonic/gin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/ping&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>,
})
})
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>() &lt;span style="color:#75715e">// 默认监听并在 0.0.0.0:8080 上启动服务
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动">启动&lt;/h2>
&lt;h3 id="创建路由">创建路由&lt;/h3>
&lt;p>通常情况下使用 &lt;code>gin.Default()&lt;/code> 方法获取 gin 实例，但此方法获取的引擎默认使用两个中间件 Logger 和 Recovery。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果希望使用无中间件的实例，使用以下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自定义-http-配置">自定义 HTTP 配置&lt;/h3>
&lt;p>直接使用 &lt;code>http.ListenAndServe()&lt;/code> ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">router&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>{
&lt;span style="color:#a6e22e">Addr&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Handler&lt;/span>: &lt;span style="color:#a6e22e">router&lt;/span>,
&lt;span style="color:#a6e22e">ReadTimeout&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">WriteTimeout&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">MaxHeaderBytes&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>,
}
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运行多个服务">运行多个服务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;golang.org/x/sync/errgroup&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#a6e22e">errgroup&lt;/span>.&lt;span style="color:#a6e22e">Group&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">router01&lt;/span>() &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span> {
&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Recovery&lt;/span>())
&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(
&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>,
&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;code&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Welcome server 01&amp;#34;&lt;/span>,
},
)
})
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">router02&lt;/span>() &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span> {
&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Recovery&lt;/span>())
&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(
&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>,
&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;code&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Welcome server 02&amp;#34;&lt;/span>,
},
)
})
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">server01&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>{
&lt;span style="color:#a6e22e">Addr&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Handler&lt;/span>: &lt;span style="color:#a6e22e">router01&lt;/span>(),
&lt;span style="color:#a6e22e">ReadTimeout&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">WriteTimeout&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
}
&lt;span style="color:#a6e22e">server02&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>{
&lt;span style="color:#a6e22e">Addr&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;:8081&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Handler&lt;/span>: &lt;span style="color:#a6e22e">router02&lt;/span>(),
&lt;span style="color:#a6e22e">ReadTimeout&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">WriteTimeout&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
}
&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">Go&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">server01&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>()
})
&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">Go&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">server02&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>()
})
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">Wait&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Gin 获取请求数据</title><link>https://wnanbei.github.io/post/gin-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</guid><description>&lt;p>Gin 获取客户端发送请求的各种路由、URL、Post 表单、header 等数据，或者将这些数据绑定到模型中。&lt;/p>
&lt;h2 id="直接获取">直接获取&lt;/h2>
&lt;h3 id="路由参数">路由参数&lt;/h3>
&lt;p>Gin 可以直接使用 &lt;code>Param()&lt;/code> 方法或者 &lt;code>Params&lt;/code> 字段获取路由中的参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">Param&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Params&lt;/span> []&lt;span style="color:#a6e22e">Param&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ps&lt;/span> &lt;span style="color:#a6e22e">Params&lt;/span>) &lt;span style="color:#a6e22e">ByName&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">va&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ps&lt;/span> &lt;span style="color:#a6e22e">Params&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user/:name/*action&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Param&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">action&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Param&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;action&amp;#34;&lt;/span>)
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user/:id&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>){
&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Params&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Params&lt;/span>.&lt;span style="color:#a6e22e">ByName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="url-参数">url 参数&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>获取单个参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetQuery&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">DefaultQuery&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">defaultValue&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>获取数组&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetQueryArray&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">QueryArray&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">ids&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">QueryArray&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>,&lt;span style="color:#a6e22e">ids&lt;/span>)
})
&lt;span style="color:#75715e">// 请求：http://localhost:8080/user?id=10&amp;amp;id=11&amp;amp;id=12
&lt;/span>&lt;span style="color:#75715e">// 响应：[&amp;#34;10&amp;#34;,&amp;#34;11&amp;#34;,&amp;#34;12&amp;#34;]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>获取 Map&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">QueryMap&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetQueryMap&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">ids&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">QueryMap&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ids&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">//ids, err := c.GetQueryMap(&amp;#34;ids&amp;#34;)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>,&lt;span style="color:#a6e22e">ids&lt;/span>)
})
&lt;span style="color:#75715e">// 请求：http://localhost:8080/user?ids[10]=zhang
&lt;/span>&lt;span style="color:#75715e">// 响应：{&amp;#34;10&amp;#34;:&amp;#34;zhang&amp;#34;}
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="post-表单">Post 表单&lt;/h3>
&lt;p>以下方法，只能获取 &lt;code>Content-type&lt;/code> 是 &lt;code>application/x-www-form-urlencoded&lt;/code> 或 &lt;code>multipart/form-data&lt;/code> 时 &lt;code>body&lt;/code> 中的数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">PostForm&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">DefaultPostForm&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">defaultValue&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">PostFormArray&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">PostFormMap&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetPostForm&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetPostFormArray&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetPostFormMap&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/form_post&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">PostForm&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">nick&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">DefaultPostForm&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;nick&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;anonymous&amp;#34;&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="原始数据">原始数据&lt;/h3>
&lt;p>如果需要获取请求 body 中的原始数据，可以使用此方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetRawData&lt;/span>() ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="绑定-model">绑定 Model&lt;/h2>
&lt;p>Gin 提供了两类方法来绑定 Model，分别是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Bind&lt;/code>，&lt;code>BindUri&lt;/code>，&lt;code>BindQuery&lt;/code>，&lt;code>BindJSON&lt;/code>，&lt;code>BindXML&lt;/code>，&lt;code>BindYAML&lt;/code>&lt;/li>
&lt;li>&lt;code>ShouldBind&lt;/code>，&lt;code>ShouldBindUri&lt;/code>，&lt;code>ShouldBindQuery&lt;/code>，&lt;code>ShouldBindJSON&lt;/code>，&lt;code>ShouldBindXML&lt;/code>，&lt;code>ShouldBindYAML&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>他们的区别是，Bind 类型的方法，如果绑定发生异常，那么请求会被 &lt;code>c.AbortWithError(400, err).SetType(ErrorTypeBind)&lt;/code> 拒绝，这会将响应状态码设置为 400 并且将 &lt;code>Content-Type&lt;/code> 设置为 &lt;code>text/plain; charset=utf-8&lt;/code>。&lt;/p>
&lt;p>而 Should 类型方法，如果绑定发生异常，那么将会返回异常，由开发者来负责处理。&lt;/p>
&lt;p>绑定的 Model 需要几个参数来分别设置字段类型&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Login&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`form:&amp;#34;user&amp;#34; json:&amp;#34;user&amp;#34; binding:&amp;#34;required&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">Password&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`form:&amp;#34;password&amp;#34; json:&amp;#34;password&amp;#34; binding:&amp;#34;required&amp;#34;`&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>form&lt;/code> - 用于 url 参数或者 post 表单&lt;/li>
&lt;li>&lt;code>json&lt;/code> - 用于 Json 绑定&lt;/li>
&lt;li>&lt;code>xml&lt;/code> - 用于 xml 绑定&lt;/li>
&lt;li>&lt;code>time_format&lt;/code> - 用于 time.Time 字段的格式&lt;/li>
&lt;li>&lt;code>binding&lt;/code>
&lt;ul>
&lt;li>&lt;code>required&lt;/code> - 要求此参数为必要参数&lt;/li>
&lt;li>&lt;code>-&lt;/code> - 表示不绑定此参数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="binduri">BindUri&lt;/h3>
&lt;p>BindUri 用于绑定路由路径参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Uid&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">Username&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/bind/:uid/username&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">BindUri&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>{
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>,&lt;span style="color:#a6e22e">u&lt;/span>)
}
})
&lt;span style="color:#75715e">// 请求：http://localhost:8080/bind/1/小张
&lt;/span>&lt;span style="color:#75715e">// 输入：{1,&amp;#34;小张&amp;#34;}
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bindquery">BindQuery&lt;/h3>
&lt;p>BindQuery 方法将会只绑定 url 参数，忽略 Post 表单。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/bind&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">BindQuery&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>{
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>,&lt;span style="color:#a6e22e">u&lt;/span>)
}
})
&lt;span style="color:#75715e">// 请求：http://localhost:8080/bind?uid=1&amp;amp;username=小张
&lt;/span>&lt;span style="color:#75715e">// 输出：{1,&amp;#34;小张&amp;#34;}
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bind">Bind&lt;/h3>
&lt;p>Bind 方法较为智能，分为以下几种情况：&lt;/p>
&lt;ul>
&lt;li>如果是 &lt;code>GET&lt;/code> 请求，只使用 &lt;code>Form&lt;/code> 绑定 url 参数。&lt;/li>
&lt;li>如果是 &lt;code>POST&lt;/code> 请求，首先检查 &lt;code>content-type&lt;/code> 是否为 &lt;code>JSON&lt;/code> 或 &lt;code>XML&lt;/code>，然后再使用 &lt;code>Form&lt;/code>（&lt;code>form-data&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;h3 id="绑定-body">绑定 Body&lt;/h3>
&lt;p>当我们在 &lt;code>HTTP&lt;/code> 请求中 &lt;code>Body&lt;/code> 设置不同数据格式，需要设置相应头部 &lt;code>Content-Type&lt;/code> 的值，比较常用为 &lt;code>json&lt;/code>、&lt;code>xml&lt;/code>、&lt;code>yaml&lt;/code>。&lt;/p>
&lt;p>&lt;code>gin.Context&lt;/code> 提供下面三个方法绑定对应 Content-type 时 body 中的数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">BindJSON&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">BindXML&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">BindYAML&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="绑定特定类型">绑定特定类型&lt;/h3>
&lt;p>&lt;code>Gin&lt;/code> 框架将数据绑定的操作都封装在 &lt;code>gin/binding&lt;/code> 这个包中，下面是 &lt;code>gin/binding包&lt;/code> 处理不同 &lt;code>Content-type&lt;/code> 提交数据的处理结构体。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">JSON&lt;/span> = &lt;span style="color:#a6e22e">jsonBinding&lt;/span>{}
&lt;span style="color:#a6e22e">XML&lt;/span> = &lt;span style="color:#a6e22e">xmlBinding&lt;/span>{}
&lt;span style="color:#a6e22e">Form&lt;/span> = &lt;span style="color:#a6e22e">formBinding&lt;/span>{}
&lt;span style="color:#a6e22e">Query&lt;/span> = &lt;span style="color:#a6e22e">queryBinding&lt;/span>{}
&lt;span style="color:#a6e22e">FormPost&lt;/span> = &lt;span style="color:#a6e22e">formPostBinding&lt;/span>{}
&lt;span style="color:#a6e22e">FormMultipart&lt;/span> = &lt;span style="color:#a6e22e">formMultipartBinding&lt;/span>{}
&lt;span style="color:#a6e22e">ProtoBuf&lt;/span> = &lt;span style="color:#a6e22e">protobufBinding&lt;/span>{}
&lt;span style="color:#a6e22e">MsgPack&lt;/span> = &lt;span style="color:#a6e22e">msgpackBinding&lt;/span>{}
&lt;span style="color:#a6e22e">YAML&lt;/span> = &lt;span style="color:#a6e22e">yamlBinding&lt;/span>{}
&lt;span style="color:#a6e22e">Uri&lt;/span> = &lt;span style="color:#a6e22e">uriBinding&lt;/span>{}
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要绑定指定类型，则可以使用这两个方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">BindWith&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">binding&lt;/span>.&lt;span style="color:#a6e22e">Binding&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">MustBindWith&lt;/span>(&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">binding&lt;/span>.&lt;span style="color:#a6e22e">Binding&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;bind&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>){
&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>{}
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">BindWith&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>, &lt;span style="color:#a6e22e">binding&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>)
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">MustBindWith&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>, &lt;span style="color:#a6e22e">binding&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="文件上传">文件上传&lt;/h2>
&lt;h3 id="单个文件上传">单个文件上传&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#75715e">// 可以给Post表单设置内存限制(默认是32MiB)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// router.MaxMultipartMemory = 8 &amp;lt;&amp;lt; 20 // 8 MiB
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/upload&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#75715e">// single file
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">file&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">FormFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;file&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">file&lt;/span>.&lt;span style="color:#a6e22e">Filename&lt;/span>)
&lt;span style="color:#75715e">// 上传文件到指定的dst.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// c.SaveUploadedFile(file, dst)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#39;%s&amp;#39; uploaded!&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">file&lt;/span>.&lt;span style="color:#a6e22e">Filename&lt;/span>))
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：&lt;code>file.Filename&lt;/code> 不应该被信任，需要去除路径信息，并且转换成服务的文件系统规则。&lt;/p>
&lt;h3 id="多个文件上传">多个文件上传&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#75715e">// 可以给Post表单设置内存限制(默认是32MiB)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// router.MaxMultipartMemory = 8 &amp;lt;&amp;lt; 20 // 8 MiB
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/upload&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#75715e">// Multipart form
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">form&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">MultipartForm&lt;/span>()
&lt;span style="color:#a6e22e">files&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">form&lt;/span>.&lt;span style="color:#a6e22e">File&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;upload[]&amp;#34;&lt;/span>]
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">file&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">files&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">file&lt;/span>.&lt;span style="color:#a6e22e">Filename&lt;/span>)
&lt;span style="color:#75715e">// 上传文件到指定的dst.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// c.SaveUploadedFile(file, dst)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d files uploaded!&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">files&lt;/span>)))
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Gin 设置 Middleware 中间件</title><link>https://wnanbei.github.io/post/gin-%E8%AE%BE%E7%BD%AE-middleware-%E4%B8%AD%E9%97%B4%E4%BB%B6/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%AE%BE%E7%BD%AE-middleware-%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid><description>&lt;p>Gin 设置全局 Middleware、自定义中间件用法。&lt;/p>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="全局中间件">全局中间件&lt;/h3>
&lt;p>&lt;code>gin.Engine&lt;/code> 有一个 &lt;code>Use()&lt;/code> 方法，可以设置使用的中间件，在此设置后，此实例下所有路由的请求都会通过此中间件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Loggter&lt;/span>())
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="路由中间件">路由中间件&lt;/h3>
&lt;p>除了设置全局的中间件，还可以根据不同的路由分组使用不同的中间件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Group&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>(), &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Recovery&lt;/span>())
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Group&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>(), &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Recovery&lt;/span>())
&lt;/code>&lt;/pre>&lt;/div>&lt;p>单个路由也可以使用这两个方法。&lt;/p>
&lt;h3 id="自定义中间件">自定义中间件&lt;/h3>
&lt;p>Gin 的中间件其实就是一个 &lt;code>HandlerFunc&lt;/code>，那么只要我们自己实现一个 &lt;code>HandlerFunc&lt;/code>，就可以自定义一个自己的中间件。&lt;/p>
&lt;p>这之中，&lt;code>c.Next&lt;/code> 方法为执行后续中间件请求处理的意思。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Logger&lt;/span>() &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;span style="color:#75715e">// 设置例子变量
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;example&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;12345&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// request之前
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>()
&lt;span style="color:#75715e">// request之后
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">latency&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>)
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#a6e22e">latency&lt;/span>)
&lt;span style="color:#75715e">// 接收我们发出的状态
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>()
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">status&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="传递数据">传递数据&lt;/h3>
&lt;p>在中间件中，有时需要传递数据到下一个中间件，或者最终的请求方法中，那么可以使用 &lt;code>gin.Context&lt;/code> 中提供的方法，将数据放在 &lt;code>gin.Context&lt;/code> 中。&lt;/p>
&lt;p>传入数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取出数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">exists&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果可以确认数据类型，那么可以使用对应类型的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetBool&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetDuration&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetFloat64&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">f64&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetInt&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetInt64&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">i64&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetString&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetStringMap&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">sm&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetStringMapString&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">sms&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetStringMapStringSlice&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">smss&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>][]&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetStringSlice&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">ss&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">GetTime&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gin-内置中间件">Gin 内置中间件&lt;/h2>
&lt;p>以下为 Gin 内置中间件的列表：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BasicAuth&lt;/span>(&lt;span style="color:#a6e22e">accounts&lt;/span> &lt;span style="color:#a6e22e">Accounts&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BasicAuthForRealm&lt;/span>(&lt;span style="color:#a6e22e">accounts&lt;/span> &lt;span style="color:#a6e22e">Accounts&lt;/span>, &lt;span style="color:#a6e22e">realm&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Bind&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span> &lt;span style="color:#75715e">// 拦截请求参数并进行绑定
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ErrorLogger&lt;/span>() &lt;span style="color:#a6e22e">HandlerFunc&lt;/span> &lt;span style="color:#75715e">// 错误日志处理
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ErrorLoggerT&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">ErrorType&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span> &lt;span style="color:#75715e">// 自定义类型的错误日志处理
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Logger&lt;/span>() &lt;span style="color:#a6e22e">HandlerFunc&lt;/span> &lt;span style="color:#75715e">// 日志记录
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoggerWithConfig&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span> &lt;span style="color:#a6e22e">LoggerConfig&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoggerWithFormatter&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#a6e22e">LogFormatter&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoggerWithWriter&lt;/span>(&lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">notlogged&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Recovery&lt;/span>() &lt;span style="color:#a6e22e">HandlerFunc&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">RecoveryWithWriter&lt;/span>(&lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WrapF&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span> &lt;span style="color:#75715e">// 将http.HandlerFunc包装成中间件
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">WrapH&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">HandlerFunc&lt;/span> &lt;span style="color:#75715e">// 将http.Handler包装成中间件
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用basicauth中间件">使用BasicAuth()中间件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 模拟一些私人数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">secrets&lt;/span> = &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;foo@bar.com&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;phone&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;123433&amp;#34;&lt;/span>},
&lt;span style="color:#e6db74">&amp;#34;austin&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;austin@example.com&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;phone&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;666&amp;#34;&lt;/span>},
&lt;span style="color:#e6db74">&amp;#34;lena&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;lena@guapa.com&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;phone&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;523443&amp;#34;&lt;/span>},
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#75715e">// 分组使用 gin.BasicAuth() 中间件
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// gin.Accounts 是 map[string]string 的别名
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">authorized&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Group&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/admin&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">BasicAuth&lt;/span>(&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Accounts&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;austin&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1234&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;lena&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello2&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;manu&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;4321&amp;#34;&lt;/span>,
}))
&lt;span style="color:#75715e">// /admin/secrets 端点
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 点击 &amp;#34;localhost:8080/admin/secrets
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">authorized&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/secrets&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#75715e">// get user, it was set by the BasicAuth middleware
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">MustGet&lt;/span>(&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">AuthUserKey&lt;/span>).(&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">secret&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">secrets&lt;/span>[&lt;span style="color:#a6e22e">user&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secret&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">secret&lt;/span>})
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secret&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;NO SECRET :(&amp;#34;&lt;/span>})
}
})
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在中间件中使用协程">在中间件中使用协程&lt;/h3>
&lt;p>当在 middleware 或者 handler 中开启一个新的协程时，你不能再在其中使用原版的 context，只能使用只读的拷贝内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/long_async&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#75715e">// 创建在协程中使用的copy
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cCp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Copy&lt;/span>()
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#75715e">// 用休眠5秒来模拟一个长任务
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#75715e">// 注意：你正在使用一个拷贝的context
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Done! in path &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">cCp&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span>)
}()
})
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/long_sync&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#75715e">// 用休眠5秒来模拟一个长任务
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#75715e">// 如果我们不使用协程，那么就不需要拷贝 context
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Done! in path &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span>)
})
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Gin 请求与路由</title><link>https://wnanbei.github.io/post/gin-%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%B7%AF%E7%94%B1/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%B7%AF%E7%94%B1/</guid><description>&lt;p>Gin 设置请求方式与路由，包括重定向、动态路由、路由分组等。&lt;/p>
&lt;h2 id="请求">请求&lt;/h2>
&lt;h3 id="请求-1">请求&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/someGet&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">getting&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/somePost&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">posting&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">PUT&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/somePut&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">putting&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">DELETE&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/someDelete&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">deleting&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">PATCH&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/somePatch&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">patching&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">HEAD&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/someHead&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">head&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">OPTIONS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/someOptions&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Any&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/anyRequest&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span>) &lt;span style="color:#75715e">// 可以处理任何类型请求
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:3000&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下 gin 会把服务运行在 8080 端口，除非定义了 PORT 环境变量。&lt;/p>
&lt;p>除此之外，也可以使用 &lt;code>Handle()&lt;/code> 创建路由，通过指定 &lt;code>Handle()&lt;/code> 函数的第一个参数来确定处理何种请求：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;/testHandlePost&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>){})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="拦截请求">拦截请求&lt;/h3>
&lt;p>在中间件或请求方法中，当用户请求不合法时，可以中断用户的请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">Abort&lt;/span>()
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">AbortWithError&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">AbortWithStatus&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">AbortWithStatusJSON&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">jsonObj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重定向">重定向&lt;/h3>
&lt;p>发布一个 HTTP 重定向非常简单，而且支持外部和内部地址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Redirect&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusMovedPermanently&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;http://www.google.com/&amp;#34;&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>内部重定向，使用 &lt;code>HandleContext&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/test2&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">HandleContext&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
})
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test2&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>})
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="路由">路由&lt;/h2>
&lt;h3 id="动态路由">动态路由&lt;/h3>
&lt;p>除了直接匹配路径，Gin 框架还支持使用通配符冒号 &lt;code>:&lt;/code> 和星号 &lt;code>*&lt;/code> 来匹配请求路径。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>精确匹配&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;user/:name&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>){})
&lt;span style="color:#75715e">// /user/gordon 匹配
&lt;/span>&lt;span style="color:#75715e">// /user/you 匹配
&lt;/span>&lt;span style="color:#75715e">// /user/gordon/profile 不匹配
&lt;/span>&lt;span style="color:#75715e">// /user/ 不匹配
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>模糊匹配&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;user/*name&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>){})
&lt;span style="color:#75715e">// /user/gordon 匹配 /gordon
&lt;/span>&lt;span style="color:#75715e">// /user/you 匹配 /you
&lt;/span>&lt;span style="color:#75715e">// /user/gordon/profile 匹配 /gordon/profile
&lt;/span>&lt;span style="color:#75715e">// /user/ 匹配 /
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>注意：Gin 的路由是单一不可重复的。&lt;/p>
&lt;p>注意：对于模糊匹配，不建议使用，因为匹配的太多，会导致我们自己搞不清楚哪些路由被注册了。&lt;/p>
&lt;h3 id="路由分组">路由分组&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#75715e">// 组: v1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Group&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/v1&amp;#34;&lt;/span>)
{
&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/login&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">loginEndpoint&lt;/span>)
&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/submit&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">submitEndpoint&lt;/span>)
&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/read&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">readEndpoint&lt;/span>)
}
&lt;span style="color:#75715e">// 组: v2
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">v2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Group&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/v2&amp;#34;&lt;/span>)
{
&lt;span style="color:#a6e22e">v2&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/login&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">loginEndpoint&lt;/span>)
&lt;span style="color:#a6e22e">v2&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/submit&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">submitEndpoint&lt;/span>)
&lt;span style="color:#a6e22e">v2&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/read&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">readEndpoint&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Gin 返回响应方式</title><link>https://wnanbei.github.io/post/gin-%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F/</guid><description>&lt;p>Gin 框架在 &lt;code>*gin.Context&lt;/code> 实例中封装了所有处理请求并响应客户端的方法。&lt;/p>
&lt;p>Gin 支持多种响应方法，包括我们常见的 &lt;code>String&lt;/code>、&lt;code>HTML&lt;/code>、&lt;code>JSON&lt;/code>、&lt;code>XML&lt;/code>、&lt;code>YAML&lt;/code>、&lt;code>JSONP&lt;/code>，也支持直接响应 &lt;code>Reader&lt;/code> 和 &lt;code>[]byte&lt;/code>，而且还支持重定向。&lt;/p>
&lt;p>以下为 &lt;code>gin.Context&lt;/code> 中响应客户端的方法列表：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">Data&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">contentType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">DataFromReader&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">contentLength&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">contentType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;span style="color:#a6e22e">reader&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>, &lt;span style="color:#a6e22e">extraHeaders&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">HTML&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">ProtoBuf&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">Redirect&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">location&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">Render&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">render&lt;/span>.&lt;span style="color:#a6e22e">Render&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">values&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">XML&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">YAML&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="json">JSON&lt;/h2>
&lt;p>返回 Json 响应数据的几种方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 返回普通 JSON 数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#75715e">// 基于 JSON，解决浏览器跨域访问问题
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">JSONP&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#75715e">// 按字面对字符进行编码，不使用 unicode 替换特殊 HTML 字符转义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">PureJSON&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#75715e">// 把非 Ascii 字符串转为 unicode 编码
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">AsciiJSON&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#75715e">// 防止 JSON 劫持
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">SecureJSON&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#75715e">// 返回缩进美化后的 JSON 数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#a6e22e">IndentedJSON&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回的内容可以是 &lt;code>gin.H&lt;/code>，也可以是一个 &lt;code>struct&lt;/code>，&lt;code>gin.H&lt;/code> 是 &lt;code>map[string]interface{}&lt;/code> 的一种快捷方式。&lt;/p>
&lt;p>使用 struct 时，需要设置 tag，与正常的 Json Tag 一致。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;user&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Number&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="json-1">JSON&lt;/h3>
&lt;p>返回普通 JSON 数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/someJSON&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hey&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>
})
})
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/moreJSON&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> { &lt;span style="color:#75715e">// 使用一个结构体
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;user&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Number&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Lena&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;hey&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span> = &lt;span style="color:#ae81ff">123&lt;/span>
&lt;span style="color:#75715e">// 注意 msg.Name 在 JSON 中变成了 &amp;#34;user&amp;#34;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 将输出：{&amp;#34;user&amp;#34;: &amp;#34;Lena&amp;#34;, &amp;#34;Message&amp;#34;: &amp;#34;hey&amp;#34;, &amp;#34;Number&amp;#34;: 123}
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="jsonp">JSONP&lt;/h3>
&lt;p>JSONP 是一种基于 JSON，而用于解决浏览器跨域访问问题的机制，使用gin.Context 的 &lt;code>JSONP()&lt;/code> 返回数据时，会将 URL 中的 callback 参数按照 JSONP 的数据格式放在 json 数据前面，并返回给客户端。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/JSONP&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>,
}
&lt;span style="color:#75715e">// /JSONP?callback=x
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 将输出：x({\&amp;#34;foo\&amp;#34;:\&amp;#34;bar\&amp;#34;})
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSONP&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="purejson">PureJSON&lt;/h3>
&lt;p>通常，JSON 使用 unicode 替换特殊 HTML 字符，例如 &lt;code>&amp;lt;&lt;/code> 变为 &lt;code>\u003c&lt;/code>。如果要按字面对这些字符进行编码，不进行转义，则可以使用 PureJSON。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 提供字面字符
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/purejson&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">PureJSON&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;html&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;b&amp;gt;Hello, world!&amp;lt;/b&amp;gt;&amp;#34;&lt;/span>,
})
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="asciijson">AsciiJSON&lt;/h3>
&lt;p>把所有的非 &lt;code>Ascii&lt;/code> 字符全部转义为 &lt;code>unicode&lt;/code> 编码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/someJSON&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;span style="color:#e6db74">&amp;#34;lang&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;GO语言&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;tag&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span>,
}
&lt;span style="color:#75715e">// 输出 : {&amp;#34;lang&amp;#34;:&amp;#34;GO\u8bed\u8a00&amp;#34;,&amp;#34;tag&amp;#34;:&amp;#34;\u003cbr\u003e&amp;#34;}
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">AsciiJSON&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="securejson">SecureJSON&lt;/h3>
&lt;p>防止 json 劫持。如果给定的结构是数组值，则默认预置 &lt;code>&amp;quot;while(1),&amp;quot;&lt;/code> 到响应体。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 你也可以使用自己的 SecureJSON 前缀
&lt;/span>&lt;span style="color:#75715e">// r.SecureJsonPrefix(&amp;#34;)]}&amp;#39;,\n&amp;#34;)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/someJSON&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">names&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;lena&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;austin&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>}
&lt;span style="color:#75715e">// 将输出：while(1);[&amp;#34;lena&amp;#34;,&amp;#34;austin&amp;#34;,&amp;#34;foo&amp;#34;]
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">SecureJSON&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">names&lt;/span>)
})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="indentedjson">IndentedJSON&lt;/h3>
&lt;p>返回缩进美化后的 JSON 数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/users/456&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">IndentedJSON&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#a6e22e">user&lt;/span>{&lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#ae81ff">456&lt;/span>, &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;李四&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Age&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>})
})
&lt;span style="color:#75715e">// 输出：
&lt;/span>&lt;span style="color:#75715e">// {
&lt;/span>&lt;span style="color:#75715e">// &amp;#34;id&amp;#34;: 456,
&lt;/span>&lt;span style="color:#75715e">// &amp;#34;name&amp;#34;: &amp;#34;李四&amp;#34;,
&lt;/span>&lt;span style="color:#75715e">// &amp;#34;age&amp;#34;: 25
&lt;/span>&lt;span style="color:#75715e">// }
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="加速-json-编码">加速 JSON 编码&lt;/h3>
&lt;p>在 Gin 中，提供了两种 JSON 解析器，用于生成 JSON 字符串。默认的是 Go 内置的 JSON。&lt;/p>
&lt;p>也可以使用 jsoniter，速度很快。如果要使用 jsoniter，我们在 &lt;code>go build&lt;/code> 编译的时候只需要这么做即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ go build -tags&lt;span style="color:#f92672">=&lt;/span>jsoniter .
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="html渲染">HTML渲染&lt;/h2>
&lt;p>使用 &lt;code>LoadHTMLGlob()&lt;/code> 或者 &lt;code>LoadHTMLFiles()&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">LoadHTMLGlob&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;templates/*&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">//router.LoadHTMLFiles(&amp;#34;templates/template1.html&amp;#34;, &amp;#34;templates/template2.html&amp;#34;)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/index&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">HTML&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;index.tmpl&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Main website&amp;#34;&lt;/span>,
})
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>templates/index.tmpl&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
{{ .title }}
&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在不同的目录里使用相同名字的模板&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">LoadHTMLGlob&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;templates/**/*&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/posts/index&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">HTML&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;posts/index.tmpl&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Posts&amp;#34;&lt;/span>,
})
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/users/index&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">HTML&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;users/index.tmpl&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Users&amp;#34;&lt;/span>,
})
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>templates/posts/index.tmpl&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{ define &amp;#34;posts/index.tmpl&amp;#34; }}
&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
{{ .title }}
&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Using posts/index.tmpl&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>templates/users/index.tmpl&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{ define &amp;#34;users/index.tmpl&amp;#34; }}
&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
{{ .title }}
&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Using users/index.tmpl&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自定义模板渲染器">自定义模板渲染器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;html/template&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">html&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Must&lt;/span>(&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">ParseFiles&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;file1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;file2&amp;#34;&lt;/span>))
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">SetHTMLTemplate&lt;/span>(&lt;span style="color:#a6e22e">html&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自定义分隔符">自定义分隔符&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Delims&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;{[{&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;}]}&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">LoadHTMLGlob&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/path/to/templates&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自定义模板功能">自定义模板功能&lt;/h3>
&lt;p>main.go&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;html/template&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">formatAsDate&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#a6e22e">year&lt;/span>, &lt;span style="color:#a6e22e">month&lt;/span>, &lt;span style="color:#a6e22e">day&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Date&lt;/span>()
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d%02d/%02d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">year&lt;/span>, &lt;span style="color:#a6e22e">month&lt;/span>, &lt;span style="color:#a6e22e">day&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Delims&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;{[{&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;}]}&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">SetFuncMap&lt;/span>(&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">FuncMap&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;formatAsDate&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">formatAsDate&lt;/span>,
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">LoadHTMLFiles&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;./testdata/template/raw.tmpl&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/raw&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">HTML&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;raw.tmpl&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;now&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Date&lt;/span>(&lt;span style="color:#ae81ff">2017&lt;/span>, &lt;span style="color:#ae81ff">07&lt;/span>, &lt;span style="color:#ae81ff">01&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">UTC&lt;/span>),
})
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>raw.tmpl&lt;/p>
&lt;pre tabindex="0">&lt;code>Date: {[{.now | formatAsDate}]}
&lt;/code>&lt;/pre>&lt;p>结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>Date: 2017/07/01
&lt;/code>&lt;/pre></description></item><item><title>Gin 配置 Swagger 接口文档</title><link>https://wnanbei.github.io/post/gin-%E9%85%8D%E7%BD%AE-swagger-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E9%85%8D%E7%BD%AE-swagger-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid><description>&lt;p>此包用于自动化生成 API 文档。&lt;/p>
&lt;p>下载 &lt;code>swag&lt;/code> 工具：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ go get -u github.com/swaggo/swag/cmd/swag
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下载 &lt;code>gin-swagger&lt;/code> 库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ go get -u github.com/swaggo/gin-swagger
$ go get -u github.com/swaggo/files
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="启用文档">启用文档&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>首先需要在项目代码中根据需求编写相应的注释。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>swag&lt;/code> 生成 &lt;code>swagger&lt;/code> 所需的 Json 文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ swag init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此命令会在当前目录下生成 &lt;code>docs&lt;/code> 目录以及里面的部分文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在项目的 &lt;code>main.go&lt;/code> 文件中配置 &lt;code>swagger&lt;/code> 的启用方式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">swaggerFiles&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/swaggo/files&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">ginSwagger&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/swaggo/gin-swagger&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;projectName/docs&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/swagger/*any&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ginSwagger&lt;/span>.&lt;span style="color:#a6e22e">WrapHandler&lt;/span>(&lt;span style="color:#a6e22e">swaggerFiles&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>))
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动后，就可以在 &lt;code>http://localhost:8080/swagger/index.html&lt;/code> 看到 API 文档了。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="禁用文档">禁用文档&lt;/h3>
&lt;p>很多时候我们不需要开启文档，这时候可以使用 &lt;code>DisablingWrapHandler&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/swagger/*any&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ginSwagger&lt;/span>.&lt;span style="color:#a6e22e">DisablingWrapHandler&lt;/span>(&lt;span style="color:#a6e22e">swaggerFiles&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;NAME_OF_ENV_VARIABLE&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>只要在运行程序前，将 &lt;code>NAME_OF_ENV_VARIABLE&lt;/code> 环境变量设置成任何值，都将会禁用 &lt;code>Swagger&lt;/code> 文档。&lt;/p>
&lt;h2 id="api-整体文档">API 整体文档&lt;/h2>
&lt;p>此注释用于声明整个 API 文档的信息，注释的位置在项目的 &lt;code>main&lt;/code> 函数位置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// @title Swagger Example API
&lt;/span>&lt;span style="color:#75715e">// @version 1.0
&lt;/span>&lt;span style="color:#75715e">// @description This is a sample server celler server.
&lt;/span>&lt;span style="color:#75715e">// @termsOfService http://swagger.io/terms/
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="字段">字段&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段名&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@title&lt;/td>
&lt;td>&lt;strong>必填&lt;/strong> 应用程序的名称&lt;/td>
&lt;td>Swagger Example API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@version&lt;/td>
&lt;td>&lt;strong>必填&lt;/strong> 提供应用程序API的版本&lt;/td>
&lt;td>1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@description&lt;/td>
&lt;td>应用程序的简短描述&lt;/td>
&lt;td>This is a sample server celler server.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tag.name&lt;/td>
&lt;td>标签的名称&lt;/td>
&lt;td>This is the name of the tag&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tag.description&lt;/td>
&lt;td>标签的描述&lt;/td>
&lt;td>Cool Description&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tag.docs.url&lt;/td>
&lt;td>标签的外部文档的URL&lt;/td>
&lt;td>&lt;a class="link" href="https://example.com" target="_blank" rel="noopener"
>https://example.com&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tag.docs.description&lt;/td>
&lt;td>标签的外部文档说明&lt;/td>
&lt;td>Best example documentation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@termsOfService&lt;/td>
&lt;td>API的服务条款&lt;/td>
&lt;td>&lt;a class="link" href="http://swagger.io/terms/" target="_blank" rel="noopener"
>http://swagger.io/terms/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@contact.name&lt;/td>
&lt;td>公开的API的联系信息&lt;/td>
&lt;td>API Support&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@contact.url&lt;/td>
&lt;td>联系信息的URL，必须采用网址格式&lt;/td>
&lt;td>&lt;a class="link" href="http://www.swagger.io/support" target="_blank" rel="noopener"
>http://www.swagger.io/support&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@contact.email&lt;/td>
&lt;td>联系人/组织的电子邮件地址。 必须采用电子邮件地址的格式&lt;/td>
&lt;td>&lt;a class="link" href="mailto:support@swagger.io" >support@swagger.io&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@license.name&lt;/td>
&lt;td>&lt;strong>必填&lt;/strong> 用于API的许可证名称&lt;/td>
&lt;td>Apache 2.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@license.url&lt;/td>
&lt;td>用于API的许可证的URL，必须采用网址格式&lt;/td>
&lt;td>&lt;a class="link" href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="noopener"
>http://www.apache.org/licenses/LICENSE-2.0.html&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@host&lt;/td>
&lt;td>运行API的主机（主机名或IP地址）&lt;/td>
&lt;td>localhost:8080&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@BasePath&lt;/td>
&lt;td>运行API的基本路径&lt;/td>
&lt;td>/api/v1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@query.collection.format&lt;/td>
&lt;td>请求URI query里数组参数的默认格式：csv，multi，pipes，tsv，ssv。 如果未设置，则默认为csv&lt;/td>
&lt;td>multi&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@schemes&lt;/td>
&lt;td>用空格分隔的请求的传输协议&lt;/td>
&lt;td>http https&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@x-name&lt;/td>
&lt;td>扩展的键必须以x-开头，并且只能使用json值&lt;/td>
&lt;td>{&amp;ldquo;key&amp;rdquo;: &amp;ldquo;value&amp;rdquo;}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="markdown">Markdown&lt;/h3>
&lt;p>如果文档中的短字符串不足以完整表达，或者需要展示图片，代码示例等类似的内容，则需要使用 &lt;code>Markdown&lt;/code> 描述。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段名&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@description.markdown&lt;/td>
&lt;td>API 的简短描述，从 &lt;code>api.md&lt;/code> 文件中解析&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tag.name&lt;/td>
&lt;td>tag 的名称&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tag.description.markdown&lt;/td>
&lt;td>tag 的描述，该描述将从名为 &lt;code>tagname.md&lt;/code> 的文件中读取&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="api-接口文档">API 接口文档&lt;/h2>
&lt;p>此注释用于声明单个 API 接口的信息，注释的位置在具体的 &lt;code>controller&lt;/code> 函数位置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// FindUserByName 查询用户信息
&lt;/span>&lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">// @Summary 查询用户信息
&lt;/span>&lt;span style="color:#75715e">// @Description 根据用户名查询用户信息
&lt;/span>&lt;span style="color:#75715e">// @Tags 用户接口
&lt;/span>&lt;span style="color:#75715e">// @Accept application/x-www-form-urlencoded
&lt;/span>&lt;span style="color:#75715e">// @Produce application/json
&lt;/span>&lt;span style="color:#75715e">// @Param name path string true &amp;#34;用户账户名&amp;#34;
&lt;/span>&lt;span style="color:#75715e">// @Success 200 {object} response.BasicResponse &amp;#34;基础响应类型&amp;#34;
&lt;/span>&lt;span style="color:#75715e">// @Router /user/{name} [get]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">FindUserByName&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="字段-1">字段&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段名&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@summary&lt;/td>
&lt;td>API 行为的简短摘要&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@description&lt;/td>
&lt;td>API 行为的详细说明&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@description.markdown&lt;/td>
&lt;td>API 行为的详细说明，从 &lt;code>endpointname.md&lt;/code> 文件中读取&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@id&lt;/td>
&lt;td>用于标识 API 的唯一字符串，在所有 API 中必须唯一&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tags&lt;/td>
&lt;td>每个 API 操作的 tag 列表，以逗号分隔&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@accept&lt;/td>
&lt;td>API 可以接收的 MIME 类型的列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@produce&lt;/td>
&lt;td>API 可以返回的 MIME 类型的列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@param&lt;/td>
&lt;td>API 可以接收的参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@security&lt;/td>
&lt;td>API 操作的安全性。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@success&lt;/td>
&lt;td>访问 API 成功的响应内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@failure&lt;/td>
&lt;td>访问 API 失败的响应内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@response&lt;/td>
&lt;td>与 success、failure 作用相同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@header&lt;/td>
&lt;td>头字段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@router&lt;/td>
&lt;td>此 API 的路由路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@x-name&lt;/td>
&lt;td>扩展字段，必须以 &lt;code>x-&lt;/code> 开头，并且只能使用 json 值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="mime-类型">MIME 类型&lt;/h3>
&lt;p>&lt;code>swag&lt;/code> 接受所有格式正确的 MIME 类型, 即使匹配 &lt;code>*/*&lt;/code>。&lt;/p>
&lt;p>除此之外，&lt;code>swag&lt;/code> 还接受某些 MIME 类型的别名，如下所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>别名&lt;/th>
&lt;th>MIME 类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>json&lt;/td>
&lt;td>application/json&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xml&lt;/td>
&lt;td>text/xml&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>plain&lt;/td>
&lt;td>text/plain&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>html&lt;/td>
&lt;td>text/html&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mpfd&lt;/td>
&lt;td>multipart/form-data&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>x-www-form-urlencoded&lt;/td>
&lt;td>application/x-www-form-urlencoded&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>json-api&lt;/td>
&lt;td>application/vnd.api+json&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>json-stream&lt;/td>
&lt;td>application/x-json-stream&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>octet-stream&lt;/td>
&lt;td>application/octet-stream&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>png&lt;/td>
&lt;td>image/png&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jpeg&lt;/td>
&lt;td>image/jpeg&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>gif&lt;/td>
&lt;td>image/gif&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="response">response&lt;/h3>
&lt;p>声明响应，主要有 &lt;code>success&lt;/code>, &lt;code>failure&lt;/code>, &lt;code>response&lt;/code> 三类，格式一致：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Success&lt;/span> {&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">code&lt;/span>} {&lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>} {&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>} &lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Failure&lt;/span> {&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">code&lt;/span>} {&lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>} {&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>} &lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Response&lt;/span> {&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">code&lt;/span>} {&lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>} {&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>} &lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Header&lt;/span> {&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">code&lt;/span>} {&lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>} {&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>} &lt;span style="color:#a6e22e">comment&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Success&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> {&lt;span style="color:#a6e22e">array&lt;/span>} &lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Account&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> {&lt;span style="color:#66d9ef">string&lt;/span>} &lt;span style="color:#a6e22e">Token&lt;/span> &lt;span style="color:#e6db74">&amp;#34;qwerty&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Failure&lt;/span> &lt;span style="color:#ae81ff">400&lt;/span>,&lt;span style="color:#ae81ff">404&lt;/span> {&lt;span style="color:#a6e22e">object&lt;/span>} &lt;span style="color:#a6e22e">httputil&lt;/span>.&lt;span style="color:#a6e22e">HTTPError&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Failure&lt;/span> &lt;span style="color:#ae81ff">500&lt;/span> {&lt;span style="color:#a6e22e">object&lt;/span>} &lt;span style="color:#a6e22e">httputil&lt;/span>.&lt;span style="color:#a6e22e">HTTPError&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Failure&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {&lt;span style="color:#a6e22e">object&lt;/span>} &lt;span style="color:#a6e22e">httputil&lt;/span>.&lt;span style="color:#a6e22e">DefaultError&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="router">router&lt;/h3>
&lt;p>声明 API 的路由:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Router&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> [&lt;span style="color:#a6e22e">httpMethod&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>多路径参数:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#a6e22e">group_id&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Group ID&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#a6e22e">account_id&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Account ID&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Router&lt;/span> &lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">examples&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">groups&lt;/span>&lt;span style="color:#f92672">/&lt;/span>{&lt;span style="color:#a6e22e">group_id&lt;/span>}&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">accounts&lt;/span>&lt;span style="color:#f92672">/&lt;/span>{&lt;span style="color:#a6e22e">account_id&lt;/span>} [&lt;span style="color:#a6e22e">get&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="param">Param&lt;/h2>
&lt;p>此字段用于声明 API 接收的数据字段，用空格分隔，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#a6e22e">param_type&lt;/span> &lt;span style="color:#a6e22e">data_type&lt;/span> &lt;span style="color:#a6e22e">is_mandatory&lt;/span> &lt;span style="color:#a6e22e">comment&lt;/span> &lt;span style="color:#a6e22e">attribute&lt;/span>(&lt;span style="color:#a6e22e">optional&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#a6e22e">enumstring&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#e6db74">&amp;#34;string enums&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Enums&lt;/span>(&lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">B&lt;/span>, &lt;span style="color:#a6e22e">C&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#a6e22e">enumint&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#e6db74">&amp;#34;int enums&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Enums&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#a6e22e">enumnumber&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#e6db74">&amp;#34;int enums&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Enums&lt;/span>(&lt;span style="color:#ae81ff">1.1&lt;/span>, &lt;span style="color:#ae81ff">1.2&lt;/span>, &lt;span style="color:#ae81ff">1.3&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#e6db74">&amp;#34;string valid&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">minlength&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#a6e22e">maxlength&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#e6db74">&amp;#34;int valid&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">minimum&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#a6e22e">maximum&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#e6db74">&amp;#34;string default&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span>(&lt;span style="color:#a6e22e">A&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Param&lt;/span> &lt;span style="color:#a6e22e">collection&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#e6db74">&amp;#34;string collection&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">collectionFormat&lt;/span>(&lt;span style="color:#a6e22e">multi&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="直接声明">直接声明&lt;/h3>
&lt;ol>
&lt;li>&lt;code>name&lt;/code> - 字段名&lt;/li>
&lt;li>&lt;code>param_type&lt;/code> - 字段类型，说明此字段的类型
&lt;ul>
&lt;li>query - url 参数中的字段&lt;/li>
&lt;li>path - url 路径中的字段&lt;/li>
&lt;li>header - 请求头&lt;/li>
&lt;li>formData - post 表单类型字段&lt;/li>
&lt;li>body - 请求体中的内容&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>data_tape&lt;/code> - 字段的数据类型
&lt;ul>
&lt;li>string (string)&lt;/li>
&lt;li>integer (int, uint, uint32, uint64)&lt;/li>
&lt;li>number (float32)&lt;/li>
&lt;li>boolean (bool)&lt;/li>
&lt;li>user defined struct&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>is_mandatory&lt;/code> - 此字段是否是必须的&lt;/li>
&lt;li>&lt;code>comment&lt;/code> - 注释，通常是字段的描述&lt;/li>
&lt;li>&lt;code>attribute&lt;/code> - 额外的属性，此部分为可选&lt;/li>
&lt;/ol>
&lt;h3 id="attribute">attribute&lt;/h3>
&lt;p>直接声明中的字段都是必须字段，而 &lt;code>attribute&lt;/code> 有部分额外功能&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段名&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>default&lt;/td>
&lt;td>*&lt;/td>
&lt;td>服务器将使用的默认参数值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maximum&lt;/td>
&lt;td>&lt;code>number&lt;/code>&lt;/td>
&lt;td>int 最大值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>minimum&lt;/td>
&lt;td>&lt;code>number&lt;/code>&lt;/td>
&lt;td>int 最小值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maxLength&lt;/td>
&lt;td>&lt;code>integer&lt;/code>&lt;/td>
&lt;td>字符串最大长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>minLength&lt;/td>
&lt;td>&lt;code>integer&lt;/code>&lt;/td>
&lt;td>字符串最小长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>enums&lt;/td>
&lt;td>[*]&lt;/td>
&lt;td>枚举类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>format&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>collectionFormat&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>指定query数组参数的格式&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>注1：&lt;code>default&lt;/code> 对于必需的参数没有意义&lt;/li>
&lt;li>注2：与 JSON 模式不同，&lt;code>default&lt;/code> 务必符合此参数的定义类型&lt;/li>
&lt;/ul>
&lt;h2 id="结构体字段">结构体字段&lt;/h2>
&lt;p>逐个编写 Param，Response 等字段是非常麻烦的，且不利于维护，所以通常使用 Struct 来定义字段的类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">JSONResult&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;code&amp;#34; `&lt;/span> &lt;span style="color:#75715e">// ID this is userid
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;message&amp;#34;`&lt;/span> &lt;span style="color:#75715e">// This is Name
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{} &lt;span style="color:#e6db74">`json:&amp;#34;data&amp;#34;`&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Order&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> { &lt;span style="color:#75715e">//in `proto` package
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
}
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#a6e22e">formData&lt;/span> &lt;span style="color:#a6e22e">jsonresult&lt;/span>.&lt;span style="color:#a6e22e">JSONResult&lt;/span>{&lt;span style="color:#a6e22e">data&lt;/span>=&lt;span style="color:#a6e22e">proto&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>} &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#e6db74">&amp;#34;登录参数&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">success&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> {&lt;span style="color:#a6e22e">object&lt;/span>} &lt;span style="color:#a6e22e">jsonresult&lt;/span>.&lt;span style="color:#a6e22e">JSONResult&lt;/span>{&lt;span style="color:#a6e22e">data&lt;/span>=&lt;span style="color:#a6e22e">proto&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>} &lt;span style="color:#e6db74">&amp;#34;desc&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">success&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> {&lt;span style="color:#a6e22e">object&lt;/span>} &lt;span style="color:#a6e22e">jsonresult&lt;/span>.&lt;span style="color:#a6e22e">JSONResult&lt;/span>{&lt;span style="color:#a6e22e">data&lt;/span>=[]&lt;span style="color:#a6e22e">proto&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>} &lt;span style="color:#e6db74">&amp;#34;desc&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">success&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> {&lt;span style="color:#a6e22e">object&lt;/span>} &lt;span style="color:#a6e22e">jsonresult&lt;/span>.&lt;span style="color:#a6e22e">JSONResult&lt;/span>{&lt;span style="color:#a6e22e">data&lt;/span>=&lt;span style="color:#66d9ef">string&lt;/span>} &lt;span style="color:#e6db74">&amp;#34;desc&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">success&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> {&lt;span style="color:#a6e22e">object&lt;/span>} &lt;span style="color:#a6e22e">jsonresult&lt;/span>.&lt;span style="color:#a6e22e">JSONResult&lt;/span>{&lt;span style="color:#a6e22e">data&lt;/span>=[]&lt;span style="color:#66d9ef">string&lt;/span>} &lt;span style="color:#e6db74">&amp;#34;desc&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>struct 字段后方的注释，会被读取为这个字段的描述&lt;/li>
&lt;/ul>
&lt;h3 id="tag">Tag&lt;/h3>
&lt;p>在使用 struct 作为数据的定义时，主要使用 struct 的 tag 作为声明的方式。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tag&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>example&lt;/td>
&lt;td>声明字段示例值&lt;/td>
&lt;td>example:&amp;ldquo;account name&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>binding&lt;/td>
&lt;td>声明字段为必须&lt;/td>
&lt;td>binding:&amp;ldquo;required&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>swaggertype&lt;/td>
&lt;td>重新声明字段类型&lt;/td>
&lt;td>swaggertype:&amp;ldquo;array,number&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>swaggerignore&lt;/td>
&lt;td>不展示某些字段&lt;/td>
&lt;td>swaggerignore:&amp;ldquo;true&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>extensions&lt;/td>
&lt;td>扩展信息&lt;/td>
&lt;td>extensions:&amp;ldquo;x-nullable,x-abc=def&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>除此之外，还包括 Param 的 Attribute 也可以使用到 Tag 中。&lt;/li>
&lt;/ul>
&lt;h3 id="重命名模型">重命名模型&lt;/h3>
&lt;p>在展示时更改模型名称&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Resp&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}&lt;span style="color:#75715e">//@name Response
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Gin 高级功能</title><link>https://wnanbei.github.io/post/gin-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</guid><description>&lt;p>Gin 提供的日志功能和部分其他功能，包括：优雅关闭或重启、提供静态文件、http2 服务推送、自定义验证器、设置和获取 Cookies、从 reader 提供数据。&lt;/p>
&lt;h2 id="日志">日志&lt;/h2>
&lt;h3 id="日志文件">日志文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#75715e">// 禁用控制台颜色，写入日志文件时不需要颜色.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">DisableConsoleColor&lt;/span>()
&lt;span style="color:#75715e">// 设置日志文件
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;gin.log&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">DefaultWriter&lt;/span> = &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">MultiWriter&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>)
&lt;span style="color:#75715e">// 如果希望同时将日志输出到控制台和文件，使用以下代码
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// gin.DefaultWriter = io.MultiWriter(f, os.Stdout)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/ping&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>)
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自定义日志格式">自定义日志格式&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;span style="color:#75715e">// LoggerWithFormatter 中间件会将日志写入到 gin.DefaultWriter
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 默认情况下 gin.DefaultWriter = os.Stdout
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">LoggerWithFormatter&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">LogFormatterParams&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#75715e">// 自定义格式
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s - [%s] \&amp;#34;%s %s %s %d %s \&amp;#34;%s\&amp;#34; %s\&amp;#34;\n&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">ClientIP&lt;/span>,
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">TimeStamp&lt;/span>.&lt;span style="color:#a6e22e">Format&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">RFC1123&lt;/span>),
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">Method&lt;/span>,
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span>,
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>.&lt;span style="color:#a6e22e">Proto&lt;/span>,
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span>,
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">Latency&lt;/span>,
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>.&lt;span style="color:#a6e22e">UserAgent&lt;/span>(),
&lt;span style="color:#a6e22e">param&lt;/span>.&lt;span style="color:#a6e22e">ErrorMessage&lt;/span>,
)
}))
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Recovery&lt;/span>())
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/ping&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>)
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="控制日志输出颜色">控制日志输出颜色&lt;/h3>
&lt;p>默认情况下，输出到控制台的日志会按照检测到的TTY进行着色。&lt;/p>
&lt;p>禁用彩色日志：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#75715e">// 禁用日志颜色
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">DisableConsoleColor&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/ping&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>)
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>强制启用彩色日志：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#75715e">// 强制启用日志颜色
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">ForceConsoleColor&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/ping&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>)
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他功能">其他功能&lt;/h2>
&lt;h3 id="设置和获取-cookie">设置和获取 cookie&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/cookie&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">cookie&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Cookie&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;gin_cookie&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">cookie&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;NotSet&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">SetCookie&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;gin_cookie&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">3600&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Cookie value: %s \n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">cookie&lt;/span>)
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="自定义验证器">自定义验证器&lt;/h3>
&lt;p>注册自定义验证器也是可行的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;reflect&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin/binding&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;gopkg.in/go-playground/validator.v8&amp;#34;&lt;/span>
)
&lt;span style="color:#75715e">// Booking 包含绑定和验证的数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Booking&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">CheckIn&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span> &lt;span style="color:#e6db74">`form:&amp;#34;check_in&amp;#34; binding:&amp;#34;required,bookabledate&amp;#34; time_format:&amp;#34;2006-01-02&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">CheckOut&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span> &lt;span style="color:#e6db74">`form:&amp;#34;check_out&amp;#34; binding:&amp;#34;required,gtfield=CheckIn&amp;#34; time_format:&amp;#34;2006-01-02&amp;#34;`&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">bookableDate&lt;/span>(
&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">validator&lt;/span>.&lt;span style="color:#a6e22e">Validate&lt;/span>, &lt;span style="color:#a6e22e">topStruct&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#a6e22e">currentStructOrField&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>,
&lt;span style="color:#a6e22e">field&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#a6e22e">fieldType&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span>, &lt;span style="color:#a6e22e">fieldKind&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Kind&lt;/span>, &lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>,
) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">date&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">field&lt;/span>.&lt;span style="color:#a6e22e">Interface&lt;/span>().(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#a6e22e">today&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">today&lt;/span>.&lt;span style="color:#a6e22e">Year&lt;/span>() &amp;gt; &lt;span style="color:#a6e22e">date&lt;/span>.&lt;span style="color:#a6e22e">Year&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">today&lt;/span>.&lt;span style="color:#a6e22e">YearDay&lt;/span>() &amp;gt; &lt;span style="color:#a6e22e">date&lt;/span>.&lt;span style="color:#a6e22e">YearDay&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">route&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">binding&lt;/span>.&lt;span style="color:#a6e22e">Validator&lt;/span>.&lt;span style="color:#a6e22e">Engine&lt;/span>().(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">validator&lt;/span>.&lt;span style="color:#a6e22e">Validate&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#a6e22e">v&lt;/span>.&lt;span style="color:#a6e22e">RegisterValidation&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;bookabledate&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">bookableDate&lt;/span>)
}
&lt;span style="color:#a6e22e">route&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/bookable&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">getBookable&lt;/span>)
&lt;span style="color:#a6e22e">route&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8085&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getBookable&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">Booking&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ShouldBindWith&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">binding&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Booking dates are valid!&amp;#34;&lt;/span>})
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">JSON&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusBadRequest&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>()})
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl &lt;span style="color:#e6db74">&amp;#34;localhost:8085/bookable?check_in=2018-04-16&amp;amp;check_out=2018-04-17&amp;#34;&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Booking dates are valid!&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
$ curl &lt;span style="color:#e6db74">&amp;#34;localhost:8085/bookable?check_in=2018-03-08&amp;amp;check_out=2018-03-09&amp;#34;&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Key: &amp;#39;Booking.CheckIn&amp;#39; Error:Field validation for &amp;#39;CheckIn&amp;#39; failed on the &amp;#39;bookabledate&amp;#39; tag&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="优雅关闭或重启">优雅关闭或重启&lt;/h3>
&lt;p>考虑使用 http.Server 的内建方法 Shutdown() 来优雅的关闭。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;os/signal&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;syscall&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Welcome Gin Server&amp;#34;&lt;/span>)
})
&lt;span style="color:#a6e22e">srv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>{
&lt;span style="color:#a6e22e">Addr&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Handler&lt;/span>: &lt;span style="color:#a6e22e">router&lt;/span>,
}
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#75715e">// service connections
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ErrServerClosed&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;listen: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
}()
&lt;span style="color:#75715e">// 等待超时五秒的中断信号，优雅的关闭服务
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">quit&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Signal&lt;/span>)
&lt;span style="color:#75715e">// kill (no param) default send syscall.SIGTERM
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// kill -2 is syscall.SIGINT
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// kill -9 is syscall.SIGKILL but can&amp;#39;t be catch, so don&amp;#39;t need add it
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">signal&lt;/span>.&lt;span style="color:#a6e22e">Notify&lt;/span>(&lt;span style="color:#a6e22e">quit&lt;/span>, &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">SIGINT&lt;/span>, &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">SIGTERM&lt;/span>)
&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">quit&lt;/span>
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Shutdown Server ...&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cancel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithTimeout&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">cancel&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">Shutdown&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Server Shutdown:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// catching ctx.Done(). timeout of 5 seconds.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;timeout of 5 seconds.&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Server exiting&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="提供静态文件">提供静态文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Static&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/assets&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./assets&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">StaticFS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/more_static&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Dir&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;my_file_system&amp;#34;&lt;/span>))
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">StaticFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/favicon.ico&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./resources/favicon.ico&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="从-reader-提供数据">从 reader 提供数据&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/someDataFromReader&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://raw.githubusercontent.com/gin-gonic/logo/master/color.png&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span> {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusServiceUnavailable&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">reader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>
&lt;span style="color:#a6e22e">contentLength&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">ContentLength&lt;/span>
&lt;span style="color:#a6e22e">contentType&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">extraHeaders&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;Content-Disposition&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">`attachment; filename=&amp;#34;gopher.png&amp;#34;`&lt;/span>,
}
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">DataFromReader&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">contentLength&lt;/span>, &lt;span style="color:#a6e22e">contentType&lt;/span>, &lt;span style="color:#a6e22e">reader&lt;/span>, &lt;span style="color:#a6e22e">extraHeaders&lt;/span>)
})
&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="http2-服务推送">http2 服务推送&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;html/template&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span> = &lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">Must&lt;/span>(&lt;span style="color:#a6e22e">template&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#e6db74">`
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;html&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;head&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;title&amp;gt;Https Test&amp;lt;/title&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;script src=&amp;#34;/assets/app.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;body&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;h1 style=&amp;#34;color:red;&amp;#34;&amp;gt;Welcome, Ginner!&amp;lt;/h1&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/body&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/html&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>))
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Static&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/assets&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./assets&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">SetHTMLTemplate&lt;/span>(&lt;span style="color:#a6e22e">html&lt;/span>)
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pusher&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>.&lt;span style="color:#a6e22e">Pusher&lt;/span>(); &lt;span style="color:#a6e22e">pusher&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#75715e">// 使用 pusher.Push() 来做服务推送
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pusher&lt;/span>.&lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/assets/app.js&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to push: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
}
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">HTML&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;https&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">H&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>,
})
})
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">RunTLS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./testdata/server.pem&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./testdata/server.key&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 上下文 context</title><link>https://wnanbei.github.io/post/go-%E4%B8%8A%E4%B8%8B%E6%96%87-context/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%B8%8A%E4%B8%8B%E6%96%87-context/</guid><description>&lt;p>context 指的是上下文，以下是几种 ctx 类型:&lt;/p>
&lt;ul>
&lt;li>emptyCtx - 所有 ctx 类型的根，用 &lt;code>context.TODO()&lt;/code>，或 &lt;code>context.Background()&lt;/code> 来生成。&lt;/li>
&lt;li>valueCtx - 主要就是为了在 ctx 中嵌入上下文数据，一个简单的 k 和 v 结构，同一个 ctx 内只支持一对 kv，需要更多的 kv 的话，会形成一棵树形结构。&lt;/li>
&lt;li>cancelCtx - 用来取消程序的执行树，一般用 &lt;code>WithCancel&lt;/code>，&lt;code>WithTimeout&lt;/code>，&lt;code>WithDeadline&lt;/code> 返回的取消函数本质上都是对应了 cancelCtx。&lt;/li>
&lt;li>timerCtx - 在 cancelCtx 上包了一层，支持基于时间的 cancel。&lt;/li>
&lt;/ul>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="初始化-context">初始化 context&lt;/h3>
&lt;p>一般使用 &lt;code>context.TODO()&lt;/code> 和 &lt;code>context.Background()&lt;/code> 创建 context，是所有 context 的根，todo 和 background 两者本质上只有名字区别，在按 string 输出的时候会有区别。&lt;/p>
&lt;h3 id="valuectx">valueCtx&lt;/h3>
&lt;p>valueCtx 主要就是用来携带贯穿整个逻辑流程的数据，使用 &lt;code>WithValue&lt;/code> 创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">orderID&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">TODO&lt;/span>()
&lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithValue&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">orderID&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;1234&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithValue&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">orderID&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;2345&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithValue&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">orderID&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;3456&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>key 必须为非空，且可比较。&lt;/p>
&lt;p>在查找值，即执行 Value 操作时，会先判断当前节点的 k 是不是等于用户的输入 k，如果相等，返回结果，如果不等，会依次向上从子节点向父节点，一直查找到整个 ctx 的根。没有找到返回 nil。是一个递归流程：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">valueCtx&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">interface&lt;/span>{} {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">val&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>) &lt;span style="color:#75715e">// 这里发生了递归，c.Context 就是 c.parent
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cancelctx">cancelCtx&lt;/h3>
&lt;p>cancelCtx 主要用于协程的控制，例如关闭协程。使用 &lt;code>WithCancel&lt;/code> 创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cancelFn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithCancel&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">TODO&lt;/span>())
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">jobChan&lt;/span>:
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;do my job&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;parent call me to quit&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">break&lt;/span> &lt;span style="color:#a6e22e">jobLoop&lt;/span>
}
}
}()
&lt;span style="color:#75715e">// 停止所有 worker
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">cancelFn&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="timerctx">timerCtx&lt;/h3>
&lt;p>timerCtx 用于定时的取消任务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cancel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithTimeout&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Millisecond&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">cancel&lt;/span>()
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">After&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>):
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;overslept&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>()) &lt;span style="color:#75715e">// prints &amp;#34;context deadline exceeded&amp;#34;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 反射 reflect</title><link>https://wnanbei.github.io/post/go-%E5%8F%8D%E5%B0%84-reflect/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8F%8D%E5%B0%84-reflect/</guid><description>&lt;p>反射是程序在运行期间检查其自身结构的一种方式 。&lt;/p>
&lt;p>反射三大法则：&lt;/p>
&lt;ul>
&lt;li>反射可以将&lt;code>接口类型变量&lt;/code>转换为&lt;code>反射类型对象&lt;/code>&lt;/li>
&lt;li>反射可以将&lt;code>反射类型对象&lt;/code>转换为&lt;code>接口类型变量&lt;/code>&lt;/li>
&lt;li>如果要修改&lt;code>反射类型对象&lt;/code>，其值必须是&lt;code>可写的(settable)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="type">Type&lt;/h2>
&lt;p>&lt;code>Type&lt;/code> 表示的是对象的具体类型。&lt;/p>
&lt;p>从普通类型变量获取反射类型 &lt;code>Type&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TypeOf&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ChanOf&lt;/span>(&lt;span style="color:#a6e22e">dir&lt;/span> &lt;span style="color:#a6e22e">ChanDir&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">FuncOf&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span> []&lt;span style="color:#a6e22e">Type&lt;/span>, &lt;span style="color:#a6e22e">variadic&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MapOf&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SliceOf&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ArrayOf&lt;/span>(&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">StructOf&lt;/span>(&lt;span style="color:#a6e22e">fields&lt;/span> []&lt;span style="color:#a6e22e">StructField&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Type&lt;/code> 本身是一个 reflect 库暴露出的接口，定义了许多方法，但根据其本身的具体类型，可以使用的方法并不相同。&lt;/p>
&lt;h3 id="方法">方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 只返回类型名，不含包名
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Name&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// 返回类型名字，为包名 + Name()
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// 返回导入路径，即 import 路径
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">PkgPath&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// 返回 rtype.size 即类型大小，单位是字节数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Size&lt;/span>() &lt;span style="color:#66d9ef">uintptr&lt;/span>
&lt;span style="color:#75715e">// 返回 rtype.kind，描述一种基础类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Kind&lt;/span>() &lt;span style="color:#a6e22e">Kind&lt;/span>
&lt;span style="color:#75715e">// 返回类型的位大小，但不是所有类型都能调这个方法，不能调的会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Bits&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 检查当前类型能不能做比较运算，主要根据此类型底层有没有绑定 typeAlg 的 equal 方法。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Comparable&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 变量的内存对齐，返回 rtype.align
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Align&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="struct">Struct&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 返回 struct 字段数量，不是 struct 会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">NumField&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 返回 struct 类型的第 i 个字段，不是 struct 会 panic，i 越界也会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Field&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">StructField&lt;/span>
&lt;span style="color:#75715e">// 返回 struct 类型的字段，是嵌套调用，比如 [1, 2] 就是返回当前 struct 的第 1 个 struct 的第 2 个字段，适用于 struct 本身嵌套的类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">FieldByIndex&lt;/span>(&lt;span style="color:#a6e22e">index&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">StructField&lt;/span>
&lt;span style="color:#75715e">// 按名字找 struct 字段，第二个返回值 ok 表示有没有
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">FieldByName&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">StructField&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#75715e">// 按函数签名找 struct 字段，因为 struct 字段也可能是 func 类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">FieldByNameFunc&lt;/span>(&lt;span style="color:#a6e22e">match&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>) (&lt;span style="color:#a6e22e">StructField&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#75715e">// 根据传入的 i，返回方法实例，表示类型的第 i 个方法
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Method&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Method&lt;/span>
&lt;span style="color:#75715e">// 根据名字返回方法实例，这个比较常用
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">MethodByName&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">Method&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#75715e">// 返回类型方法集中可导出的方法的数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">NumMethod&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// struct 字段的内存对齐，返回 rtype.fieldAlign
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">FieldAlign&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数">函数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 返回函数的参数数量，不是 func 会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">NumIn&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 返回函数的返回值数量，不是 func 会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">NumOut&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 返回函数第 i 个参数的类型，不是 func 会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">In&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#75715e">// 返回函数第 i 个返回值的类型，不是 func 会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Out&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#75715e">// 返回函数类型的最后一个参数是不是可变数量的，&amp;#34;...&amp;#34; 就这样的，同样，如果不是函数类型，会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">IsVariadic&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="interface">Interface&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 检查当前类型有没有实现接口 u
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Implements&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 检查当前类型能不能赋值给接口 u
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">AssignableTo&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 检查当前类型能不能转换成接口 u 类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ConvertibleTo&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="基础数据类型">基础数据类型&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 返回 map 的 key 的类型，不是 map 会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Key&lt;/span>() &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#75715e">// 返回 array 的长度，不是 array 会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 返回 channel 类型的方向，如果不是 channel，会 panic
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ChanDir&lt;/span>() &lt;span style="color:#a6e22e">ChanDir&lt;/span>
&lt;span style="color:#75715e">// 返回所包含元素的类型，只有 Array, Chan, Map, Ptr, Slice 这些才能调，其他类型会 panic。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Elem&lt;/span>() &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="value">Value&lt;/h2>
&lt;p>&lt;code>Value&lt;/code> 表示的是对象的值。&lt;/p>
&lt;p>从普通类型变量获取反射值 &lt;code>Value&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-value">创建 Value&lt;/h3>
&lt;p>以下这些方法可以创建指定类型的 &lt;code>Value&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MakeChan&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>, &lt;span style="color:#a6e22e">buffer&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MakeFunc&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>, &lt;span style="color:#a6e22e">fn&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#a6e22e">Value&lt;/span>) (&lt;span style="color:#a6e22e">results&lt;/span> []&lt;span style="color:#a6e22e">Value&lt;/span>)) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MakeMap&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MakeMapWithSize&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MakeSlice&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>, &lt;span style="color:#a6e22e">len&lt;/span>, &lt;span style="color:#a6e22e">cap&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 创建值并返回指向它的指针
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewAt&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="操作-value">操作 Value&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 将值添加到 Slice 中
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Append&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 将一个 Slice 内的内容添加到 Slice 中
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AppendSlice&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 解引用，获取指针 v 指向的值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Indirect&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// Select
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Select&lt;/span>(&lt;span style="color:#a6e22e">cases&lt;/span> []&lt;span style="color:#a6e22e">SelectCase&lt;/span>) (&lt;span style="color:#a6e22e">chosen&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">recv&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#a6e22e">recvOK&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#75715e">// 返回一个类型的零值，不可更改不可寻址
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Zero&lt;/span>(&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="value-方法">Value 方法&lt;/h2>
&lt;p>&lt;code>Value&lt;/code> 是一个定义的结构体，其有许多定义好的方法，根据其原始类型的不同，能使用的方法也不同。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">typ&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">rtype&lt;/span> &lt;span style="color:#75715e">// 反射出来此值的类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ptr&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// 数据形式的指针值
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">flag&lt;/span> &lt;span style="color:#75715e">// 保存元数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取具体类型值">获取具体类型值&lt;/h3>
&lt;p>使用这些方法可以获取到 &lt;code>Value&lt;/code> 对应类型的具体的值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Int&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Uint&lt;/span>() &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Float&lt;/span>() &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Bool&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Slice&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Slice3&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#75715e">// 用 v[i:j:k] 的方式获取切片
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Bytes&lt;/span>() []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Complex&lt;/span>() &lt;span style="color:#66d9ef">complex128&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Interface&lt;/span>() (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Pointer&lt;/span>() &lt;span style="color:#66d9ef">uintptr&lt;/span> &lt;span style="color:#75715e">// 获取指针
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">UnsafeAddr&lt;/span>() &lt;span style="color:#66d9ef">uintptr&lt;/span> &lt;span style="color:#75715e">// 获取 unsafe 包中的指针
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="通用方法">通用方法&lt;/h3>
&lt;p>这些通用方法基本上是所有类型都可以使用的方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 获取 Value 的 Type
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>() &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#75715e">// 获取 Value 的 Kind
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Kind&lt;/span>() &lt;span style="color:#a6e22e">Kind&lt;/span>
&lt;span style="color:#75715e">// 转换 v 的类型，返回转换以后的值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Convert&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 判断 v 是否合法，如果返回 false，那么除了 String() 以外的其他方法调用都会 panic，事前检查是必要的
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">IsValid&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 判断 Value 是否为零值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">IsZero&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 获取表示 v 的地址的指针值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Addr&lt;/span>() &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 判断 v 是否是可寻址的
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">CanAddr&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 判断 v 的值是否可以被更改
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">CanSet&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 这几个方法判断值是否超出了它的类型能表示的范围
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">OverflowInt&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">OverflowFloat&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">OverflowUint&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">OverflowComplex&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">complex128&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="更改值">更改值&lt;/h3>
&lt;p>以下这些方法可以更改 &lt;code>Value&lt;/code> 的值，但必须符合底层类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetBool&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetBytes&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetCap&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetComplex&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">complex128&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetFloat&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetInt&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetLen&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetMapIndex&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetPointer&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetString&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">SetUint&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="struct-1">Struct&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 获取 struct 字段数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">NumField&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取 struct 方法数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">NumMethod&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取 sturct 第 i 个字段，主要用于遍历
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Field&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 获取 struct 名为 name 的字段
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">FieldByName&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 获取 Struct 内嵌套的方法，[]int 为嵌套的路径
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">FieldByIndex&lt;/span>(&lt;span style="color:#a6e22e">index&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 根据函数签名获取 struct 字段中的函数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">FieldByNameFunc&lt;/span>(&lt;span style="color:#a6e22e">match&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 获取 struct 第 i 个方法
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Method&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 获取 struct 名为 name 的方法
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">MethodByName&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="混合类型方法">混合类型方法&lt;/h3>
&lt;p>这些混合类型方式是限定为一部分类型可用的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 判断 v 是不是 nil，类型为：Chan, Func, Interface, Map, Pointer, Slice
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">IsNil&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 获取 v 的 len 值，类型为：Array, Chan, Map, Slice, String.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 返回 v 的 cap 值，类型为：Array, Slice, Chan
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Cap&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 返回 v 的第 i 个元素，类型为：Array, Slice, String
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Index&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="channel">Channel&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Recv 和 Send 在没有完成操作时会阻塞
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Recv&lt;/span>() (&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>)
&lt;span style="color:#75715e">// TryRecv 和 TrySend 不会阻塞，如果操作没有完成，会返回零值和 false
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">TryRecv&lt;/span>() (&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">TrySend&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 关闭通道
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="7-map">7. Map&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 用 key 获取 map 的值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">MapIndex&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 获取 map 所有的key
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">MapKeys&lt;/span>() []&lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 可以用来遍历 map 的方法
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">MapRange&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MapIter&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>遍历例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">iter&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span>).&lt;span style="color:#a6e22e">MapRange&lt;/span>()
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">iter&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">iter&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>()
&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">iter&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>()
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="func">Func&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 调用函数 v，并将参数作为 Value 切片传入
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Call&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span> []&lt;span style="color:#a6e22e">Value&lt;/span>) []&lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#75715e">// 调用函数 v，并将参数作为 Value 切片传入，CallSlice 会将 in 中最后一个参数作为可变参数传入
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">CallSlice&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span> []&lt;span style="color:#a6e22e">Value&lt;/span>) []&lt;span style="color:#a6e22e">Value&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="interface-1">Interface&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 返回 v 的接口值或者指针
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">Elem&lt;/span>() &lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">CanInterface&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>) &lt;span style="color:#a6e22e">InterfaceData&lt;/span>() [&lt;span style="color:#ae81ff">2&lt;/span>]&lt;span style="color:#66d9ef">uintptr&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kind">Kind&lt;/h2>
&lt;p>&lt;code>Kind&lt;/code> 表示的是对象的原生底层类型。有以下这些类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">Invalid&lt;/span> &lt;span style="color:#a6e22e">Kind&lt;/span> = &lt;span style="color:#66d9ef">iota&lt;/span>
&lt;span style="color:#a6e22e">Bool&lt;/span>
&lt;span style="color:#a6e22e">Int&lt;/span>
&lt;span style="color:#a6e22e">Int8&lt;/span>
&lt;span style="color:#a6e22e">Int16&lt;/span>
&lt;span style="color:#a6e22e">Int32&lt;/span>
&lt;span style="color:#a6e22e">Int64&lt;/span>
&lt;span style="color:#a6e22e">Uint&lt;/span>
&lt;span style="color:#a6e22e">Uint8&lt;/span>
&lt;span style="color:#a6e22e">Uint16&lt;/span>
&lt;span style="color:#a6e22e">Uint32&lt;/span>
&lt;span style="color:#a6e22e">Uint64&lt;/span>
&lt;span style="color:#a6e22e">Uintptr&lt;/span>
&lt;span style="color:#a6e22e">Float32&lt;/span>
&lt;span style="color:#a6e22e">Float64&lt;/span>
&lt;span style="color:#a6e22e">Complex64&lt;/span>
&lt;span style="color:#a6e22e">Complex128&lt;/span>
&lt;span style="color:#a6e22e">Array&lt;/span>
&lt;span style="color:#a6e22e">Chan&lt;/span>
&lt;span style="color:#a6e22e">Func&lt;/span>
&lt;span style="color:#a6e22e">Interface&lt;/span>
&lt;span style="color:#a6e22e">Map&lt;/span>
&lt;span style="color:#a6e22e">Ptr&lt;/span>
&lt;span style="color:#a6e22e">Slice&lt;/span>
&lt;span style="color:#a6e22e">String&lt;/span>
&lt;span style="color:#a6e22e">Struct&lt;/span>
&lt;span style="color:#a6e22e">UnsafePointer&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有一个 &lt;code>func (k Kind) String() string&lt;/code> 方法可以返回 Kind 的名称。&lt;/p>
&lt;h2 id="structfield">StructField&lt;/h2>
&lt;p>此结构体用来表示 Struct 的字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">StructField&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 字段名
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">PkgPath&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// PkgPath 是未导出字段的程序包路径，可导出字段此值为空
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#75715e">// 字段类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Tag&lt;/span> &lt;span style="color:#a6e22e">StructTag&lt;/span> &lt;span style="color:#75715e">// 字段的 Tag
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Offset&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span> &lt;span style="color:#75715e">// 在 struct 中的偏移量，单位 bytes
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Index&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 字段在 struct 中的数字索引
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Anonymous&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 是否是一个嵌入式字段
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="structtag">StructTag&lt;/h2>
&lt;p>此类型用来表示 Struct 字段的 Tag 字符串，其有两个方法可以获取 Tag 中设定的值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">tag&lt;/span> &lt;span style="color:#a6e22e">StructTag&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">tag&lt;/span> &lt;span style="color:#a6e22e">StructTag&lt;/span>) &lt;span style="color:#a6e22e">Lookup&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>Get&lt;/code> 在没有这个字段和字段为空字符时，都会返回空字符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所以如果需要检查是否设置了这个 Tag，需要使用 &lt;code>Lookup&lt;/code>。例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">F0&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`alias:&amp;#34;field_0&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">F1&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`alias:&amp;#34;&amp;#34;`&lt;/span>
&lt;span style="color:#a6e22e">F2&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span>{}
&lt;span style="color:#a6e22e">st&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">TypeOf&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">st&lt;/span>.&lt;span style="color:#a6e22e">NumField&lt;/span>(); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">field&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">st&lt;/span>.&lt;span style="color:#a6e22e">Field&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">alias&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">field&lt;/span>.&lt;span style="color:#a6e22e">Tag&lt;/span>.&lt;span style="color:#a6e22e">Lookup&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;alias&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">alias&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;(blank)&amp;#34;&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">alias&lt;/span>)
}
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;(not specified)&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Go 日志打印 fmt</title><link>https://wnanbei.github.io/post/go-%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0-fmt/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0-fmt/</guid><description>&lt;p>&lt;code>fmt&lt;/code> 是 Go 用于日志打印的库：&lt;/p>
&lt;ul>
&lt;li>模板模式: &lt;code>[name]f&lt;/code> 根据模板格式化 例如: &lt;code>Printf&lt;/code>&lt;/li>
&lt;li>换行模式: &lt;code>[name]ln&lt;/code> 输出后带换行 例如: &lt;code>Println&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="方法">方法&lt;/h2>
&lt;h3 id="print">Print&lt;/h3>
&lt;p>打印数据到控制台，返回字节数和异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fprint">Fprint&lt;/h3>
&lt;p>写入数据到一个 &lt;code>io.Writer&lt;/code> 中，返回写入字节数和异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Fprint&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Fprintf&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Fprintln&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sprint">Sprint&lt;/h3>
&lt;p>写入数据到一个字符串中并返回。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Sprint&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Sprintln&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="errorf">Errorf&lt;/h3>
&lt;p>格式化字符串，并据此生成返回一个 &lt;code>error&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="占位符">占位符&lt;/h2>
&lt;ul>
&lt;li>Go 没有 &lt;code>%u&lt;/code> 点位符，若整数为无符号类型，默认就会被打印成无符号的。&lt;/li>
&lt;li>宽度与精度的控制格式以 Unicode 码点为单位。宽度为该数值占用区域的最小宽度，精度为小数点之后的位数。
操作数的类型为 int 时，宽度与精度都可用字符 &lt;code>*&lt;/code> 表示。&lt;/li>
&lt;li>对于 &lt;code>%g/%G&lt;/code> 而言，精度为所有数字的总数，例如：123.45，%.4g 会打印 123.5，（而 %6.2f 会打印123.45）。&lt;/li>
&lt;li>%e 和 %f 的默认精度为 6。&lt;/li>
&lt;li>对大多数的数值类型而言，宽度为输出的最小字符数，如果必要的话会为已格式化的形式填充空格。&lt;/li>
&lt;li>而以字符串类型，精度为输出的最大字符数，如果必要的话会直接截断。&lt;/li>
&lt;/ul>
&lt;h3 id="普通占位符">普通占位符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">%v&lt;/td>
&lt;td style="text-align:center">相应值的默认格式。&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%v&amp;quot;, people)&lt;/td>
&lt;td style="text-align:center">{zhangsan}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%+v&lt;/td>
&lt;td style="text-align:center">打印结构体时，会添加字段名&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%+v&amp;quot;, people)&lt;/td>
&lt;td style="text-align:center">{Name:zhangsan}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%#v&lt;/td>
&lt;td style="text-align:center">相应值的Go语法表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;#v&amp;quot;, people)&lt;/td>
&lt;td style="text-align:center">main.Human{Name:&amp;ldquo;zhangsan&amp;rdquo;}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%T&lt;/td>
&lt;td style="text-align:center">相应值的类型的Go语法表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%T&amp;quot;, people)&lt;/td>
&lt;td style="text-align:center">main.Human&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%%&lt;/td>
&lt;td style="text-align:center">字面上的百分号，并非值的占位符&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%%&amp;quot;)&lt;/td>
&lt;td style="text-align:center">%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="布尔占位符">布尔占位符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">%t&lt;/td>
&lt;td style="text-align:center">true 或 false。&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%t&amp;quot;, true)&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="整数占位符">整数占位符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">%b&lt;/td>
&lt;td style="text-align:center">二进制表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%b&amp;quot;, 5)&lt;/td>
&lt;td style="text-align:center">101&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%c&lt;/td>
&lt;td style="text-align:center">相应Unicode码点所表示的字符&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%c&amp;quot;, 0x4E2D)&lt;/td>
&lt;td style="text-align:center">中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%d&lt;/td>
&lt;td style="text-align:center">十进制表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%d&amp;quot;, 0x12)&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%o&lt;/td>
&lt;td style="text-align:center">八进制表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%d&amp;quot;, 10)&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%q&lt;/td>
&lt;td style="text-align:center">单引号围绕的字符字面值，由Go语法安全地转义&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%q&amp;quot;, 0x4E2D)&lt;/td>
&lt;td style="text-align:center">&amp;lsquo;中&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%x&lt;/td>
&lt;td style="text-align:center">十六进制表示，字母形式为小写 a-f&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%x&amp;quot;, 13)&lt;/td>
&lt;td style="text-align:center">d&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%X&lt;/td>
&lt;td style="text-align:center">十六进制表示，字母形式为大写 A-F&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%x&amp;quot;, 13)&lt;/td>
&lt;td style="text-align:center">D&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%U&lt;/td>
&lt;td style="text-align:center">Unicode格式：U+1234，等同于 &amp;ldquo;U+%04X&amp;rdquo;&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%U&amp;quot;, 0x4E2D)&lt;/td>
&lt;td style="text-align:center">U+4E2D&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="浮点数和复数">浮点数和复数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">%b&lt;/td>
&lt;td style="text-align:center">无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat 的 &amp;lsquo;b&amp;rsquo; 转换格式一致。例如 -123456p-78&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%e&lt;/td>
&lt;td style="text-align:center">科学计数法，例如 -1234.456e+78&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%e&amp;quot;, 10.2)&lt;/td>
&lt;td style="text-align:center">1.020000e+01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%E&lt;/td>
&lt;td style="text-align:center">科学计数法，例如 -1234.456E+78&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%e&amp;quot;, 10.2)&lt;/td>
&lt;td style="text-align:center">1.020000E+01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%f&lt;/td>
&lt;td style="text-align:center">有小数点而无指数，例如 123.456&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%f&amp;quot;, 10.2)&lt;/td>
&lt;td style="text-align:center">10.200000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%g&lt;/td>
&lt;td style="text-align:center">根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%g&amp;quot;, 10.20)&lt;/td>
&lt;td style="text-align:center">10.2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%G&lt;/td>
&lt;td style="text-align:center">根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%G&amp;quot;, 10.20+2i)&lt;/td>
&lt;td style="text-align:center">(10.2+2i)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="字符串与字节切片">字符串与字节切片&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">%s&lt;/td>
&lt;td style="text-align:center">输出字符串表示（string类型或[]byte)&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%s&amp;quot;, []byte(&amp;ldquo;Go语言&amp;rdquo;))&lt;/td>
&lt;td style="text-align:center">Go语言&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%q&lt;/td>
&lt;td style="text-align:center">双引号围绕的字符串，由Go语法安全地转义&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%q&amp;quot;, &amp;ldquo;Go语言&amp;rdquo;)&lt;/td>
&lt;td style="text-align:center">&amp;ldquo;Go语言&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%x&lt;/td>
&lt;td style="text-align:center">十六进制，小写字母，每字节两个字符&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%x&amp;quot;, &amp;ldquo;Go&amp;rdquo;)&lt;/td>
&lt;td style="text-align:center">676f6c616e67&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">%X&lt;/td>
&lt;td style="text-align:center">十六进制，大写字母，每字节两个字符&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%X&amp;quot;, &amp;ldquo;Go&amp;rdquo;)&lt;/td>
&lt;td style="text-align:center">676F6C616E67&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="指针">指针&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">%p&lt;/td>
&lt;td style="text-align:center">十六进制表示，前缀 0x&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%p&amp;quot;, &amp;amp;people)&lt;/td>
&lt;td style="text-align:center">0x4f57f0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="其它标记">其它标记&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">+&lt;/td>
&lt;td style="text-align:center">总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%+q&amp;quot;, &amp;ldquo;中文&amp;rdquo;)&lt;/td>
&lt;td style="text-align:center">&amp;ldquo;\u4e2d\u6587&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">在右侧而非左侧填充空格（左对齐该区域）&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">#&lt;/td>
&lt;td style="text-align:center">备用格式：为八进制添加前导 0（%#o）&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%#U&amp;quot;, &amp;lsquo;中&amp;rsquo;)&lt;/td>
&lt;td style="text-align:center">U+4E2D&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">' '&lt;/td>
&lt;td style="text-align:center">(空格)为数值中省略的正负号留出空白（% d）；以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">填充前导的0而非空格；对于数字，这会将填充移到正负号之后&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Go 时间处理库 time</title><link>https://wnanbei.github.io/post/go-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%BA%93-time/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%BA%93-time/</guid><description>&lt;p>time 是 Go 用于处理时间的标准库，包括格式化、计算、修改、定时、超时等功能。&lt;/p>
&lt;h2 id="格式">格式&lt;/h2>
&lt;h3 id="时间占位符">时间占位符&lt;/h3>
&lt;p>常用：&lt;code>2006-01-02 15:04:05&lt;/code>&lt;/p>
&lt;ul>
&lt;li>年份：06，2006&lt;/li>
&lt;li>月份：01，Jan，January&lt;/li>
&lt;li>星期：Monday，Mon&lt;/li>
&lt;li>日期：02，2，_2&lt;/li>
&lt;li>小时：15&lt;/li>
&lt;li>小时（12时制）：3，03&lt;/li>
&lt;li>分钟：04，4&lt;/li>
&lt;li>秒钟：05，5&lt;/li>
&lt;li>上下午标志：PM，pm&lt;/li>
&lt;li>时区：MST&lt;/li>
&lt;li>时区偏移：-700&lt;/li>
&lt;/ul>
&lt;h3 id="常量">常量&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">ANSIC&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Mon Jan _2 15:04:05 2006&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">UnixDate&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Mon Jan _2 15:04:05 MST 2006&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">RubyDate&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Mon Jan 02 15:04:05 -0700 2006&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">RFC822&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;02 Jan 06 15:04 MST&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">RFC822Z&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;02 Jan 06 15:04 -0700&amp;#34;&lt;/span> &lt;span style="color:#75715e">// RFC822 with numeric zone
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">RFC850&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Monday, 02-Jan-06 15:04:05 MST&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">RFC1123&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Mon, 02 Jan 2006 15:04:05 MST&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">RFC1123Z&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Mon, 02 Jan 2006 15:04:05 -0700&amp;#34;&lt;/span> &lt;span style="color:#75715e">// RFC1123 with numeric zone
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">RFC3339&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;2006-01-02T15:04:05Z07:00&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">RFC3339Nano&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;2006-01-02T15:04:05.999999999Z07:00&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">Kitchen&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;3:04PM&amp;#34;&lt;/span>
&lt;span style="color:#75715e">// Handy time stamps.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Stamp&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Jan _2 15:04:05&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">StampMilli&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Jan _2 15:04:05.000&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">StampMicro&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Jan _2 15:04:05.000000&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">StampNano&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Jan _2 15:04:05.000000000&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="time-时间点">Time 时间点&lt;/h2>
&lt;h3 id="初始化">初始化&lt;/h3>
&lt;p>当前时间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Now&lt;/span>() &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解析时间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">layout&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;2016-01-02 15:04:05&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;2018-04-23 12:24:51&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>解析指定时区时间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ParseInLocation&lt;/span>(&lt;span style="color:#a6e22e">layout&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">loc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Location&lt;/span>) (&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">ParseInLocation&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;2006-01-02 15:04:05&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;2017-05-11 14:06:06&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Local&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成指定时间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Date&lt;/span>(&lt;span style="color:#a6e22e">year&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">month&lt;/span> &lt;span style="color:#a6e22e">Month&lt;/span>, &lt;span style="color:#a6e22e">day&lt;/span>, &lt;span style="color:#a6e22e">hour&lt;/span>, &lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">sec&lt;/span>, &lt;span style="color:#a6e22e">nsec&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">loc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Location&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Date&lt;/span>(&lt;span style="color:#ae81ff">2018&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Local&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过时间戳生成时间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Unix&lt;/span>(&lt;span style="color:#a6e22e">sec&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">nsec&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Unix&lt;/span>(&lt;span style="color:#ae81ff">1571818205&lt;/span>, &lt;span style="color:#ae81ff">67868768768&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="time-方法">Time 方法&lt;/h3>
&lt;p>休眠，暂停当前协程&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>格式化时间点&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Format&lt;/span>(&lt;span style="color:#a6e22e">layout&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回时间点字符串格式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// &amp;#34;2006-01-02 15:04:05.999999999 -0700 MST&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取时间戳&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 获取10位长度时间戳
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Unix&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;span style="color:#75715e">// 获取纳秒单位时间戳
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">UnixNano&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="具体时间数据">具体时间数据&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 获取年份
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Year&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取月份
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Month&lt;/span>() &lt;span style="color:#a6e22e">Month&lt;/span>
&lt;span style="color:#75715e">// 获取星期
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Weekday&lt;/span>() &lt;span style="color:#a6e22e">Weekday&lt;/span>
&lt;span style="color:#75715e">// 获取日期
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Day&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取小时
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Hour&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取分钟
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Minute&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取秒钟
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Second&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取纳秒
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Nanosecond&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取时分秒
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Clock&lt;/span>() (&lt;span style="color:#a6e22e">hour&lt;/span>, &lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">sec&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#75715e">//获取年月日
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Date&lt;/span>() (&lt;span style="color:#a6e22e">year&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">month&lt;/span> &lt;span style="color:#a6e22e">Month&lt;/span>, &lt;span style="color:#a6e22e">day&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#75715e">// 获取时间点在一年中的天数
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">YearDay&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// 获取时间点年份和周数，周数范围为1-53
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">ISOWeek&lt;/span>() (&lt;span style="color:#a6e22e">year&lt;/span>, &lt;span style="color:#a6e22e">week&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="判断">判断&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 判断时间是否在此之后
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">After&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 判断时间是否在此之前
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Before&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 判断时间是否相等
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Equal&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 判断是否为0
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">IsZero&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="duartion-时间段">Duartion 时间段&lt;/h2>
&lt;h3 id="常量-1">常量&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>时分秒&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">Nanosecond&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">Microsecond&lt;/span> = &lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">Nanosecond&lt;/span>
&lt;span style="color:#a6e22e">Millisecond&lt;/span> = &lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">Microsecond&lt;/span>
&lt;span style="color:#a6e22e">Second&lt;/span> = &lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">Millisecond&lt;/span>
&lt;span style="color:#a6e22e">Minute&lt;/span> = &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">Second&lt;/span>
&lt;span style="color:#a6e22e">Hour&lt;/span> = &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">Minute&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>月份&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Month&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">January&lt;/span> &lt;span style="color:#a6e22e">Month&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">iota&lt;/span>
&lt;span style="color:#a6e22e">February&lt;/span>
&lt;span style="color:#a6e22e">March&lt;/span>
&lt;span style="color:#a6e22e">April&lt;/span>
&lt;span style="color:#a6e22e">May&lt;/span>
&lt;span style="color:#a6e22e">June&lt;/span>
&lt;span style="color:#a6e22e">July&lt;/span>
&lt;span style="color:#a6e22e">August&lt;/span>
&lt;span style="color:#a6e22e">September&lt;/span>
&lt;span style="color:#a6e22e">October&lt;/span>
&lt;span style="color:#a6e22e">November&lt;/span>
&lt;span style="color:#a6e22e">December&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>星期&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Weekday&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">Sunday&lt;/span> &lt;span style="color:#a6e22e">Weekday&lt;/span> = &lt;span style="color:#66d9ef">iota&lt;/span>
&lt;span style="color:#a6e22e">Monday&lt;/span>
&lt;span style="color:#a6e22e">Tuesday&lt;/span>
&lt;span style="color:#a6e22e">Wednesday&lt;/span>
&lt;span style="color:#a6e22e">Thursday&lt;/span>
&lt;span style="color:#a6e22e">Friday&lt;/span>
&lt;span style="color:#a6e22e">Saturday&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="方法">方法&lt;/h3>
&lt;p>解析字符串生成时间段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ParseDuration&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 可用单位&amp;#34;ns&amp;#34;, &amp;#34;us&amp;#34; (or &amp;#34;µs&amp;#34;), &amp;#34;ms&amp;#34;, &amp;#34;s&amp;#34;, &amp;#34;m&amp;#34;, &amp;#34;h&amp;#34;.
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取特定单位的时间段&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Hours&lt;/span>() &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Minutes&lt;/span>() &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Seconds&lt;/span>() &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Milliseconds&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#75715e">// 毫秒
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Microseconds&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#75715e">// 微秒
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Nanoseconds&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#75715e">// 纳秒
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="计算修改时间">计算修改时间&lt;/h2>
&lt;h3 id="修改时间">修改时间&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 加上时间
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#75715e">// 加上日期
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">AddDate&lt;/span>(&lt;span style="color:#a6e22e">years&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">months&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">days&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="计算时间">计算时间&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 减去时间
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Sub&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;span style="color:#75715e">// 到当前时间过去了多久时间，等价 time.Now().Sub(t)
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;span style="color:#75715e">// 到指定时间还有多久，等价 t.Sub(time.Now())
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Until&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="时间点取整">时间点取整&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Round&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Truncate&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="时区">时区&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 获取时间点的时区
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Location&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Location&lt;/span>
&lt;span style="color:#75715e">// 获取时区名和偏移量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Zone&lt;/span>() (&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">offset&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#75715e">// 获取时间点在当前时区的副本
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">Local&lt;/span>() &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#75715e">// 获取时间点在UTC时区的副本
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">UTC&lt;/span>() &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#75715e">// 获取时间点在指定时区的副本
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">In&lt;/span>(&lt;span style="color:#a6e22e">loc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Location&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="定时与超时">定时与超时&lt;/h2>
&lt;h3 id="timer">Timer&lt;/h3>
&lt;p>此函数等待指定时间后，然后在返回的通道中发送当前时间。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">After&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以与 select 配合实现超时功能：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">handle&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>) {}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>:
&lt;span style="color:#a6e22e">handle&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">After&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>):
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;timed out&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Timer 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 创建 Timer
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewTimer&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Timer&lt;/span>
&lt;span style="color:#75715e">// 指定时间后调用 f 函数，可以使用返回的 Timer 取消
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AfterFunc&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>()) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Timer&lt;/span>
&lt;span style="color:#75715e">// 重置计时时间
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Timer&lt;/span>) &lt;span style="color:#a6e22e">Reset&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 停止 Timer
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Timer&lt;/span>) &lt;span style="color:#a6e22e">Stop&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ticker">Ticker&lt;/h3>
&lt;p>此函数是 Ticker 的简单封装，可以返回一个通道，此通道间隔指定时间发送当前时间，注意的是，由于无法关闭底层 Ticker，此通道是默认泄露的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Tick&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实现定时效果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">statusUpdate&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> }
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Tick&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%v %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#a6e22e">statusUpdate&lt;/span>())
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ticker 方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 创建 Ticker
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewTicker&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Ticker&lt;/span>
&lt;span style="color:#75715e">// 停止 Ticker
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Ticker&lt;/span>) &lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 错误处理 errors</title><link>https://wnanbei.github.io/post/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-errors/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-errors/</guid><description>&lt;p>&lt;code>errors&lt;/code> 用于增强 Go 的错误处理能力。&lt;/p>
&lt;h2 id="errors">Errors&lt;/h2>
&lt;p>&lt;code>error&lt;/code> 类型为一个接口，其定义为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Error&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="error">Error&lt;/h3>
&lt;p>&lt;code>Error()&lt;/code> 函数返回一个字符串，用以表示这个 &lt;code>error&lt;/code> 类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#a6e22e">Error&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> (
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wrap">Wrap&lt;/h3>
&lt;p>Go 1.13 中新增，可以将 &lt;code>error&lt;/code> 嵌套起来，形成多层结构。&lt;/p>
&lt;p>简单的嵌套方法，用 &lt;code>Errorf()&lt;/code> 和 &lt;code>%w&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;原始错误&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Wrap了一个错误%w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>复杂的自定义类型需要拥有 &lt;code>Unwrap()&lt;/code> 方法的 &lt;code>error&lt;/code> 类型。&lt;/p>
&lt;p>&lt;code>Unwrap()&lt;/code> 的定义举例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">NewError&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">NewError&lt;/span>) &lt;span style="color:#a6e22e">Error&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">NewError&lt;/span>) &lt;span style="color:#a6e22e">Unwrap&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> (
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;原始错误&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">NewError&lt;/span>{&lt;span style="color:#a6e22e">err&lt;/span>: &lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;wrap了一个错误&amp;#34;&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="unwrap">Unwrap&lt;/h3>
&lt;p>Go 1.13 新增，这个函数可以把嵌套在 &lt;code>error&lt;/code> 中的 &lt;code>error&lt;/code> 取出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Unwrap&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="is">Is&lt;/h3>
&lt;p>用来判断 &lt;code>err&lt;/code> 或者其嵌套链中，是否有 &lt;code>target&lt;/code> 类型的异常，只能判断已经生成的特定类型 &lt;code>error&lt;/code>，也就是所谓的哨兵异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Is&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>, &lt;span style="color:#a6e22e">target&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Is&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">ErrExist&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="as">As&lt;/h3>
&lt;p>用来判断 &lt;code>err&lt;/code> 或者其嵌套链中，是否有 &lt;code>target&lt;/code> 的异常，如果有，就将符合类型的 &lt;code>err&lt;/code> 赋值给 &lt;code>target&lt;/code>。&lt;/p>
&lt;p>这种方式只能判断指定的自定义异常类型，也就是 &lt;code>struct&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">As&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>, &lt;span style="color:#a6e22e">target&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">tar&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">PathError&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">As&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">tar&lt;/span>) {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">perr&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 系统库 os</title><link>https://wnanbei.github.io/post/go-%E7%B3%BB%E7%BB%9F%E5%BA%93-os/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%B3%BB%E7%BB%9F%E5%BA%93-os/</guid><description>&lt;p>&lt;code>os&lt;/code> 库主要用于 Go 的文件、系统相关操作。&lt;/p>
&lt;h2 id="文件操作">文件操作&lt;/h2>
&lt;p>导入模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="打开文件">打开文件&lt;/h3>
&lt;p>函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#75715e">// 只能用于读取
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">OpenFile&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">flag&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">perm&lt;/span> &lt;span style="color:#a6e22e">FileMode&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>name&lt;/code> - 文件路径&lt;/li>
&lt;li>&lt;code>flag&lt;/code> - 打开文件模式&lt;/li>
&lt;li>&lt;code>perm&lt;/code> - 权限控制&lt;/li>
&lt;/ul>
&lt;p>文件打开模式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 此三项模式必须至少指定一个
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">O_RDONLY&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_RDONLY&lt;/span> &lt;span style="color:#75715e">// 只读模式
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">O_WRONLY&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_WRONLY&lt;/span> &lt;span style="color:#75715e">// 只写模式
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">O_RDWR&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_RDWR&lt;/span> &lt;span style="color:#75715e">// 读写模式
&lt;/span>&lt;span style="color:#75715e">// 这些行为的选项是可选的
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">O_APPEND&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_APPEND&lt;/span> &lt;span style="color:#75715e">// 添加模式
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">O_CREATE&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_CREAT&lt;/span> &lt;span style="color:#75715e">// 如果文件不存在则创建新文件
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">O_EXCL&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_EXCL&lt;/span> &lt;span style="color:#75715e">// 与 O_CREATE 一起使用, 文件必须不存在
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">O_SYNC&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_SYNC&lt;/span> &lt;span style="color:#75715e">// 同步方式打开，即不使用缓存，直接写入硬盘
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">O_TRUNC&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_TRUNC&lt;/span> &lt;span style="color:#75715e">// 打开并清空文件
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">file&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">OpenFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;example.txt&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">O_RDWR&lt;/span>|&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">O_CREATE&lt;/span>, &lt;span style="color:#ae81ff">0664&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">file&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="file-对象">File 对象&lt;/h3>
&lt;h4 id="读取">读取&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 读取数据到指定的 []byte 中
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 从 off 开始读取数据到指定的 []byte 中
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">ReadAt&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">off&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 获取文件名
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Name&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// 返回描述文件的 FileInfo 类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Stat&lt;/span>() (&lt;span style="color:#a6e22e">FileInfo&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="写入">写入&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 写入文件
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 指定位置写入文件
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">WriteAt&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">off&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 写入字符串
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="操作">操作&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 关闭文件
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Close&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 将文件裁剪到 size 大小，多余部分会被丢弃，size 为 0 则清空文件
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Truncate&lt;/span>(&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 将文件系统的最近写入的数据从内存中的拷贝刷新到硬盘中稳定保存
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Sync&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 更改文件操作的位置
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Seek&lt;/span>(&lt;span style="color:#a6e22e">offset&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">whence&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 更改文件权限
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Chmod&lt;/span>(&lt;span style="color:#a6e22e">mode&lt;/span> &lt;span style="color:#a6e22e">FileMode&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 更改文件所有者
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Chown&lt;/span>(&lt;span style="color:#a6e22e">uid&lt;/span>, &lt;span style="color:#a6e22e">gid&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 获取目录的内容的 FileInfo 类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Readdir&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) ([]&lt;span style="color:#a6e22e">FileInfo&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 获取目录的内容的名称
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">Readdirnames&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">names&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 设置读写文件超时
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">SetDeadline&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">SetReadDeadline&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>) &lt;span style="color:#a6e22e">SetWriteDeadline&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fileinfo-对象">FileInfo 对象&lt;/h3>
&lt;p>描述文件信息的接口对象&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FileInfo&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Name&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 文件名
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Size&lt;/span>() &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#75715e">// 文件大小
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Mode&lt;/span>() &lt;span style="color:#a6e22e">FileMode&lt;/span> &lt;span style="color:#75715e">// 文件权限
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ModTime&lt;/span>() &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span> &lt;span style="color:#75715e">// 上次更改时间
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">IsDir&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 是否是目录
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Sys&lt;/span>() &lt;span style="color:#66d9ef">interface&lt;/span>{} &lt;span style="color:#75715e">// 底层数据源
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常用方法">常用方法&lt;/h2>
&lt;h3 id="文件操作-1">文件操作&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 创建文件
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">File&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#75715e">// 创建目录
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Mkdir&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">perm&lt;/span> &lt;span style="color:#a6e22e">FileMode&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 创建路径中所有目录
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MkdirAll&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">perm&lt;/span> &lt;span style="color:#a6e22e">FileMode&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 删除文件或目录
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Remove&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 删除目录及所有子目录内容
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">RemoveAll&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 重命名或移动文件或目录
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Rename&lt;/span>(&lt;span style="color:#a6e22e">oldpath&lt;/span>, &lt;span style="color:#a6e22e">newpath&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 裁剪文件大小
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Truncate&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 获取文件或目录信息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Stat&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">FileInfo&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="环境变量">环境变量&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Clearenv&lt;/span>() &lt;span style="color:#75715e">// 清除所有环境变量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Environ&lt;/span>() []&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 返回所有环境变量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 获取指定环境变量值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Setenv&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#75715e">// 设置环境变量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Unsetenv&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#75715e">// 取消某个环境变量
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="系统信息">系统信息&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Getwd&lt;/span>() (&lt;span style="color:#a6e22e">dir&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#75715e">// 获取当前路径的绝对路径
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Hostname&lt;/span>() (&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#75715e">// 获取当前主机名
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Getpid&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 获取调用者进程 ID
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Getppid&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 获取调用者父进程 ID
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Getgid&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 获取调用者组 ID
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Getegid&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 获取调用者有效的组 ID
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Getgroups&lt;/span>() ([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#75715e">// 获取调用者所属的所有组
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Getuid&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 获取调用者用户 ID
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Geteuid&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 获取调用者有效的用户 ID
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="检查异常">检查异常&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">IsExist&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 检查是否是文件存在异常
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">IsNotExist&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 检查是否是文件不存在异常
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">IsPermission&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 检查是否是权限异常
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">IsTimeout&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 检查是否是超时异常
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 基础数据结构</title><link>https://wnanbei.github.io/post/go-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>&lt;p>Go 基础数据结构 &lt;code>array&lt;/code>、&lt;code>slice&lt;/code>、&lt;code>map&lt;/code> 的声明与使用。&lt;/p>
&lt;h2 id="array">array&lt;/h2>
&lt;p>数组是同一类型元素的集合。&lt;/p>
&lt;p>长度固定，不允许数组混合不同类型的元素。&lt;/p>
&lt;h3 id="声明">声明&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>数组中的所有元素会被自动赋值为数据类型的零值。&lt;/li>
&lt;li>数组的索引从 0 开始。&lt;/li>
&lt;li>不同大小的数组视为不同类型。&lt;/li>
&lt;li>Go 中的数组是值类型而不是引用类型，当数组赋值给一个新的变量时，该变量会得到一个原始数组的一个副本。&lt;/li>
&lt;/ul>
&lt;p>声明时赋值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> = [&lt;span style="color:#ae81ff">3&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">78&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>}
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">78&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>}
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> [&lt;span style="color:#ae81ff">5&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>:&lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>:&lt;span style="color:#ae81ff">78&lt;/span>}
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> [&lt;span style="color:#f92672">...&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">78&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>} &lt;span style="color:#75715e">// 自动计算长度
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="多维数组">多维数组&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>][&lt;span style="color:#ae81ff">2&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>{
{&lt;span style="color:#e6db74">&amp;#34;lion&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tiger&amp;#34;&lt;/span>},
{&lt;span style="color:#e6db74">&amp;#34;cat&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;dog&amp;#34;&lt;/span>},
{&lt;span style="color:#e6db74">&amp;#34;pigeon&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;peacock&amp;#34;&lt;/span>},
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="slice">slice&lt;/h2>
&lt;p>切片可以理解为一个可变长度的数组。&lt;/p>
&lt;p>切片本质上是对数组建立的方便、灵活且功能强大的封装（&lt;code>Wrapper&lt;/code>）。&lt;/p>
&lt;p>切片本身不存储任何数据，数据存储在底层的数组中，切片只是对数组的引用。对切片所做的任何修改都会反映在底层数组中。&lt;/p>
&lt;h3 id="声明-1">声明&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用已有数组创建切片。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> [&lt;span style="color:#ae81ff">5&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">76&lt;/span>, &lt;span style="color:#ae81ff">77&lt;/span>, &lt;span style="color:#ae81ff">78&lt;/span>, &lt;span style="color:#ae81ff">79&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#a6e22e">a&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:&lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>make&lt;/code> 创建切片，三个参数是类型、长度、容量，容量是可选参数，默认值与长度相同。&lt;/p>
&lt;p>长度不为 0 时，将会自动填充相应数量的默认值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>make&lt;/code> 创建空切片时，一般长度使用 0，但是最好指定容量信息，避免后续追加内容时容量不足，造成频繁的内存分配。&lt;/p>
&lt;h3 id="空切片">空切片&lt;/h3>
&lt;p>切片还有 nil 切片和空切片，它们的长度和容量都是 0，但是它们指向底层数组的指针不一样&lt;/p>
&lt;ul>
&lt;li>
&lt;p>nil 切片意味着指向底层数组的指针为 nil，表示切片不存在&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nilSlice&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// nil 切片
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>而空切片对应的指针是个地址，一般用来表示这是一个空集合，没有内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">slice&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>{} &lt;span style="color:#75715e">// 空切片
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="长度和容量">长度和容量&lt;/h3>
&lt;ul>
&lt;li>长度使用 &lt;code>len()&lt;/code> 查看，是切片中元素的数量。访问超过长度的索引值会报错。&lt;/li>
&lt;li>容量使用 &lt;code>cap()&lt;/code> 查看，是指创建切片时，底层数组的元素数量。容量必须大于等于长度。&lt;/li>
&lt;/ul>
&lt;h3 id="添加元素">添加元素&lt;/h3>
&lt;p>使用&lt;code>append()&lt;/code>方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>
append(&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>)
append(&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#ae81ff">40&lt;/span>)
&lt;span style="color:#a6e22e">veggies&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;potatoes&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tomatoes&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;brinjal&amp;#34;&lt;/span>}
&lt;span style="color:#a6e22e">fruits&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;oranges&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;apples&amp;#34;&lt;/span>}
&lt;span style="color:#a6e22e">food&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> append(&lt;span style="color:#a6e22e">veggies&lt;/span>, &lt;span style="color:#a6e22e">fruits&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>append()&lt;/code> 方法时，如果添加元素后的数量超过了切片的容量，那么 Go 会自动创建一个容量翻倍的底层数组，并将原有数组的数据复制到新的数组中，这样就实现了切片的动态长度。&lt;/p>
&lt;p>注意：最好预先定好切片的大概长度，避免频繁的重新分配数组，浪费系统性能。&lt;/p>
&lt;h3 id="拷贝">拷贝&lt;/h3>
&lt;p>切片中保存的是对底层数组的引用，所以赋值给其他变量后，修改的依然是原数组。&lt;/p>
&lt;p>如果有对某个数组的切片存在，那么原数组就不会被垃圾回收。&lt;/p>
&lt;p>使用 &lt;code>copy()&lt;/code> 函数可以生成一个与原切片无关的切片副本。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">countries&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;USA&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Singapore&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Germany&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;India&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Australia&amp;#34;&lt;/span>}
&lt;span style="color:#a6e22e">neededCountries&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">countries&lt;/span>[:len(&lt;span style="color:#a6e22e">countries&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>]
&lt;span style="color:#a6e22e">countriesCpy&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">string&lt;/span>, len(&lt;span style="color:#a6e22e">neededCountries&lt;/span>))
copy(&lt;span style="color:#a6e22e">countriesCpy&lt;/span>, &lt;span style="color:#a6e22e">neededCountries&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="map">map&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Map&lt;/code> 与切片相同，是引用类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Map&lt;/code> 之间不能使用 &lt;code>==&lt;/code> 操作符进行判断，&lt;code>==&lt;/code> 只能用来检查 &lt;code>Map&lt;/code> 是否为 &lt;code>nil&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="声明-2">声明&lt;/h3>
&lt;p>表示方式为 &lt;code>map[key type]value type&lt;/code>，如 &lt;code>map[string]int&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> = &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;hunter&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">12&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;tony&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">10&lt;/span>}
&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>与切片相同，使用 &lt;code>make&lt;/code> 创建 map 时，最好指定容量信息，避免后续追加内容时容量不足，造成频繁的内存分配&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">files&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadDir&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;./files&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">FileInfo&lt;/span>, len(&lt;span style="color:#a6e22e">files&lt;/span>))
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">files&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span>[&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>()] = &lt;span style="color:#a6e22e">f&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="取值">取值&lt;/h3>
&lt;p>取值方式为 &lt;code>map[key]&lt;/code>，如果取一个不存在的值的话，那么会返回相应的数据类型的零值。&lt;/p>
&lt;p>如果我们希望知道 &lt;code>Map&lt;/code> 中到底存不存在这个值，我们可以使用以下语法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">key&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除元素">删除元素&lt;/h3>
&lt;p>删除 &lt;code>Map&lt;/code> 中的元素可以使用 &lt;code>delete(map, key)&lt;/code> 函数，此函数没有返回值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">delete(&lt;span style="color:#a6e22e">person&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;steve&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="new-和-make-区别">New 和 Make 区别&lt;/h2>
&lt;p>Go 语言中 &lt;code>new&lt;/code> 和 &lt;code>make&lt;/code> 是内建的两个函数，主要用来创建分配类型内存。&lt;/p>
&lt;h3 id="变量声明">变量声明&lt;/h3>
&lt;p>通常的声明方式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>声明值类型变量时，默认值是他们的零值&lt;/li>
&lt;li>声明引用类型时，类型的零值是 &lt;code>nil&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>而直接声明引用类型，会造成引用类型的内存空间没有分配，无法存储数据，例如以下代码会报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="new">New&lt;/h3>
&lt;p>&lt;code>new()&lt;/code> 函数主要用于为变量分配内存，并初始化为零值。&lt;/p>
&lt;p>它只接受一个类型作为参数，分配好内存后，返回一个指向该类型内存地址的指针。同时把分配的内存值置为零，也就是类型的零值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">i&lt;/span> = new(&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>struct 可以用此方法将 struct 内部的字段初始化，例如下面这个 user 类型的 lock 字段，不需要额为的初始化了。&lt;/p>
&lt;p>&lt;code>new()&lt;/code> 也等价于 &lt;code>u := user{}&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">lock&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#a6e22e">u&lt;/span>&lt;span style="color:#f92672">:=&lt;/span>new(&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;张三&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="make">Make&lt;/h3>
&lt;p>&lt;code>make()&lt;/code> 函数主要用于为特定类型分配内存：&lt;code>Slice&lt;/code>、&lt;code>Map&lt;/code>、&lt;code>Chan&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>因为这三种类型就是引用类型，所以没有必要返回他们的指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于是引用类型，所以必须得初始化，但不是置为零值，这是和 &lt;code>new&lt;/code> 不一样的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="异同">异同&lt;/h3>
&lt;p>相同：&lt;/p>
&lt;ul>
&lt;li>二者都是内存的分配（堆上）&lt;/li>
&lt;/ul>
&lt;p>差异：&lt;/p>
&lt;ul>
&lt;li>&lt;code>make&lt;/code> 只用于 slice、map、chan 的初始化（非零值）&lt;/li>
&lt;li>&lt;code>new&lt;/code> 用于类型的内存分配，并且内存置为零值&lt;/li>
&lt;/ul></description></item><item><title>Go 并发消息队列 channel</title><link>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-channel/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-channel/</guid><description>&lt;p>&lt;code>Channel&lt;/code> 实际上是类型化消息的队列，它有以下特性：&lt;/p>
&lt;ul>
&lt;li>只能传输一种类型的数据。&lt;/li>
&lt;li>所有的类型都可以用于通道，空接口 &lt;code>interface{}&lt;/code> 也可以。&lt;/li>
&lt;li>先进先出 &lt;code>FIFO&lt;/code> 的结构。&lt;/li>
&lt;li>引用类型，所以使用 &lt;code>make()&lt;/code> 函数来给它分配内存。&lt;/li>
&lt;/ul>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="声明">声明&lt;/h3>
&lt;p>声明一个无缓冲的 &lt;code>Channel&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ch1&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">ch2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有缓冲 &lt;code>Channel&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="发送数据">发送数据&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> close(&lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>阻塞：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>向 &lt;code>nil&lt;/code> 通道发送数据会被阻塞。&lt;/li>
&lt;li>向无缓冲 channel 写数据，如果读协程没有准备好会阻塞。&lt;/li>
&lt;li>向有缓冲 channel 写数据，如果缓冲已满会阻塞。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>panic：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>向已 closed 的 channel 写数据会 panic。&lt;/li>
&lt;/ul>
&lt;p>有缓冲的 channel，如果发送的时候，刚好有等待接收的协程，那么会直接交换数据。&lt;/p>
&lt;h3 id="接收数据">接收数据&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span>
&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ch&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ok&lt;/code> 可以用来判断 channel 是否已经关闭，如果关闭该值为 true ，此时 v 接收到的是 channel 类型的零值。&lt;/p>
&lt;p>&lt;code>&amp;lt;- ch&lt;/code> 可以单独调用获取通道的（下一个）值，当前值会被丢弃，但是可以用来验证，所以以下代码是合法的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>{
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>阻塞：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>从 &lt;code>nil&lt;/code> 通道接收数据会被阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从无缓冲 channel 读数据，如果写协程没有准备好，会阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从有缓冲 channel 读数据，如果缓冲为空，会阻塞。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>读取的 channel 如果被关闭，并不会影响正在读的数据，它会将所有数据读取完毕，并不会立即就失败或者返回零值。&lt;/p>
&lt;h3 id="通道方向">通道方向&lt;/h3>
&lt;p>通道在创建时都是双向的，但是我们可以声明单向的通道，在传递参数时用来限制使用者对通道的操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">source&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>){ &lt;span style="color:#75715e">// 单向入队列
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> { &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> }
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">sink&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) { &lt;span style="color:#75715e">// 单向出队列
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> { &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ch&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>特性：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>只接收的通道 &lt;code>&amp;lt;-chan T&lt;/code> 是无法关闭的。&lt;/li>
&lt;/ul>
&lt;h3 id="遍历读取">遍历读取&lt;/h3>
&lt;p>&lt;code>for-range&lt;/code> 可以用来便利读取 channel 中的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>如果 channel 已经被关闭，它还是会继续执行，直到所有值被取完，然后退出执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果通道没有关闭，但是 channel 没有可读取的数据，它则会阻塞在 range 这句位置，直到被唤醒。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果 channel 是 nil，那么同样符合我们上面说的的原则，读取会被阻塞，也就是会一直阻塞在 &lt;code>range&lt;/code> 位置。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="select">select&lt;/h3>
&lt;p>&lt;code>select case&lt;/code> 语句可以方便的对通道进行操作，每次执行 select 语句，将会执行所有的 case 语句，判断是否有表达式能够执行。&lt;/p>
&lt;p>也就是说，select case 语句能同时监控多个通道，当有通道离开堵塞状态，就可以获知并执行相应的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>:
&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> = &lt;span style="color:#a6e22e">y&lt;/span>, &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">y&lt;/span>
&lt;span style="color:#66d9ef">break&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">q&lt;/span>:
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;quit&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>select 只要有默认语句，就不会被阻塞，换句话说，如果没有 default，然后 case 又都不能读或者写，则会被阻塞。&lt;/li>
&lt;li>nil 的 channel，不管读写都会被阻塞。&lt;/li>
&lt;li>select 不能够像 &lt;code>for-range&lt;/code> 一样发现 channel 被关闭而终止执行，所以需要结合 &lt;code>multi-valued assignment&lt;/code> 来处理。&lt;/li>
&lt;li>如果同时有多个 case 满足了条件，会使用伪随机选择一个 case 来执行。&lt;/li>
&lt;li>select 语句如果不配合 for 语句使用，只会对 case 表达式求值一次。&lt;/li>
&lt;li>每次 select 语句的执行，是会扫码完所有的 case 后才确定如何执行，而不是说遇到合适的 case 就直接执行了。&lt;/li>
&lt;/ol>
&lt;h3 id="关闭通道">关闭通道&lt;/h3>
&lt;p>channel 在使用完毕以后需要关闭，一般的建议是谁写入，谁负责关闭。&lt;/p>
&lt;p>如果有多个写协程的 channel 需要关闭，可以使用额外的 channel 来标记，也可以使用 &lt;code>sync.Once&lt;/code> 或者 &lt;code>sync.Mutex&lt;/code> 来处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> close(&lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注：closed 的 channel，再次关闭会 panic。&lt;/strong>&lt;/p>
&lt;h3 id="空-struct">空 struct&lt;/h3>
&lt;p>有时我们需要将 channel 作为一个信号传输的管道，此时管道中的内容并不重要，只需要知道有信号传输过来即可。&lt;/p>
&lt;p>此时可以使用空 struct 作为传输的数据类型，因为空 struct 类型的内存占用大小为 0。即：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">c1&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#a6e22e">c1&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}{}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 结构体 struct</title><link>https://wnanbei.github.io/post/go-%E7%BB%93%E6%9E%84%E4%BD%93-struct/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%BB%93%E6%9E%84%E4%BD%93-struct/</guid><description>&lt;p>Go 通过类型别名 &lt;code>alias types&lt;/code> 和结构体的形式支持用户自定义类型。&lt;/p>
&lt;h2 id="定义和声明">定义和声明&lt;/h2>
&lt;h3 id="定义">定义&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">identifier&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">field1&lt;/span> &lt;span style="color:#a6e22e">type1&lt;/span>
&lt;span style="color:#a6e22e">field2&lt;/span> &lt;span style="color:#a6e22e">type2&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>结构体的字段可以是任何类型，甚至是结构体本身，也可以是函数或者接口。&lt;/li>
&lt;/ul>
&lt;h3 id="声明与赋值">声明与赋值&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">a&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span>
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span> = &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>简短初始化方式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">intr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Interval&lt;/span>{&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>} &lt;span style="color:#75715e">// 需要按顺序赋值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">intr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Interval&lt;/span>{&lt;span style="color:#a6e22e">end&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#a6e22e">start&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>} &lt;span style="color:#75715e">// 不需要按顺序
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">intr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Interval&lt;/span>{&lt;span style="color:#a6e22e">end&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>} &lt;span style="color:#75715e">// 甚至可以忽略某些字段
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>结构体未赋值的字段的值是它们所属类型的零值&lt;/li>
&lt;/ul>
&lt;h3 id="new-声明">new 声明&lt;/h3>
&lt;p>使用 &lt;code>new&lt;/code> 函数给一个新的结构体变量分配内存，它会返回指向已分配内存的指针&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">T&lt;/span> = new(&lt;span style="color:#a6e22e">T&lt;/span>)
&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">T&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">T&lt;/span> &lt;span style="color:#75715e">// 也可以分离定义和声明
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">t&lt;/span> = new(&lt;span style="color:#a6e22e">T&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>变量 &lt;code>t&lt;/code> 是一个指向 &lt;code>T&lt;/code> 的指针，此时结构体字段的值是它们所属类型的零值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>声明 &lt;code>var t T&lt;/code> 也会给 &lt;code>t&lt;/code> 分配内存，并零值化内存，但是这个时候 &lt;code>t&lt;/code> 是类型 &lt;code>T&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>初始化一个结构体实例更简短和惯用的方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ms&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">struct1&lt;/span>{&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">15.5&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Chris&amp;#34;&lt;/span>}
&lt;span style="color:#75715e">// 此时ms的类型是 *struct1
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是一种简写，底层仍然会调用 &lt;code>new ()&lt;/code>，这里值的顺序必须按照字段顺序来写。表达式 &lt;code>new(Type)&lt;/code> 和 &lt;code>&amp;amp;Type{}&lt;/code> 是等价的。&lt;/p>
&lt;h3 id="字段">字段&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">structname&lt;/span>.&lt;span style="color:#a6e22e">fieldname&lt;/span> = &lt;span style="color:#a6e22e">value&lt;/span>
&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">structname&lt;/span>.&lt;span style="color:#a6e22e">fieldname&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>无论变量是一个结构体类型还是一个结构体类型指针，都使用同样的方式来使用结构体的字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">myStruct&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> { &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> }
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">myStruct&lt;/span> &lt;span style="color:#75715e">// v是结构体类型变量
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">myStruct&lt;/span> &lt;span style="color:#75715e">// p是指向一个结构体类型变量的指针
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">v&lt;/span>.&lt;span style="color:#a6e22e">i&lt;/span>
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">i&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以通过解引用的方式来设置值：&lt;code>(*pers2).lastName = &amp;quot;Woodward&amp;quot;&lt;/code>&lt;/p>
&lt;h3 id="类型转换">类型转换&lt;/h3>
&lt;p>Go 中的类型转换遵循严格的规则。当为结构体定义了一个 alias 类型时，此结构体类型和它的 alias 类型都有相同的底层类型，它们可以互相转换。&lt;/p>
&lt;p>同时需要注意其中非法赋值或转换引起的编译错误。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">float32&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">nr&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#75715e">// 别名
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span>{&lt;span style="color:#ae81ff">5.0&lt;/span>}
&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">nr&lt;/span>{&lt;span style="color:#ae81ff">5.0&lt;/span>}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> = &lt;span style="color:#a6e22e">number&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="嵌套">嵌套&lt;/h2>
&lt;h3 id="匿名字段">匿名字段&lt;/h3>
&lt;p>结构体可以包含一个或多个匿名字段，即这些字段没有显式的名字，只有字段的类型是必须的，此时类型就是字段的名字。&lt;/p>
&lt;ul>
&lt;li>在一个结构体中对于每一种数据类型只能有一个匿名字段。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">outerS&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">float32&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#a6e22e">outer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">outerS&lt;/span>)
&lt;span style="color:#a6e22e">outer&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span> = &lt;span style="color:#ae81ff">6&lt;/span>
&lt;span style="color:#a6e22e">outer&lt;/span>.&lt;span style="color:#a6e22e">c&lt;/span> = &lt;span style="color:#ae81ff">7.5&lt;/span>
&lt;span style="color:#a6e22e">outer&lt;/span>.&lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">60&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;outer.b is: %d\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">outer&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;outer.c is: %f\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">outer&lt;/span>.&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;outer.int is: %d\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">outer&lt;/span>.&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="内嵌-struct">内嵌 struct&lt;/h3>
&lt;p>同样地，结构体也是一种数据类型，所以它也可以作为一个匿名字段来使用。&lt;/p>
&lt;p>当一个匿名类型被内嵌在结构体中时，匿名类型的可见方法也同样被内嵌，这在效果上等同于外层类型继承了这些方法：&lt;/p>
&lt;ul>
&lt;li>将父类型放在子类型中来实现亚型。&lt;/li>
&lt;/ul>
&lt;p>这个机制提供了一种简单的方式来模拟经典面向对象语言中的子类和继承相关的效果，类似 Ruby 中的 &lt;code>mixin&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">ax&lt;/span>, &lt;span style="color:#a6e22e">ay&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">A&lt;/span>
&lt;span style="color:#a6e22e">bx&lt;/span>, &lt;span style="color:#a6e22e">by&lt;/span> &lt;span style="color:#66d9ef">float32&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>{&lt;span style="color:#a6e22e">A&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>}, &lt;span style="color:#ae81ff">3.0&lt;/span>, &lt;span style="color:#ae81ff">4.0&lt;/span>}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">ax&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">ay&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">bx&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">by&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>内嵌将一个已存在类型的字段和方法注入到了另一个类型里，匿名字段上的方法晋升成为了外层类型的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结构体内嵌和自己在同一个包中的结构体时，可以彼此访问对方所有的字段和方法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="字段名冲突">字段名冲突&lt;/h3>
&lt;p>当 struct 嵌套时有字段名冲突，按以下规则：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>外层字段名会覆盖内层字段名，但是两者的内存空间都保留，这提供了一种重载字段或方法的方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果相同的名字在同一级别出现了两次，如果这个名字被程序使用了，将会引发一个异常，不使用则没关系。&lt;/p>
&lt;p>没有办法来解决这种问题引起的二义性，必须由程序员自己修正。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;span style="color:#a6e22e">A&lt;/span>; &lt;span style="color:#a6e22e">B&lt;/span>}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在字段名冲突时，如果依然需要使用被覆盖的字段，则可以使用 &lt;code>c.b.a&lt;/code> 这种方式。&lt;/p>
&lt;h2 id="method">method&lt;/h2>
&lt;p>Go 的方法是作用在接收者 &lt;code>receiver&lt;/code> 上的一个函数，接收者是某种类型的变量。因此方法是一种特殊类型的函数。&lt;/p>
&lt;p>接收者类型可以是几乎任何类型，不仅仅是结构体类型，任何类型都可以有方法，甚至可以是函数类型，可以是 int、bool、string 或数组的别名类型。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>接收者不能是一个接口类型，因为接口是一个抽象定义，但是方法却是具体实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接收者不能是一个原始的指针类型，但是它可以是任何其他允许类型的指针。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="定义-1">定义&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">recv&lt;/span> &lt;span style="color:#a6e22e">recv_type&lt;/span>) &lt;span style="color:#a6e22e">method&lt;/span>(&lt;span style="color:#a6e22e">param_list&lt;/span>) (&lt;span style="color:#a6e22e">return_list&lt;/span>) { &lt;span style="color:#f92672">...&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 &lt;code>recv&lt;/code> 是一个指针，Go 会自动解引用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">TwoInts&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">tn&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">TwoInts&lt;/span>) &lt;span style="color:#a6e22e">AddToParam&lt;/span>(&lt;span style="color:#a6e22e">param&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">tn&lt;/span>.&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">tn&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">param&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接收者">接收者&lt;/h3>
&lt;p>由于性能的原因，&lt;code>recv&lt;/code> 最常见的值是一个指向 &lt;code>recv_type&lt;/code> 的指针，特别是在 &lt;code>recv&lt;/code> 类型是结构体时。&lt;/p>
&lt;ul>
&lt;li>当接收者是值类型时，方法无法修改接收者本身的数据，因为是值传递。&lt;/li>
&lt;li>当接收者是指针类型时，方法内可以修改接收者本身的数据。&lt;/li>
&lt;/ul>
&lt;p>无论是值还是指针，通过接收者调用方法时，Go 为我们做了探测工作，方法都支持运行。&lt;/p>
&lt;h3 id="给包外-struct-定义方法">给包外 struct 定义方法&lt;/h3>
&lt;p>类型和作用在它上面定义的方法必须在同一个包里定义，这就是为什么不能在 int、float 或类似这些的类型上定义方法。试图在 int 类型上定义方法会编译失败。&lt;/p>
&lt;p>但是有一个间接的方式：可以先定义该类型的别名类型，然后再为别名类型定义方法。&lt;/p>
&lt;p>或者将它作为匿名类型嵌入在一个新的结构体中。当然方法只在这个别名类型上有效。&lt;/p>
&lt;h2 id="tag">Tag&lt;/h2>
&lt;h2 id="底层原理">底层原理&lt;/h2>
&lt;h3 id="内存布局">内存布局&lt;/h3>
&lt;p>Go 语言中，结构体和它所包含的数据在内存中是以连续块的形式存在的，即使结构体中嵌套有其他的结构体，这在性能上带来了很大的优势。&lt;/p>
&lt;p>下面的例子清晰地说明了这些情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Rect1&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;span style="color:#a6e22e">Min&lt;/span>, &lt;span style="color:#a6e22e">Max&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span> }
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Rect2&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;span style="color:#a6e22e">Min&lt;/span>, &lt;span style="color:#a6e22e">Max&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Point&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go interface 接口</title><link>https://wnanbei.github.io/post/go-interface-%E6%8E%A5%E5%8F%A3/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-interface-%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>interface 的一些特性：&lt;/p>
&lt;ul>
&lt;li>类型不需要显式声明它实现了某个接口：接口被隐式地实现。&lt;/li>
&lt;li>多个类型可以实现同一个接口。&lt;/li>
&lt;li>实现某个接口的类型，除了实现接口方法外，可以有其他的方法。&lt;/li>
&lt;li>一个类型可以实现多个接口。&lt;/li>
&lt;li>接口是动态类型，可以包含一个实例的引用，该实例的类型实现了此接口。&lt;/li>
&lt;li>即使接口在类型之后才定义，二者处于不同的包中，被单独编译，只要类型实现了接口中的方法，它就实现了此接口。&lt;/li>
&lt;li>接口只能访问接口内声明的方法。&lt;/li>
&lt;/ul>
&lt;h2 id="定义">定义&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Namer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Method1&lt;/span>(&lt;span style="color:#a6e22e">param_list&lt;/span>) &lt;span style="color:#a6e22e">return_type&lt;/span>
&lt;span style="color:#a6e22e">Method2&lt;/span>(&lt;span style="color:#a6e22e">param_list&lt;/span>) &lt;span style="color:#a6e22e">return_type&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>按照约定，只包含一个方法的接口的名字由方法名加 &lt;code>[e]r&lt;/code> 后缀组成，例如 &lt;code>Printer&lt;/code>、&lt;code>Reader&lt;/code>、&lt;code>Writer&lt;/code>、&lt;code>Logger&lt;/code>、&lt;code>Converter&lt;/code> 等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当后缀 &lt;code>er&lt;/code> 不合适时，比如 &lt;code>Recoverable&lt;/code>，此时接口名以 &lt;code>able&lt;/code> 结尾，或者以 &lt;code>I&lt;/code> 开头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go 语言中的接口都很简短，通常它们会包含 0 个、最多 3 个方法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="空接口">空接口&lt;/h3>
&lt;p>空接口 &lt;code>interface{}&lt;/code> 不包含任何方法，它对实现不做任何要求：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Any&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>空接口类型的变量可以赋任何类型的值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任何其他类型都实现了空接口，&lt;code>any&lt;/code> 或 &lt;code>Any&lt;/code> 是空接口一个很好的别名或缩写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个 &lt;code>interface {}&lt;/code> 变量在内存中占据两个字长：一个用来存储它包含的类型，另一个用来存储它包含的数据或者指向数据的指针。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="嵌套接口">嵌套接口&lt;/h3>
&lt;p>一个接口可以包含一个或多个其他的接口，这相当于直接将这些内嵌接口的方法列举在外层接口中一样。&lt;/p>
&lt;p>比如接口 &lt;code>File&lt;/code> 包含了 &lt;code>ReadWrite&lt;/code> 和 &lt;code>Lock&lt;/code> 的所有方法，它还额外有一个 &lt;code>Close()&lt;/code> 方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ReadWrite&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">Buffer&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">Buffer&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Lock&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;span style="color:#a6e22e">Unlock&lt;/span>()
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">File&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">ReadWrite&lt;/span>
&lt;span style="color:#a6e22e">Lock&lt;/span>
&lt;span style="color:#a6e22e">Close&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接口继承">接口继承&lt;/h3>
&lt;p>当一个 Struct 包含另一个 Struct（实现了一个或多个接口）的指针时，这个 Struct 就可以使用另一个 Struct 所有的接口方法。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Task&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Command&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 Struct 的工厂方法像这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewTask&lt;/span>(&lt;span style="color:#a6e22e">command&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Logger&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Task&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Task&lt;/span>{&lt;span style="color:#a6e22e">command&lt;/span>, &lt;span style="color:#a6e22e">logger&lt;/span>}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当 &lt;code>log.Logger&lt;/code> 实现了 &lt;code>Log()&lt;/code> 方法后，Task 的实例 task 就可以调用该方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">task&lt;/span>.&lt;span style="color:#a6e22e">Log&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Struct 可以通过继承多个接口来提供像 &lt;code>多重继承&lt;/code> 一样的特性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ReaderWriter&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现">实现&lt;/h2>
&lt;p>当一个类型实现了某一个接口所包含的所有方法时，则认为这个类型实现了这个接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Handler&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">HandlerFunc&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#a6e22e">HandlerFunc&lt;/span>) &lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {
&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>类型可以是函数，也可以是 Struct。&lt;/p>
&lt;h3 id="接收者问题">接收者问题&lt;/h3>
&lt;p>对于一个 Struct，作用于变量上的方法不区分变量到底是指针还是值。&lt;/p>
&lt;p>但当碰到接口类型值时，由于接口变量中存储的具体值是不可寻址的，所以有一定区别。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> len(&lt;span style="color:#a6e22e">l&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Append&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span> = append(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span>)
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Appender&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Append&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>)
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Lener&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>由于 Appender 接口的方法 Append 实现时使用的是 Struct 的指针，此时使用 &lt;code>var lst List&lt;/code> 方式声明的值类型，将不被认为是实现了 Appender 接口。&lt;/li>
&lt;li>此时必须使用 &lt;code>plst := new(List)&lt;/code> 方式，得到的指针类型，才会被认定为实现了 Appender 接口。&lt;/li>
&lt;li>而无论哪种类型，都会被认定为实现了 &lt;code>Lener&lt;/code> 接口，因为如果是指针类型，会自动解引用。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>指针方法可以通过指针调用。&lt;/li>
&lt;li>值方法可以通过值调用。&lt;/li>
&lt;li>接收者是值的方法可以通过指针调用，因为指针会首先被解引用。&lt;/li>
&lt;li>接收者是指针的方法不可以通过值调用，因为存储在接口中的值没有地址。&lt;/li>
&lt;/ul>
&lt;h2 id="断言">断言&lt;/h2>
&lt;p>一个接口类型的变量 &lt;code>varI&lt;/code> 中可以包含任何类型的值，必须有一种方式来检测它的动态类型，即运行时在变量中存储的值的实际类型。&lt;/p>
&lt;p>在执行过程中动态类型可能会有所不同，但是它总是可以分配给接口变量本身的类型。通常我们可以使用类型断言来测试在某个时刻 &lt;code>varI&lt;/code> 是否包含类型 &lt;code>T&lt;/code> 的值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">varI&lt;/span>.(&lt;span style="color:#a6e22e">T&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>varI&lt;/code> 必须是一个接口变量，否则编译器会报错。&lt;/li>
&lt;/ul>
&lt;p>类型断言失败后会导致异常退出，如果不希望退出，可以使用以下方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">varI&lt;/span>.(&lt;span style="color:#a6e22e">T&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果类型符合，&lt;code>varI&lt;/code> 是类型 &lt;code>T&lt;/code> 的值，&lt;code>ok&lt;/code> 会是 &lt;code>true&lt;/code>。&lt;/li>
&lt;li>否则 &lt;code>v&lt;/code> 是类型 &lt;code>T&lt;/code> 的零值，&lt;code>ok&lt;/code> 是 &lt;code>false&lt;/code>，没有运行时错误发生。&lt;/li>
&lt;/ul>
&lt;p>此方法也可以检测变量是否实现了某个接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Stringer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sv&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.(&lt;span style="color:#a6e22e">Stringer&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;v implements String(): %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">sv&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>())
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 包管理 Package</title><link>https://wnanbei.github.io/post/go-%E5%8C%85%E7%AE%A1%E7%90%86-package/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8C%85%E7%AE%A1%E7%90%86-package/</guid><description>&lt;p>Go 使用包结构 package 来定义模块、组织代码。&lt;/p>
&lt;h2 id="可见性">可见性&lt;/h2>
&lt;p>在 Go 语言中，包中的标识符（函数、变量、常量、struct 等），都遵守一个 Go 强制的命名规则：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>小写开头的变量不可以被导入到包外使用，为包内私有变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大写开头的变量可以被导入到包外使用，为共有变量。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Go 通过这种语言层面上的命名方式来决定外部能访问包内的哪些内容。&lt;/p>
&lt;p>而在同一个包内，在使用 &lt;code>import&lt;/code> 导入包之后定义或声明的变量、常量、类型，这些对象的作用域在本包范围内都是全局的。&lt;/p>
&lt;h2 id="import">import&lt;/h2>
&lt;h3 id="path">path&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果包名不是以 &lt;code>.&lt;/code> 或 &lt;code>/&lt;/code> 开头，如 &lt;code>&amp;quot;fmt&amp;quot;&lt;/code> 或者 &lt;code>&amp;quot;container/list&amp;quot;&lt;/code>，则 Go 会在全局文件进行查找。&lt;/li>
&lt;li>如果包名以 &lt;code>/&lt;/code> 开头（在 Windows 下也可以这样使用），则会在系统的绝对路径中查找。&lt;/li>
&lt;li>在 &lt;code>modules&lt;/code> 模式下，导入包的路径不再支持相对路径，只支持项目名开头的绝对路径。&lt;/li>
&lt;/ul>
&lt;h3 id="别名">别名&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#a6e22e">io&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="导入而不使用">导入而不使用&lt;/h3>
&lt;p>在 Go 语言中，导入了一个包之后，必须要使用它，不然就会在编译的时候报错，但我们有时候又需要这么做，那么我们可以在导入时使用空白标识符。&lt;/p>
&lt;p>这样的话，这个包就只会执行初始化 init 的内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#e6db74">&amp;#34;geometry/rectangle&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译">编译&lt;/h2>
&lt;h3 id="go-run">go run&lt;/h3>
&lt;p>&lt;code>go run&lt;/code> 会编译相应的有 main 执行入口的文件，并且执行编译之后的可执行文件。&lt;/p>
&lt;p>&lt;code>go run&lt;/code> 只能执行一个或多个文件，不能执行包。&lt;/p>
&lt;h3 id="go-build">go build&lt;/h3>
&lt;p>此命令用来编译我们的指定代码源文件或者包，以及它们的依赖包。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>build&lt;/code> 只编译有 main 包执行入口的包和文件，才会生成相应执行文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果只使用一个&lt;code>go build&lt;/code>，那么它会默认编译当前目录所对应的包。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">参数&lt;/th>
&lt;th style="text-align:left">参数描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">-o&lt;/td>
&lt;td style="text-align:left">指定输出文件的名称&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-i&lt;/td>
&lt;td style="text-align:left">安装那些编译目标依赖的且还未被安装的代码包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-a&lt;/td>
&lt;td style="text-align:left">强行对所有涉及到的代码包（包含标准库中的代码包）重新构建，即使它们已经是最新的了。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-n&lt;/td>
&lt;td style="text-align:left">打印编译期间所用到的其它命令，但是并不真正执行它们。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-p n&lt;/td>
&lt;td style="text-align:left">指定编译过程中执行各任务的并行数量（确切地说应该是并发数量）。在默认情况下，该数量等于CPU的逻辑核数。但是在 &lt;code>darwin/arm&lt;/code> 平台（即iPhone和iPad所用的平台）下，该数量默认是 &lt;code>1&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-race&lt;/td>
&lt;td style="text-align:left">开启竞态条件的检测。不过此标记目前仅在 &lt;code>linux/amd64&lt;/code>、&lt;code>freebsd/amd64&lt;/code>、&lt;code>darwin/amd64&lt;/code> 和 &lt;code>windows/amd64&lt;/code> 平台下受到支持。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-v&lt;/td>
&lt;td style="text-align:left">打印出那些被编译的代码包的名字。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-work&lt;/td>
&lt;td style="text-align:left">打印出编译时生成的临时工作目录的路径，并在编译结束时保留它。在默认情况下，编译结束时会删除该目录。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-x&lt;/td>
&lt;td style="text-align:left">打印编译期间所用到的其它命令。注意它与&lt;code>-n&lt;/code> 标记的区别。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="go-install">go install&lt;/h3>
&lt;p>&lt;code>go install&lt;/code> 与 &lt;code>go build&lt;/code> 命令大致相同，与 &lt;code>build&lt;/code> 主要有两点区别：&lt;/p>
&lt;ol>
&lt;li>生成的可执行文件会自动放到工作空间的 &lt;code>bin&lt;/code> 目录下。&lt;/li>
&lt;li>编译那些没有 main 包执行入口的包时，会生成相应的 &lt;code>.a&lt;/code> 文件，并放到工作空间的 &lt;code>pkg&lt;/code> 目录下。没有可执行 main 包的文件，也被称为库源码文件。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>go build&lt;/code> 能用的标签，&lt;code>go install&lt;/code> 基本都能用。&lt;/p>
&lt;h3 id="go-get">go get&lt;/h3>
&lt;p>&lt;code>go get&lt;/code> 命令可以接受所有可用于 &lt;code>go build&lt;/code> 命令和 &lt;code>go install&lt;/code> 命令的标记。这是因为 &lt;code>go get&lt;/code> 命令的内部步骤中完全包含了编译和安装这两个动作。&lt;/p>
&lt;p>另外，&lt;code>go get&lt;/code> 命令还有一些特有的参数，如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">参数名称&lt;/th>
&lt;th style="text-align:left">参数描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">-d&lt;/td>
&lt;td style="text-align:left">让命令程序只执行下载动作，而不执行安装动作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-f&lt;/td>
&lt;td style="text-align:left">仅在使用 &lt;code>-u&lt;/code> 标记时才有效。该标记会让命令程序忽略掉对已下载代码包的导入路径的检查。如果下载并安装的代码包所属的项目是你从别人那里Fork过来的，那么这样做就尤为重要了。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-fix&lt;/td>
&lt;td style="text-align:left">让命令程序在下载代码包后先执行修正动作，而后再进行编译和安装。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-insecure&lt;/td>
&lt;td style="text-align:left">允许命令程序使用非安全的 scheme（如HTTP）去下载指定的代码包。如果你用的代码仓库（如公司内部的Gitlab）没有 HTTPS 支持，可以添加此标记。请在确定安全的情况下使用它。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-t&lt;/td>
&lt;td style="text-align:left">让命令程序同时下载并安装指定的代码包中的测试源码文件中依赖的代码包。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-u&lt;/td>
&lt;td style="text-align:left">让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="go-mod">Go Mod&lt;/h2>
&lt;h3 id="用法">用法&lt;/h3>
&lt;p>初始化包管理，生成 &lt;code>go.mod&lt;/code> 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">mod&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span> &lt;span style="color:#a6e22e">yourProjectName&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>在 &lt;code>modules&lt;/code> 模式下，导入包的路径不再支持相对路径，只支持项目名开头的绝对路径。&lt;/strong>&lt;/p>
&lt;h3 id="命令">命令&lt;/h3>
&lt;p>&lt;code>go mod&lt;/code> 命令下有以下子命令&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>go mod download&lt;/td>
&lt;td>下载modules依赖的包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go mod edit&lt;/td>
&lt;td>编辑go.mod文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go mod graph&lt;/td>
&lt;td>打印模块的依赖图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go mod init&lt;/td>
&lt;td>在当前目录下初始化modules&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go mod tidy&lt;/td>
&lt;td>整理modules的依赖项，下载缺少的，删除不需要的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go mod verify&lt;/td>
&lt;td>验证依赖是否正确&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go mod why&lt;/td>
&lt;td>解释为什么需要依赖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go mod vendor&lt;/td>
&lt;td>将依赖项复制到vender目录下&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可以使用命令 &lt;code>go list -m -u all&lt;/code> 来检查可以升级的package。&lt;/p>
&lt;p>使用&lt;code>go get -u need-upgrade-package&lt;/code> 升级后会将新的依赖版本更新到 go.mod。&lt;/p>
&lt;p>也可以使用 &lt;code>go get -u&lt;/code> 升级所有依赖。&lt;/p>
&lt;h3 id="goproxy">GOPROXY&lt;/h3>
&lt;p>国内用于下载包的代理：&lt;/p>
&lt;ul>
&lt;li>&lt;code>http://goproxy.io&lt;/code>&lt;/li>
&lt;li>&lt;code>http://goproxy.cn&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Go 流程控制语句</title><link>https://wnanbei.github.io/post/go-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link><pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid><description>&lt;p>Go 的流程控制语句，包括 &lt;code>if&lt;/code>、&lt;code>switch&lt;/code>、&lt;code>for&lt;/code>。&lt;/p>
&lt;h2 id="if">if&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">condition1&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">condition2&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>取反，用 &lt;code>!&lt;/code> 来判断值的相反结果，如：&lt;code>if !bool1&lt;/code> 或者 &lt;code>if !(condition)&lt;/code>&lt;/p>
&lt;h3 id="初始化语句">初始化语句&lt;/h3>
&lt;p>if 可以包含一个初始化语句，如 &lt;code>:=&lt;/code> 给一个变量赋值，这种写法具有固定的格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">initialization&lt;/span>; &lt;span style="color:#a6e22e">condition&lt;/span> {}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">val&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">max&lt;/span> {}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>); &lt;span style="color:#a6e22e">value&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">max&lt;/span> {}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">file&lt;/span>.&lt;span style="color:#a6e22e">Chmod&lt;/span>(&lt;span style="color:#ae81ff">0664&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">readData&lt;/span>(); &lt;span style="color:#a6e22e">ok&lt;/span> {}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用 &lt;code>:=&lt;/code> 声明的变量的作用域只存在于 if 结构中，如果使用 &lt;code>if-else&lt;/code> 则在 &lt;code>else&lt;/code> 代码块中变量也会存在。&lt;/li>
&lt;li>如果变量在 if 结构之前就已经存在，那么在 if 结构中，该变量原来的值会被隐藏。&lt;/li>
&lt;/ul>
&lt;h2 id="switch">switch&lt;/h2>
&lt;p>switch 的 case 从上到下逐一进行判断，一旦满足条件，立即执行对应的分支并返回。其余分支不再做判断。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">var1&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val1&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val2&lt;/span>, &lt;span style="color:#a6e22e">val3&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fallthrough">fallthrough&lt;/h3>
&lt;p>在 &lt;code>case&lt;/code> 分支执行完毕后继续执行顺序为下一个的分支：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>: &lt;span style="color:#66d9ef">fallthrough&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;span style="color:#a6e22e">f&lt;/span>() &lt;span style="color:#75715e">// 当 i == 0 时函数也会被调用
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="条件判断">条件判断&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">condition1&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">condition2&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="初始化语句-1">初始化语句&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">initialization&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val1&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">val2&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="type-switch">type switch&lt;/h3>
&lt;p>用于判断一个接口变量的类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">areaIntf&lt;/span>.(&lt;span style="color:#66d9ef">type&lt;/span>) {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Square&lt;/span>:
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Type Square %T with value %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Circle&lt;/span>:
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Type Circle %T with value %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>:
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;nil value: nothing to check?\n&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Unexpected type %T\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>变量 &lt;code>t&lt;/code> 得到了 &lt;code>areaIntf&lt;/code> 的值和类型， 所有 &lt;code>case&lt;/code> 语句中列举的类型（&lt;code>nil&lt;/code> 除外）都必须实现对应的接口（在上例中即 &lt;code>Shaper&lt;/code>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以用 &lt;code>type-switch&lt;/code> 进行运行时类型分析，但是在 &lt;code>type-switch&lt;/code> 不允许有 &lt;code>fallthrough&lt;/code> 。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>如果仅仅是测试变量的类型，不需要它的值，那么就可以不需要赋值语句，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">areaIntf&lt;/span>.(&lt;span style="color:#66d9ef">type&lt;/span>) {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Square&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Circle&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="for">for&lt;/h2>
&lt;h3 id="计数器循环">计数器循环&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// for 初始化语句; 条件语句; 修饰语句 {}
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">5&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;This is the %d iteration\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>注意，不要在循环体内修改计数器&lt;/li>
&lt;/ul>
&lt;p>在循环中可以同时使用多个计数器，这得益于 Go 语言具有的平行赋值的特性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">j&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> {}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="条件判断循环">条件判断循环&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// for 条件语句 {}
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">i&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;The variable i is now: %d\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="无限循环">无限循环&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="迭代循环">迭代循环&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">ix&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">coll&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果 &lt;code>coll&lt;/code> 为数组，则 ix 为索引位置，val 为值。&lt;/li>
&lt;li>如果 &lt;code>coll&lt;/code> 为字典，则 ix 为 key，val 为 value。&lt;/li>
&lt;/ul>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>&lt;code>val&lt;/code> 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值。&lt;/li>
&lt;li>如果 &lt;code>val&lt;/code> 为指针，则会产生指针的拷贝，依旧可以修改集合中的原值。&lt;/li>
&lt;/ul>
&lt;h3 id="break-与-continue">break 与 continue&lt;/h3>
&lt;p>&lt;code>break&lt;/code> 退出当前整个循环层。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">:=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&amp;lt;&lt;span style="color:#ae81ff">3&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">:=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&amp;lt;&lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span>&amp;gt;&lt;span style="color:#ae81ff">5&lt;/span> {
&lt;span style="color:#66d9ef">break&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>continue&lt;/code> 推出本次循环，直接进入下一次循环，continue 只能被用于 for 循环中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> {
&lt;span style="color:#66d9ef">continue&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go net/http client 客户端</title><link>https://wnanbei.github.io/post/go-net/http-client-%E5%AE%A2%E6%88%B7%E7%AB%AF/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-net/http-client-%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid><description>&lt;p>Go 中的&lt;code>net&lt;/code>包封装了大部分网络相关的功能，我们基本不需要借助其他库就能实现我们的爬虫需求。&lt;/p>
&lt;h2 id="简单请求">简单请求&lt;/h2>
&lt;p>其中最为常用的是 &lt;code>http&lt;/code> 和 &lt;code>url&lt;/code>，使用前可以根据我们的需要进行导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net/url&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>http&lt;/code>提供了一些非常方便的接口，可以实现最简单的请求，例如Get、Post、Head：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://example.com/&amp;#34;&lt;/span>)
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Post&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://example.com/upload&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;image/jpeg&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">buf&lt;/span>)
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">PostForm&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://example.com/form&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Values&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;key&amp;#34;&lt;/span>: {&lt;span style="color:#e6db74">&amp;#34;Value&amp;#34;&lt;/span>}, &lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>: {&lt;span style="color:#e6db74">&amp;#34;123&amp;#34;&lt;/span>}})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，我们非常简单的就发起了请求并获得了响应，这里需要注意一点的是，获得的响应body需要我们手动关闭：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://example.com/&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#75715e">// 处理异常
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>() &lt;span style="color:#75715e">// 函数结束时关闭Body
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>) &lt;span style="color:#75715e">// 读取Body
&lt;/span>&lt;span style="color:#75715e">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样的请求方式是非常方便的，但是当我们需要定制我们请求的其他参数时，就必须要使用其他组件了。&lt;/p>
&lt;h2 id="client">Client&lt;/h2>
&lt;p>&lt;code>Client&lt;/code>是&lt;code>http&lt;/code>包内部发起请求的组件，使用它，我们才可以去控制请求的超时、重定向和其他的设置。以下是Client的定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Client&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Transport&lt;/span> &lt;span style="color:#a6e22e">RoundTripper&lt;/span>
&lt;span style="color:#a6e22e">CheckRedirect&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Request&lt;/span>, &lt;span style="color:#a6e22e">via&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Request&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#a6e22e">Jar&lt;/span> &lt;span style="color:#a6e22e">CookieJar&lt;/span>
&lt;span style="color:#a6e22e">Timeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span> &lt;span style="color:#75715e">// Go 1.3
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先是生成Client对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Client也有一些简便的请求方法，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://example.com&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但这种方法与直接使用&lt;code>http.Get&lt;/code>没多大差别，我们需要使用另一个方法来定制请求的Header、请求体、证书验证等参数，这就是&lt;code>Request&lt;/code>和&lt;code>Do&lt;/code>。&lt;/p>
&lt;h3 id="设置超时">设置超时&lt;/h3>
&lt;p>这是一张说明Client超时的控制范围的图：&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://wnanbei.github.io/assets/client-timeout.png" >
&lt;img src="https://wnanbei.github.io/assets/client-timeout.png"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>这其中，设置起来最方便的是&lt;code>http.Client.Timeout&lt;/code>，可以在创建Client时通过字段设置，其计算的范围包括连接(Dial)到读完response body为止。&lt;/p>
&lt;p>&lt;code>http.Client&lt;/code>会自动跟随重定向，重定向时间也会记入&lt;code>http.Client.Timeout&lt;/code>，这点一定要注意。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;span style="color:#a6e22e">Timeout&lt;/span>: &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有一些更细粒度的超时控制：&lt;/p>
&lt;ul>
&lt;li>&lt;code>net.Dialer.Timeout&lt;/code> 限制建立TCP连接的时间&lt;/li>
&lt;li>&lt;code>http.Transport.TLSHandshakeTimeout&lt;/code> 限制 TLS握手的时间&lt;/li>
&lt;li>&lt;code>http.Transport.ResponseHeaderTimeout&lt;/code> 限制读取response header的时间&lt;/li>
&lt;li>&lt;code>http.Transport.ExpectContinueTimeout&lt;/code> 限制client在发送包含 &lt;code>Expect: 100-continue&lt;/code>的header到收到继续发送body的response之间的时间等待。&lt;/li>
&lt;/ul>
&lt;p>如果需要使用这些超时，需要到&lt;code>Transport&lt;/code>中去设置，方法如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;span style="color:#a6e22e">Transport&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Transport&lt;/span>{
&lt;span style="color:#a6e22e">DialContext&lt;/span>: (&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Dialer&lt;/span>{
&lt;span style="color:#a6e22e">Timeout&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">KeepAlive&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
}).&lt;span style="color:#a6e22e">DialContext&lt;/span>,
&lt;span style="color:#a6e22e">TLSHandshakeTimeout&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">ResponseHeaderTimeout&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">ExpectContinueTimeout&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
},
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到这其中没有单独控制&lt;code>Do&lt;/code>方法超时时间的设置，如果需要的话可以使用&lt;code>context&lt;/code>自行实现。&lt;/p>
&lt;h3 id="控制重定向">控制重定向&lt;/h3>
&lt;p>在Client的字段中，有一个&lt;code>CheckRedirect&lt;/code>，此字段就是用来控制重定向的函数，如果没有定义此字段的话，将会使用默认的&lt;code>defaultCheckRedirect&lt;/code>方法。&lt;/p>
&lt;p>默认的转发策略是最多转发10次。&lt;/p>
&lt;p>在转发的过程中，某一些包含安全信息的Header，比如&lt;code>Authorization&lt;/code>、&lt;code>WWW-Authenticate&lt;/code>、&lt;code>Cookie&lt;/code>等，如果转发是跨域的，那么这些Header不会复制到新的请求中。&lt;/p>
&lt;p>&lt;code>http&lt;/code>的重定向判断会默认处理以下状态码的请求：&lt;/p>
&lt;ul>
&lt;li>301 (Moved Permanently)&lt;/li>
&lt;li>302 (Found)&lt;/li>
&lt;li>303 (See Other)&lt;/li>
&lt;li>307 (Temporary Redirect)&lt;/li>
&lt;li>308 (Permanent Redirect)&lt;/li>
&lt;/ul>
&lt;p>301、302和303请求将会改用Get访问新的请求，而307和308会使用原有的请求方式。&lt;/p>
&lt;p>那么，我们如何去控制重定向的次数，甚至是禁止重定向呢？这里其实就需要我们自己去实现一个&lt;code>CheckRedirect&lt;/code>函数了，首先我们来看看默认的&lt;code>defaultCheckRedirect&lt;/code>方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">defaultCheckRedirect&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Request&lt;/span>, &lt;span style="color:#a6e22e">via&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Request&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">via&lt;/span>) &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;stopped after 10 redirects&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个参数&lt;code>req&lt;/code>是即将转发的request，第二个参数 &lt;code>via&lt;/code>是已经请求过的requests。可以看到其中的逻辑是判断请求过的request数量，大于等于10的时候返回一个&lt;code>error&lt;/code>，这也说明默认的最大重定向次数为10次，当此函数返回&lt;code>error&lt;/code>时，即是重定向结束的时候。&lt;/p>
&lt;p>所以如果需要设置重定向次数，那么复制一份这个函数，修改函数名字和其中if判断的数字，然后在生成Client时设定到Client即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;span style="color:#a6e22e">CheckRedirect&lt;/span>: &lt;span style="color:#a6e22e">yourCheckRedirect&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{}
&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">CheckRedirect&lt;/span> = &lt;span style="color:#a6e22e">yourCheckRedirect&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>禁止重定向则可以把判断数字修改为0。最好相应地修改errors中提示的信息。&lt;/p>
&lt;h3 id="cookiejar管理">CookieJar管理&lt;/h3>
&lt;p>可以看到Client结构体中还有一个&lt;code>Jar&lt;/code>字段，类型为&lt;code>CookieJar&lt;/code>，这是Client用来管理Cookie的对象。&lt;/p>
&lt;p>如果在生成Client时，没有给这个字段赋值，使其为&lt;code>nil&lt;/code>的话，那么之后Client发起的请求将只会带上Request对象中指定的Cookie，请求响应中由服务器返回的Cookie也不会被保存。所以如果需要自动管理Cookie的话，我们还需要生成并设定一个CookieJar对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cookiejar&lt;/span>.&lt;span style="color:#a6e22e">Options&lt;/span>{
&lt;span style="color:#a6e22e">PublicSuffixList&lt;/span>: &lt;span style="color:#a6e22e">publicsuffix&lt;/span>.&lt;span style="color:#a6e22e">List&lt;/span>
}
&lt;span style="color:#a6e22e">jar&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cookiejar&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>)
&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;span style="color:#a6e22e">Jar&lt;/span>: &lt;span style="color:#a6e22e">jar&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的&lt;code>publicsuffix.List&lt;/code>是一个域的公共后缀列表，是一个可选的选项，设置为&lt;code>nil&lt;/code>代表不启用。但是不启用的情况下会使Cookie变得不安全：意味着foo.com的HTTP服务器可以为bar.com设置cookie。所以一般来说最好启用。&lt;/p>
&lt;p>如果嫌麻烦不想启用&lt;code>PublicSuffixList&lt;/code>，可以将其设置为&lt;code>nil&lt;/code>，如下即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">jar&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cookiejar&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;span style="color:#a6e22e">Jar&lt;/span>: &lt;span style="color:#a6e22e">jar&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而&lt;code>publicsuffix.List&lt;/code>的实现位于golang.org/x/net/publicsuffix，需要额外下载，使用的时候也需要导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;golang.org/x/net/publicsuffix&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="request">Request&lt;/h2>
&lt;p>这是Go源码中Request定义的字段，可以看到非常的多，有兴趣的可以去源码或者官方文档看有注释的版本，本文只介绍一些比较重要的字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Request&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Method&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">URL&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>
&lt;span style="color:#a6e22e">Proto&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// &amp;#34;HTTP/1.0&amp;#34;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ProtoMajor&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ProtoMinor&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 0
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span>
&lt;span style="color:#a6e22e">Body&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadCloser&lt;/span>
&lt;span style="color:#a6e22e">GetBody&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() (&lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadCloser&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#a6e22e">ContentLength&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;span style="color:#a6e22e">TransferEncoding&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Close&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">Host&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Form&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Values&lt;/span>
&lt;span style="color:#a6e22e">PostForm&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Values&lt;/span>
&lt;span style="color:#a6e22e">MultipartForm&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">multipart&lt;/span>.&lt;span style="color:#a6e22e">Form&lt;/span>
&lt;span style="color:#a6e22e">Trailer&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span>
&lt;span style="color:#a6e22e">RemoteAddr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">RequestURI&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">TLS&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">tls&lt;/span>.&lt;span style="color:#a6e22e">ConnectionState&lt;/span>
&lt;span style="color:#a6e22e">Cancel&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#a6e22e">Response&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Response&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这里不推荐直接生成Request，而应该使用http提供的&lt;code>NewRequest&lt;/code>方法来生成Request，此方法中做了一些生成Request的默认设置，以下是&lt;code>NewRequest&lt;/code>的函数签名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#a6e22e">method&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Request&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数中&lt;code>method&lt;/code>和&lt;code>url&lt;/code>两个是必备参数，而&lt;code>body&lt;/code>参数，在使用没有body的请求方法时，传入&lt;code>nil&lt;/code>即可。&lt;/p>
&lt;p>配置好Request之后，使用Client对象的&lt;code>Do&lt;/code>方法，就可以将Request发送出去，以下是示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;https://www.baidu.com&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="method">Method&lt;/h3>
&lt;p>请求方法，必备的参数，如果为空字符则表示Get请求。&lt;/p>
&lt;p>注：Go的HTTP客户端不支持&lt;code>CONNECT&lt;/code>请求方法。&lt;/p>
&lt;h3 id="url">URL&lt;/h3>
&lt;p>一个被解析过的url结构体。&lt;/p>
&lt;h3 id="proto">Proto&lt;/h3>
&lt;p>HTTP协议版本。&lt;/p>
&lt;p>在Go中，HTTP请求会默认使用&lt;code>HTTP1.1&lt;/code>，而HTTPS请求会默认首先使用&lt;code>HTTP2.0&lt;/code>，如果目标服务器不支持，握手失败后才会改用&lt;code>HTTP1.1&lt;/code>。&lt;/p>
&lt;p>如果希望强制使用&lt;code>HTTP2.0&lt;/code>的协议，那么需要使用&lt;code>golang.org/x/net/http2&lt;/code>这个包所提供的功能。&lt;/p>
&lt;h3 id="发起post请求">发起Post请求&lt;/h3>
&lt;p>如果要使用Request发起Post请求，提交表单的话，可以用到它的&lt;code>PostForm&lt;/code>字段，这是一个类型为&lt;code>url.Values&lt;/code>的字段，以下为示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Post&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;https://www.baidu.com&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">PostForm&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;key&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你Post提交的不是表单数据，那么你需要将其封装成&lt;code>io.Reader&lt;/code>类型，并在&lt;code>NewRequest&lt;/code>函数中传递进去。&lt;/p>
&lt;h3 id="设置header">设置Header&lt;/h3>
&lt;p>Header的类型是&lt;code>http.Header&lt;/code>，其中包含着之前请求中返回的header和client发送的header。&lt;/p>
&lt;p>可以使用这种方式设置Header：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Get&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;https://www.baidu.com&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;key&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Header还有一些&lt;code>Set&lt;/code>、&lt;code>Del&lt;/code>等方法可以使用。&lt;/p>
&lt;h3 id="添加cookie">添加Cookie&lt;/h3>
&lt;p>前文我们已经介绍了如何在Client中启用一直使用的CookieJar，使用它可以自动管理获得的Cookie。&lt;/p>
&lt;p>但很多时候我们也需要给特定的请求手动设置Cookie，这个时候就可以使用Request对象的&lt;code>AddCookie&lt;/code>方法，这是其函数签名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Request&lt;/span>) &lt;span style="color:#a6e22e">AddCookie&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Cookie&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>要注意的是，其传入的参数是Cookie类型，，以下是此类型包含的属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Cookie&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Domain&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Expires&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#a6e22e">RawExpires&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">MaxAge&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">Secure&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">HttpOnly&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">Raw&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Unparsed&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中只有&lt;code>Name&lt;/code>和&lt;code>Value&lt;/code>是必须的，所以以下是添加Cookie的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Cookie&lt;/span>{
&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;key&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>,
}
&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">AddCookie&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="transport">Transport&lt;/h2>
&lt;p>&lt;code>Transport&lt;/code>是&lt;code>Client&lt;/code>中的一个类型，用于控制传输过程，是Client实际发起请求的底层实现。如果没有给这个字段初始化相应的值，那么将会使用默认的&lt;code>DefaultTransport&lt;/code>。&lt;/p>
&lt;p>Transport承担起了Client中连接池的功能，它会将建立的连接缓存下来，这可能会在访问大量不同网站时，留下太多打开的连接，这可以使用Transport中的方法进行关闭。&lt;/p>
&lt;p>首先来看一下&lt;code>Transport&lt;/code>的定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Transport&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Proxy&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Request&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#a6e22e">DialContext&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">network&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Conn&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#75715e">// Go 1.7
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Dial&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">network&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Conn&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#a6e22e">DialTLS&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">network&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Conn&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#75715e">// Go 1.4
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">TLSClientConfig&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">tls&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>
&lt;span style="color:#a6e22e">TLSHandshakeTimeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span> &lt;span style="color:#75715e">// Go 1.3
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">DisableKeepAlives&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">DisableCompression&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">MaxIdleConns&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// Go 1.7
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">MaxIdleConnsPerHost&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">MaxConnsPerHost&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// Go 1.11
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">IdleConnTimeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span> &lt;span style="color:#75715e">// Go 1.7
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ResponseHeaderTimeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span> &lt;span style="color:#75715e">// Go 1.1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ExpectContinueTimeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span> &lt;span style="color:#75715e">// Go 1.6
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">TLSNextProto&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">authority&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">tls&lt;/span>.&lt;span style="color:#a6e22e">Conn&lt;/span>) &lt;span style="color:#a6e22e">RoundTripper&lt;/span> &lt;span style="color:#75715e">// Go 1.6
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ProxyConnectHeader&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#75715e">// Go 1.8
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">MaxResponseHeaderBytes&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#75715e">// Go 1.7
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于&lt;code>Transport&lt;/code>是&lt;code>Client&lt;/code>内部请求的实际发起者，所以内容会比较多，1.6之后的版本也添加了许多新的字段，这里我们来讲解常见的一些字段。&lt;/p>
&lt;h3 id="拨号">拨号&lt;/h3>
&lt;p>由于Client中设置的Timeout范围比较宽，而在生产环境中我们可能需要更为精细的超时控制，在&lt;code>Dial&lt;/code>拨号中可以设置几个超时时间。&lt;/p>
&lt;p>在较新的版本中，&lt;code>Dial&lt;/code>这个字段已经不再被推荐使用，取而代之的是&lt;code>DialContext&lt;/code>，设置这个字段，需要借助于&lt;code>net.Dialer&lt;/code>，以下是其定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Dialer&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Timeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;span style="color:#a6e22e">Deadline&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#a6e22e">LocalAddr&lt;/span> &lt;span style="color:#a6e22e">Addr&lt;/span>
&lt;span style="color:#a6e22e">DualStack&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#a6e22e">FallbackDelay&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;span style="color:#a6e22e">KeepAlive&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;span style="color:#a6e22e">Resolver&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Resolver&lt;/span>
&lt;span style="color:#a6e22e">Cancel&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#a6e22e">Control&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">network&lt;/span>, &lt;span style="color:#a6e22e">address&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">RawConn&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这其中需要我们设置的并不多，主要是Timeout和KeepAlive。Timeout是Dial这个过程的超时时间，而KeepAlive是连接池中连接的超时时间，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">trans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Transport&lt;/span>{
&lt;span style="color:#a6e22e">DialContext&lt;/span>: (&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Dialer&lt;/span>{
&lt;span style="color:#a6e22e">Timeout&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">KeepAlive&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
}).&lt;span style="color:#a6e22e">DialContext&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="设置代理">设置代理&lt;/h3>
&lt;p>Transport第一个&lt;code>Proxy&lt;/code>字段是用来设置代理，支持HTTP、HTTPS、SOCKS5三种代理方式，首先我们来看看如何设置HTTP和HTTPS代理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;net/url&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">proxyURL&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://127.0.0.1:1080&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">trans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Transport&lt;/span>{
&lt;span style="color:#a6e22e">Proxy&lt;/span>: &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ProxyURL&lt;/span>(&lt;span style="color:#a6e22e">proxyURL&lt;/span>),
}
&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;span style="color:#a6e22e">Transport&lt;/span>: &lt;span style="color:#a6e22e">trans&lt;/span>,
}
&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://www.google.com&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置SOCKS5代理则需要借助&lt;code>golang.org/x/net/proxy&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;net/url&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;golang.org/x/net/proxy&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">dialer&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">proxy&lt;/span>.&lt;span style="color:#a6e22e">SOCKS5&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:8080&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">proxy&lt;/span>.&lt;span style="color:#a6e22e">Auth&lt;/span>{&lt;span style="color:#a6e22e">User&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Password&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>},
&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Dialer&lt;/span> {
&lt;span style="color:#a6e22e">Timeout&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
&lt;span style="color:#a6e22e">KeepAlive&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>,
},
)
&lt;span style="color:#a6e22e">trans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Transport&lt;/span>{
&lt;span style="color:#a6e22e">DialContext&lt;/span>: &lt;span style="color:#a6e22e">dialer&lt;/span>.&lt;span style="color:#a6e22e">DialContext&lt;/span>
}
&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;span style="color:#a6e22e">Transport&lt;/span>: &lt;span style="color:#a6e22e">trans&lt;/span>,
}
&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://www.google.com&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的&lt;code>proxy.SOCKS5&lt;/code>函数将会返回一个&lt;code>Dialer&lt;/code>对象，其传入的参数分别为协议、IP端口、账号密码、&lt;code>Dialer&lt;/code>，如果代理不需要账号密码验证的话，第三个字段可以设置为&lt;code>nil&lt;/code>。&lt;/p>
&lt;h3 id="连接控制">连接控制&lt;/h3>
&lt;p>众所周知，HTTP1.0协议使用的是短连接，而HTTP1.1默认使用的是长连接，使用长连接则可以复用连接，减少建立连接的开销。&lt;/p>
&lt;p>&lt;code>Transport&lt;/code>中实现了连接池的功能，可以将连接保存下来以便下次访问此域名，其中也对连接的数量做出了一定的限制。&lt;/p>
&lt;p>&lt;code>DisableKeepAlives&lt;/code>这个字段可以用来关闭长连接，默认值为false，如果有特殊的需求，需要使用短连接，可以设置此字段为true：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">trans&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Transport&lt;/span>{
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#a6e22e">DisableKeepAlives&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除此之外，还可以控制连接的数量和保持时间：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>MaxConnsPerHost int&lt;/code> - 每个域名下最大连接数量，包括正在拨号的、活跃的、空闲的的连接。&lt;/p>
&lt;p>值为0表示不限制数量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>MaxIdleConns int&lt;/code> - 空闲连接的最大数量。&lt;/p>
&lt;p>DefaultTransport中的默认值为100，在需要发起大量连接时偏小，可以根据需求自行设定。&lt;/p>
&lt;p>值为0表示不限制数量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>MaxIdleConnsPerHost int&lt;/code> - 每个域名下空闲连接的最大数量。&lt;/p>
&lt;p>值为0则会使用默认的数量，每个域名下只能有两个空闲连接。在对单个网站发起大量连接时，两个连接可能会不够，可以酌情增加此数值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>IdleConnTimeout time.Duration&lt;/code> - 空闲连接的超时时间，从每一次空闲开始算。DefaultTransport中的默认值为90秒。&lt;/p>
&lt;p>值为0表示不限制。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>由于Transport负担起了连接池的功能，所以在并发使用时，最好将Transport与Client一起复用，不然可能会造成发起过量的长连接，浪费系统资源。&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;h3 id="设置url参数">设置url参数&lt;/h3>
&lt;p>在Go的请求方式中，没有给我们提供可以直接设置url参数的方法，所以需要我们自己在url地址中进行拼接。&lt;/p>
&lt;p>&lt;code>url&lt;/code>包中提供了一个&lt;code>url.Values&lt;/code>类型，其本质的类型为：&lt;code>map[string][]string&lt;/code>，可以让我们拼接参数更加简单，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">URL&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://httpbin.org/get&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">params&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Values&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;key1&amp;#34;&lt;/span>: {&lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>},
&lt;span style="color:#e6db74">&amp;#34;key2&amp;#34;&lt;/span>: {&lt;span style="color:#e6db74">&amp;#34;value2&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;value3&amp;#34;&lt;/span>},
}
&lt;span style="color:#a6e22e">URL&lt;/span> = &lt;span style="color:#a6e22e">URL&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;amp;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>()
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">URL&lt;/span>)
&lt;span style="color:#75715e">// 输出为：http://httpbin.org/get&amp;amp;key1=value&amp;amp;key2=value2&amp;amp;key2=value3
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="示例">示例&lt;/h2>
&lt;p>以下是发起Get请求的一个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 生成client客户端
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>{}
&lt;span style="color:#75715e">// 生成Request对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Get&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;http://httpbin.org/get&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// 添加Header
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;User-Agent&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.108 Safari/537.36&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// 发起请求
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// 设定关闭响应体
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;span style="color:#75715e">// 读取响应体
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(string(&lt;span style="color:#a6e22e">body&lt;/span>))&amp;lt;&lt;span style="color:#a6e22e">https&lt;/span>:&lt;span style="color:#75715e">//colobu.com/2016/07/01/the-complete-guide-to-golang-net-http-timeouts/&amp;gt;)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 函数</title><link>https://wnanbei.github.io/post/go-%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%87%BD%E6%95%B0/</guid><description>&lt;p>除了 &lt;code>main()&lt;/code>、&lt;code>init()&lt;/code> 函数外，其它所有类型的函数都可以有参数与返回值。&lt;/p>
&lt;p>函数参数、返回值以及它们的类型被统称为函数签名。&lt;/p>
&lt;h2 id="参数">参数&lt;/h2>
&lt;h3 id="多个参数">多个参数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">num1&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">num2&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">num1&lt;/span>, &lt;span style="color:#a6e22e">num2&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="可变参数">可变参数&lt;/h3>
&lt;p>使用 &lt;code>...&lt;/code> 声明可变参数。&lt;/p>
&lt;ul>
&lt;li>可变参数只能放在参数列表的最末尾:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">nums&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>){
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>声明后，可以在调用函数时传入任意数量的参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">89&lt;/span>, &lt;span style="color:#ae81ff">89&lt;/span>, &lt;span style="color:#ae81ff">90&lt;/span>, &lt;span style="color:#ae81ff">95&lt;/span>)
&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">45&lt;/span>, &lt;span style="color:#ae81ff">56&lt;/span>, &lt;span style="color:#ae81ff">67&lt;/span>, &lt;span style="color:#ae81ff">45&lt;/span>, &lt;span style="color:#ae81ff">90&lt;/span>, &lt;span style="color:#ae81ff">109&lt;/span>)
&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">87&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在函数中接收的&lt;code>nums&lt;/code>被接收为一个切片。&lt;/p>
&lt;p>如果希望将一个切片作为可变参数传入函数，则需要在传参的时候加上 &lt;code>...&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">nums&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">89&lt;/span>, &lt;span style="color:#ae81ff">90&lt;/span>, &lt;span style="color:#ae81ff">95&lt;/span>}
&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#ae81ff">89&lt;/span>, &lt;span style="color:#a6e22e">nums&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="返回值">返回值&lt;/h2>
&lt;h3 id="命名返回值">命名返回值&lt;/h3>
&lt;p>在声明函数时可以为其返回值命名。&lt;/p>
&lt;p>命名了返回值后，可以认为这些值在函数第一行就已被声明为变量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">rectProps&lt;/span>(&lt;span style="color:#a6e22e">length&lt;/span>, &lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>)(&lt;span style="color:#a6e22e">area&lt;/span>, &lt;span style="color:#a6e22e">perimeter&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>) {
&lt;span style="color:#a6e22e">area&lt;/span> = &lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>
&lt;span style="color:#a6e22e">perimeter&lt;/span> = (&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#75715e">// 不需要明确指定返回值，默认返回 area, perimeter 的值
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在函数中，&lt;code>perimeter&lt;/code> 不需要再次声明了。而且在 return 返回时，不再需要指定返回哪些变量，函数将自动把命名的返回值返回。&lt;/p>
&lt;h2 id="匿名函数">匿名函数&lt;/h2>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样的函数不能够独立存在，编译器会返回错误：&lt;code>non-declaration statement outside function body&lt;/code>）&lt;/p>
&lt;p>但可以被赋值于某个变量，即保存函数的地址到变量中:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">fplus&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> }
&lt;span style="color:#a6e22e">fplus&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者也可以直接对匿名函数进行调用:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> } (&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go 语言规范</title><link>https://wnanbei.github.io/post/go-%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83/</guid><description>&lt;p>Go 语言规范指导性原则：&lt;/p>
&lt;ol>
&lt;li>简单性&lt;/li>
&lt;li>可读性&lt;/li>
&lt;li>生产力&lt;/li>
&lt;/ol>
&lt;h2 id="命名">命名&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>概括性词汇&lt;/strong>&lt;/th>
&lt;th>&lt;strong>精确清晰的词汇&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>send&lt;/td>
&lt;td>deliver, dispatch, announce, distribute, route&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>find&lt;/td>
&lt;td>search, extract, locate, recover&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>start&lt;/td>
&lt;td>launch, create, begin, open&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make&lt;/td>
&lt;td>create, set up, build, generate, compose, add, new&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="项目名">项目名&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>项目名(仓库名）的命名可以使用字母、数字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多个单词建议采用中划线分隔，目前github中大多数项目都是使用用中划线。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不建议采用驼峰式分隔，不要使用下划线( kubernetes 中的组件名称不允许使用下划线)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>正确:&lt;/p>
&lt;blockquote>
&lt;p>user、user-api、user-service,product、product-search、redis-go,druid、zeus、kubernetes.&lt;/p>
&lt;/blockquote>
&lt;p>错误:&lt;/p>
&lt;blockquote>
&lt;p>user_api、Product&lt;/p>
&lt;/blockquote>
&lt;h3 id="包与导入路径">包与导入路径&lt;/h3>
&lt;ul>
&lt;li>包名应和目录名一致&lt;/li>
&lt;li>包路径应该尽可能简洁&lt;/li>
&lt;li>避免在包路径中使用任何大写字母&lt;/li>
&lt;/ul>
&lt;h3 id="常量">常量&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>全大写，使用 &lt;code>_&lt;/code> 分隔&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果是枚举类型的常量，需要先创建相应类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Scheme&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">HTTP&lt;/span> &lt;span style="color:#a6e22e">Scheme&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">HTTPS&lt;/span> &lt;span style="color:#a6e22e">Scheme&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="变量">变量&lt;/h3>
&lt;p>指导原则：&lt;/p>
&lt;ol>
&lt;li>勿在变量名称中包含类型名称。&lt;/li>
&lt;li>常量应该描述它们持有的值，而不是该如何使用。&lt;/li>
&lt;li>循环和分支使用单字母变量，参数和返回值使用单个词，函数和包级别声明使用多个单词。&lt;/li>
&lt;li>方法、接口和包使用单个词。&lt;/li>
&lt;li>包的名称是调用者用来引用名称的一部分，要好好利用这一点。&lt;/li>
&lt;/ol>
&lt;h4 id="声明样式">声明样式&lt;/h4>
&lt;p>使用一致的声明样式：&lt;/p>
&lt;ul>
&lt;li>声明变量但没有初始化时，使用 &lt;code>var&lt;/code>。&lt;/li>
&lt;li>在声明和初始化时，使用 &lt;code>:=&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h4 id="长度">长度&lt;/h4>
&lt;blockquote>
&lt;p>The greater the distance between a name’s declaration and its uses, the longer the name should be.&lt;/p>
&lt;p>名字的声明与其使用之间的距离越大，名字应该越长。&lt;/p>
&lt;p>​ — Andrew Gerrand&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>声明和使用的距离越短，变量命名可以越短。如 &lt;code>i&lt;/code> 代替 &lt;code>index&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>长变量名称需要证明自己的合理性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="参数">参数&lt;/h3>
&lt;p>参数默认具有文档的功能。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当参数类型具有描述性的时候，参数名就应该尽可能短小：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">AfterFunc&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>()) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Timer&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Escape&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>当参数类型比较模糊的时候，参数名就应当具有文档的功能：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Unix&lt;/span>(&lt;span style="color:#a6e22e">sec&lt;/span>, &lt;span style="color:#a6e22e">nsec&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>) &lt;span style="color:#a6e22e">Time&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">HasPrefix&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">prefix&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="返回值">返回值&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>在外部可见的函数中，返回值的名称应当可以作为文档参考。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Copy&lt;/span>(&lt;span style="color:#a6e22e">dst&lt;/span> &lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">src&lt;/span> &lt;span style="color:#a6e22e">Reader&lt;/span>) (&lt;span style="color:#a6e22e">written&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ScanBytes&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">atEOF&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) (&lt;span style="color:#a6e22e">advance&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">token&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>,
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="receiver">Receiver&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>方法接收者的名字在同一类型的不同方法中应该保持统一。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于方法接收者在函数内部经常出现，因此它经常采用一两个字母来标识方法接收者的类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Buffer&lt;/span>) &lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">sh&lt;/span> &lt;span style="color:#a6e22e">serverHandler&lt;/span>) &lt;span style="color:#a6e22e">ServeHTTP&lt;/span>(&lt;span style="color:#a6e22e">rw&lt;/span> &lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Request&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span>) &lt;span style="color:#a6e22e">Size&lt;/span>() &lt;span style="color:#a6e22e">Point&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="接口类型">接口类型&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>只含有一个方法的接口类型通常以函数名加上&lt;code>er&lt;/code>后缀作为名字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Reader&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>有时候可能导致蹩脚的英文，但别管他，能看懂就好&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Execer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>有时候可以适当调整一下英文单词的顺序，增加可读性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ByteReader&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">ReadByte&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>当接口含有多个方法的时候，还是要选取一个能够精准描述接口目的的名字，譬如&lt;code>net.Conn&lt;/code>、&lt;code>http/ResponseWriter&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="error">Error&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Error 类型写成 &lt;code>FooError&lt;/code> 形式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ExitError&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Error 变量写成 &lt;code>ErrFoo&lt;/code> 形式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ErrFormat&lt;/span> = &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unknown format&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="注释">注释&lt;/h2>
&lt;p>注释应该做至少三件事中的一件：&lt;/p>
&lt;ol>
&lt;li>注释应该解释其作用。&lt;/li>
&lt;li>注释应该解释其如何做的。&lt;/li>
&lt;li>注释应该解释其原因。&lt;/li>
&lt;/ol>
&lt;h3 id="包级别注释">包级别注释&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>包级别的注释就是对包的介绍，只需在同个包的任一源文件中说明即可有效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于 &lt;code>main&lt;/code> 包，一般只有一行简短的注释用以说明包的用途，且以项目名称开头：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#75715e">// Gogs (Go Git Service) is a painless self-hosted Git Service.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>对于一个复杂项目的子包，一般情况下不需要包级别注释，除非是代表某个特定功能的模块。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于简单的非 &lt;code>main&lt;/code> 包，可用一行注释概括。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于相对功能复杂的非 &lt;code>main&lt;/code> 包，一般都会增加一些使用示例或基本说明，且以 &lt;code>Package &amp;lt;name&amp;gt;&lt;/code> 开头：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> Package regexp implements a simple library for regular expressions.
&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e"> The syntax of the regular expressions accepted is:
&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e"> regexp:
&lt;/span>&lt;span style="color:#75715e"> concatenation { &amp;#39;|&amp;#39; concatenation }
&lt;/span>&lt;span style="color:#75715e"> concatenation:
&lt;/span>&lt;span style="color:#75715e"> { closure }
&lt;/span>&lt;span style="color:#75715e"> closure:
&lt;/span>&lt;span style="color:#75715e"> term [ &amp;#39;*&amp;#39; | &amp;#39;+&amp;#39; | &amp;#39;?&amp;#39; ]
&lt;/span>&lt;span style="color:#75715e"> term:
&lt;/span>&lt;span style="color:#75715e"> &amp;#39;^&amp;#39;
&lt;/span>&lt;span style="color:#75715e"> &amp;#39;$&amp;#39;
&lt;/span>&lt;span style="color:#75715e"> &amp;#39;.&amp;#39;
&lt;/span>&lt;span style="color:#75715e"> character
&lt;/span>&lt;span style="color:#75715e"> &amp;#39;[&amp;#39; [ &amp;#39;^&amp;#39; ] character-ranges &amp;#39;]&amp;#39;
&lt;/span>&lt;span style="color:#75715e"> &amp;#39;(&amp;#39; regexp &amp;#39;)&amp;#39;
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">regexp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>特别复杂的包说明，可单独创建 &lt;code>doc.go&lt;/code> 文件来加以说明。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="特别声明">特别声明&lt;/h3>
&lt;ul>
&lt;li>&lt;code>TODO:&lt;/code>当某个部分等待完成时，使用此开头的注释来提醒维护人员。&lt;/li>
&lt;li>&lt;code>FIXME:&lt;/code>当某个部分存在已知问题进行需要修复或改进时，使用此开头的注释来提醒维护人员。&lt;/li>
&lt;li>&lt;code>NOTE:&lt;/code>当需要特别说明某个问题时，使用此开头的注释。&lt;/li>
&lt;/ul>
&lt;h2 id="版权声明">版权声明&lt;/h2>
&lt;p>作为开源项目，必须有相应的开源许可证才能算是真正的开源。在选择了一个开源许可证之后，需要在源文件中进行相应的版权声明才能生效。&lt;/p>
&lt;h3 id="apache-license-version-20">Apache License Version 2.0&lt;/h3>
&lt;p>该许可证要求在所有的源文件中的头部放置以下内容才能算协议对该文件有效。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-License" data-lang="License">// Copyright [yyyy] [name of copyright owner]
//
// Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
&lt;/code>&lt;/pre>&lt;p>&lt;code>[yyyy]&lt;/code> 表示该源文件创建的年份。&lt;/p>
&lt;p>&lt;code>[name of copyright owner]&lt;/code>，即版权所有者。如果为个人项目，就写个人名称。若为团队项目，则宜写团队名称。&lt;/p>
&lt;h3 id="mit-license">MIT License&lt;/h3>
&lt;p>使用 MIT 授权的项目，需在源文件头部增加以下内容。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-License" data-lang="License">// Copyright [yyyy] [name of copyright owner]. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.
&lt;/code>&lt;/pre>&lt;p>年份和版权所有者的名称填写规则与 Apache License Version 2.0 的一样。&lt;/p></description></item><item><title>HTTP网络协议</title><link>https://wnanbei.github.io/post/http%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link><pubDate>Sat, 06 Jan 2018 16:17:25 +0000</pubDate><guid>https://wnanbei.github.io/post/http%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</guid><description>&lt;p>&lt;code>HTTP（HyperText Transfer Protocol）&lt;/code>，意为超文本传输协议，是目前互联网上应用最为广泛的一种网络协议。目前使用最普遍的一个版本是HTTP 1.1。&lt;/p>
&lt;p>HTTP协议是用于从WWW服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。&lt;/p>
&lt;p>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。&lt;/p>
&lt;p>一次HTTP请求的基本流程一般是，在建立TCP连接后，由客户端向服务端发起一次请求 &lt;code>request&lt;/code> ，而服务器在接收到以后返回给客户端一个响应 &lt;code>response&lt;/code> 。所以我们看到的HTTP请求内容一般就分为请求和响应两部分。&lt;/p>
&lt;p>HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。默认HTTP的端口号为80。&lt;/p>
&lt;h3 id="无状态协议">无状态协议&lt;/h3>
&lt;p>HTTP协议是无状态的，也就是说每一次HTTP请求之间都是相互独立的，没有联系的，服务端不知道客户端具体的状态。&lt;/p>
&lt;p>比如客户端访问一次网页之后关闭浏览器，然后再一次启动浏览器，再访问该网站，服务器是不知道客户关闭了一次浏览器的。&lt;/p>
&lt;p>这样设计的原因是因为Web服务器一般需要面对很多浏览器的并发访问，为了提高Web服务器对并发访问的处理能力，在设计HTTP协议时规定Web服务器发送HTTP应答报文和文档时，不保存发出请求的Web浏览器进程的任何状态信息。&lt;/p>
&lt;h2 id="request">Request&lt;/h2>
&lt;p>每一个HTTP请求都由三部分组成，分别是：请求行、请求报头、请求正文。&lt;/p>
&lt;h3 id="请求行">请求行&lt;/h3>
&lt;p>请求行一般由&lt;strong>请求方法&lt;/strong>、&lt;strong>url路径&lt;/strong>、&lt;strong>协议版本&lt;/strong>组成。&lt;/p>
&lt;h3 id="请求报头">请求报头&lt;/h3>
&lt;p>请求行下方的是则是请求报头，HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。每个报头的形式如下：&lt;/p>
&lt;blockquote>
&lt;p>名字 + : + 空格 + 值&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Host&lt;/strong>&lt;/p>
&lt;p>指定的请求资源的域名（主机和端口号）。HTTP请求必须包含HOST，否则系统会以400状态码返回。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>User-Agant&lt;/strong>&lt;/p>
&lt;p>简称UA，内容包含发出请求的用户信息，通常UA包含浏览者的信息，主要是浏览器的名称版本和所用的操作系统。这个UA头不仅仅是使用浏览器才存在，只要使用了基于HTTP协议的客户端软件都会发送，无论是手机端还是PDA等，这个UA头是辨别客户端所用设备的重要依据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accept&lt;/strong>&lt;/p>
&lt;p>告诉服务器可以接受的文件格式。通常这个值在各种浏览器中都差不多，不过WAP浏览器所能接受的格式要少一些，这也是用来区分WAP和计算机浏览器的主要依据之一，随着WAP浏览器的升级，其已经和计算机浏览器越来越接近，因此这个判断所起的作用也越来越弱。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cookie&lt;/strong>&lt;/p>
&lt;p>Cookie信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cache-Control&lt;/strong>&lt;/p>
&lt;p>指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、man-age、max-stake、min-fresh、only-if-cached；响应消息中的指令包括 public、privete、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Referer&lt;/strong>&lt;/p>
&lt;p>页面跳转处，表明产生请求的网页来自于哪个URL，用户是从该 Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Content-Length&lt;/strong>&lt;/p>
&lt;p>内容长度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Content-Range&lt;/strong>&lt;/p>
&lt;p>响应的资源范围。可以在每次请求中标记请求的资源范围，在连接断开重连时，客户端只请求该资源未下载的部分，而不是重新请求整个资源，实现断点续传。迅雷就是基于这个原，使用多线程分段读取网络上的资源，最后再合并。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accept-Encoding&lt;/strong>&lt;/p>
&lt;p>指定所能接收的编码方式，通常服务器会对页面进行GZIP压缩后再输出以减少流量，一般浏览器均支持对这种压缩后的数据进行处理，但对于我们来说，如果不想接收到这些看似乱码的数据，可以指定不接收任何服务器端压缩处理，要求其原样返回。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accept-Language&lt;/strong>&lt;/p>
&lt;p>指浏览器可以接受的语言种类 en、en-us指英语 zh、zh-cn指中文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Connection&lt;/strong>&lt;/p>
&lt;p>客户端与服务器链接类型，keep-alive:保持链接，close:关闭链接。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="请求正文">请求正文&lt;/h3>
&lt;p>请求正文通常是使用POST方法进行发送的数据，GET方法是没有请求正文的。&lt;/p>
&lt;p>请求正文跟上面的消息报头一般由一个空行隔开。&lt;/p>
&lt;h2 id="response">Response&lt;/h2>
&lt;p>HTTP响应同样也是由状态行、响应报头、报文主体三部分组成。&lt;/p>
&lt;h3 id="状态行">状态行&lt;/h3>
&lt;p>状态行由HTTP协议版本号， 状态码， 状态消息三部分组成。&lt;/p>
&lt;h3 id="响应报头">响应报头&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Allow&lt;/strong>&lt;/p>
&lt;p>服务器支持哪些请求方法（如GET、POST等）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Date&lt;/strong>&lt;/p>
&lt;p>表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Set-Cookie&lt;/strong>&lt;/p>
&lt;p>非常重要的header, 用于把cookie发送到客户端浏览器，每一个写入cookie都会生成一个Set-Cookie。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Expires&lt;/strong>&lt;/p>
&lt;p>指明应该在什么时候认为文档已经过期，从而不再缓存它，重新从服务器获取，会更新缓存。过期之前使用本地缓存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Content-Type&lt;/strong>&lt;/p>
&lt;p>WEB服务器告诉客户端自己响应的对象的类型和字符集。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Content-Encoding&lt;/strong>&lt;/p>
&lt;p>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Content-Length&lt;/strong>&lt;/p>
&lt;p>指明实体正文的长度，以字节方式存储的十进制数字来表示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Location&lt;/strong>&lt;/p>
&lt;p>用于重定向一个新的位置，包含新的URL地址。表示客户应当到哪里去提取文档。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Refresh&lt;/strong>&lt;/p>
&lt;p>表示浏览器应该在多少时间之后刷新文档，以秒计。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="响应正文">响应正文&lt;/h3>
&lt;p>服务器返回的数据。&lt;/p>
&lt;h2 id="url">URL&lt;/h2>
&lt;p>URL&lt;code>（Uniform Resource Locator）&lt;/code>，中文叫统一资源定位符。是用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在&amp;quot;HTTP&amp;quot;后面的“//”为分隔符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>域名部分：该URL的域名部分为&lt;code>www.aspxfans.com&lt;/code>。一个URL中，也可以使用IP地址作为域名使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>端口部分：跟在域名后面的是端口，域名和端口之间使用 &lt;code>:&lt;/code> 作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>路径部分：从域名后的第一个“/”开始到最后一个“？”为止，是路径部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是路径部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是路径部分。&lt;/p>
&lt;p>本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>参数部分：从“？”开始到“#”为止之间的部分为参数部分。本例中的参数部分为“boardID=5&amp;amp;ID=24618&amp;amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;amp;”作为分隔符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分。&lt;/p>
&lt;p>锚部分是用来定位到页面中某个元素的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="http请求方法">HTTP请求方法&lt;/h2>
&lt;p>HTTP协议中定义的请求方法有以下几种：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>序号&lt;/th>
&lt;th>方法&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>GET&lt;/td>
&lt;td>请求指定的页面信息，并返回实体主体。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>HEAD&lt;/td>
&lt;td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>POST&lt;/td>
&lt;td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>PUT&lt;/td>
&lt;td>从客户端向服务器传送的数据取代指定的文档的内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>DELETE&lt;/td>
&lt;td>请求服务器删除指定的页面。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>CONNECT&lt;/td>
&lt;td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>OPTIONS&lt;/td>
&lt;td>允许客户端查看服务器的性能。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>TRACE&lt;/td>
&lt;td>回显服务器收到的请求，主要用于测试或诊断。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>虽然HTTP请求中定义的方法有这么多种，但是我们平常使用的基本只有&lt;code>GET&lt;/code>和&lt;code>POST&lt;/code>两种方法，而且大部分网站都是禁用掉了除&lt;code>GET&lt;/code>和&lt;code>POST&lt;/code>外其他的方法。&lt;/p>
&lt;p>因为其他几种方法通过&lt;code>GET&lt;/code>或者&lt;code>POST&lt;/code>都能实现，而且对于网站来说更加的安全和可控。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>GET&lt;/code>&lt;/p>
&lt;p>其实简单来说，&lt;code>GET&lt;/code>方法一般用来负责获取数据，或者将一些简短的数据放到URL参数中传递到服务器。比&lt;code>POST&lt;/code>更加高效和方便。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>POST&lt;/code>&lt;/p>
&lt;p>由于&lt;code>GET&lt;/code>方法最多在url中携带1024字节数据，且将数据放到URL中传递太不安全，数据量大时URL也会变得冗长。所以传递数据量大或者安全性要求高的数据的时候，最好使用&lt;code>POST&lt;/code>方法来传递数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="状态码">状态码&lt;/h2>
&lt;p>当客户端向服务端发起一次请求后，服务端在返回的响应头中会包含一个HTTP状态码，以表明这一次请求的状态。下面是一些常见的状态码：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>200 - 请求成功&lt;/p>
&lt;/li>
&lt;li>
&lt;p>301 - 资源（网页等）被永久转移到其它URL&lt;/p>
&lt;/li>
&lt;li>
&lt;p>404 - 请求的资源（网页等）不存在&lt;/p>
&lt;/li>
&lt;li>
&lt;p>500 - 内部服务器错误&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>HTTP的状态码是由三位数字来表示的，由第一位数字来表示状态码的类型，一般来说有五种类型：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>分类&lt;/th>
&lt;th>分类描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1**&lt;/td>
&lt;td>信息，服务器收到请求，需要请求者继续执行操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2**&lt;/td>
&lt;td>成功，操作被成功接收并处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3**&lt;/td>
&lt;td>重定向，需要进一步的操作以完成请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4**&lt;/td>
&lt;td>客户端错误，请求包含语法错误或无法完成请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5**&lt;/td>
&lt;td>服务器错误，服务器在处理请求的过程中发生了错误&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>以下是详细的状态码列表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>状态码&lt;/th>
&lt;th>状态码英文名称&lt;/th>
&lt;th>中文描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>100&lt;/td>
&lt;td>Continue&lt;/td>
&lt;td>继续。客户端应继续其请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>101&lt;/td>
&lt;td>Switching Protocols&lt;/td>
&lt;td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>200&lt;/td>
&lt;td>OK&lt;/td>
&lt;td>请求成功。一般用于GET与POST请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>201&lt;/td>
&lt;td>Created&lt;/td>
&lt;td>已创建。成功请求并创建了新的资源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>202&lt;/td>
&lt;td>Accepted&lt;/td>
&lt;td>已接受。已经接受请求，但未处理完成&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>203&lt;/td>
&lt;td>Non-Authoritative Information&lt;/td>
&lt;td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>204&lt;/td>
&lt;td>No Content&lt;/td>
&lt;td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>205&lt;/td>
&lt;td>Reset Content&lt;/td>
&lt;td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>206&lt;/td>
&lt;td>Partial Content&lt;/td>
&lt;td>部分内容。服务器成功处理了部分GET请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>300&lt;/td>
&lt;td>Multiple Choices&lt;/td>
&lt;td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>301&lt;/td>
&lt;td>Moved Permanently&lt;/td>
&lt;td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>302&lt;/td>
&lt;td>Found&lt;/td>
&lt;td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>303&lt;/td>
&lt;td>See Other&lt;/td>
&lt;td>查看其它地址。与301类似。使用GET和POST请求查看&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>304&lt;/td>
&lt;td>Not Modified&lt;/td>
&lt;td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>305&lt;/td>
&lt;td>Use Proxy&lt;/td>
&lt;td>使用代理。所请求的资源必须通过代理访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>306&lt;/td>
&lt;td>Unused&lt;/td>
&lt;td>已经被废弃的HTTP状态码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>307&lt;/td>
&lt;td>Temporary Redirect&lt;/td>
&lt;td>临时重定向。与302类似。使用GET请求重定向&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>400&lt;/td>
&lt;td>Bad Request&lt;/td>
&lt;td>客户端请求的语法错误，服务器无法理解&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>401&lt;/td>
&lt;td>Unauthorized&lt;/td>
&lt;td>请求要求用户的身份认证&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>402&lt;/td>
&lt;td>Payment Required&lt;/td>
&lt;td>保留，将来使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>403&lt;/td>
&lt;td>Forbidden&lt;/td>
&lt;td>服务器理解请求客户端的请求，但是拒绝执行此请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>404&lt;/td>
&lt;td>Not Found&lt;/td>
&lt;td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&amp;quot;您所请求的资源无法找到&amp;quot;的个性页面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>405&lt;/td>
&lt;td>Method Not Allowed&lt;/td>
&lt;td>客户端请求中的方法被禁止&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>406&lt;/td>
&lt;td>Not Acceptable&lt;/td>
&lt;td>服务器无法根据客户端请求的内容特性完成请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>407&lt;/td>
&lt;td>Proxy Authentication Required&lt;/td>
&lt;td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>408&lt;/td>
&lt;td>Request Time-out&lt;/td>
&lt;td>服务器等待客户端发送的请求时间过长，超时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>409&lt;/td>
&lt;td>Conflict&lt;/td>
&lt;td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>410&lt;/td>
&lt;td>Gone&lt;/td>
&lt;td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>411&lt;/td>
&lt;td>Length Required&lt;/td>
&lt;td>服务器无法处理客户端发送的不带Content-Length的请求信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>412&lt;/td>
&lt;td>Precondition Failed&lt;/td>
&lt;td>客户端请求信息的先决条件错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>413&lt;/td>
&lt;td>Request Entity Too Large&lt;/td>
&lt;td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>414&lt;/td>
&lt;td>Request-URI Too Large&lt;/td>
&lt;td>请求的URI过长（URI通常为网址），服务器无法处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>415&lt;/td>
&lt;td>Unsupported Media Type&lt;/td>
&lt;td>服务器无法处理请求附带的媒体格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>416&lt;/td>
&lt;td>Requested range not satisfiable&lt;/td>
&lt;td>客户端请求的范围无效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>417&lt;/td>
&lt;td>Expectation Failed&lt;/td>
&lt;td>服务器无法满足Expect的请求头信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>500&lt;/td>
&lt;td>Internal Server Error&lt;/td>
&lt;td>服务器内部错误，无法完成请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>501&lt;/td>
&lt;td>Not Implemented&lt;/td>
&lt;td>服务器不支持请求的功能，无法完成请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>502&lt;/td>
&lt;td>Bad Gateway&lt;/td>
&lt;td>充当网关或代理的服务器，从远端服务器接收到了一个无效的请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>503&lt;/td>
&lt;td>Service Unavailable&lt;/td>
&lt;td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>504&lt;/td>
&lt;td>Gateway Time-out&lt;/td>
&lt;td>充当网关或代理的服务器，未及时从远端服务器获取请求&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>505&lt;/td>
&lt;td>HTTP Version not supported&lt;/td>
&lt;td>服务器不支持请求的HTTP协议的版本，无法完成处理&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="cookie">Cookie&lt;/h2>
&lt;p>&lt;code>Cookie&lt;/code>有时也用其复数形式 &lt;code>Cookies&lt;/code>，英文是饼干的意思。指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）。最新的规范是 RFC6265  。&lt;/p>
&lt;p>&lt;code>Cookie&lt;/code>其实就是由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。 服务器在接收到&lt;code>Cookie&lt;/code>以后，会验证&lt;code>Cookie&lt;/code>的信息，以此来辨别用户的身份。&lt;/p>
&lt;p>&lt;code>Cookie&lt;/code>可以理解为一个临时通行证。&lt;/p>
&lt;h3 id="作用">作用&lt;/h3>
&lt;p>&lt;code>Cookie&lt;/code>其实是HTTP请求头的扩展部分，由于HTTP协议是无状态的协议，所以为了在网页上实现登陆之类的需求，所以扩展了&lt;code>Cookie&lt;/code>这样的功能。&lt;/p>
&lt;p>每一次HTTP请求在数据交换完毕之后就会关闭连接，所以下一次HTTP请求就无法让服务端得知你和上一次请求的关系。而使用了&lt;code>Cookie&lt;/code>之后，你在第一次登陆之类的请求成功之后，服务器会在&lt;code>Response&lt;/code>的头信息中给你返回&lt;code>Cookie&lt;/code>信息，你下一次访问的时候带上这个Cookie信息，则服务器就能识别你为上一次成功登陆的用户。&lt;/p>
&lt;h3 id="内容">内容&lt;/h3>
&lt;p>&lt;code>Cookie&lt;/code>一般保存的格式为json格式，由一些属性组成。&lt;/p>
&lt;ul>
&lt;li>name：&lt;code>Cookie&lt;/code>的名称&lt;/li>
&lt;li>value：&lt;code>Cookie&lt;/code>的值&lt;/li>
&lt;li>domain：可以使用此&lt;code>Cookie&lt;/code>的域名&lt;/li>
&lt;li>path：可以使用此&lt;code>Cookie&lt;/code>的页面路径&lt;/li>
&lt;li>expires/Max-Age：此&lt;code>Cookie&lt;/code>的超时时间&lt;/li>
&lt;li>secure：设置是否只能通过https来传递此条&lt;code>Cookie&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="domain属性">domain属性&lt;/h3>
&lt;p>域名一般来说分为顶级域名，二级域名，三级域名等等。&lt;/p>
&lt;p>例如baidu.com是一个顶级域名，而www.baidu.com和map.baidu.com就是二级域名，依次类推。&lt;/p>
&lt;p>而在我们的&lt;code>Cookie&lt;/code>来说，都有一个&lt;code>domain&lt;/code>属性，这个属性限制了访问哪些域名时可以使用这一条&lt;code>Cookie&lt;/code>。因为每个网站基本上都会分发&lt;code>Cookie&lt;/code>，所以&lt;code>domain&lt;/code>属性就可以让我们在访问新浪时不会带上百度分发给我们的&lt;code>Cookie&lt;/code>。&lt;/p>
&lt;p>而在同一系的域名中，顶级域名是无法使用其二级域名的&lt;code>Cookie&lt;/code>的，也就是说访问baidu.com的时候是不会带上map.baidu.com分发的&lt;code>Cookie&lt;/code>的，二级域名之间的&lt;code>Cookie&lt;/code>也不可以共享。但访问二级域名时是可以使用顶级域名的&lt;code>Cookie&lt;/code>的。&lt;/p>
&lt;h3 id="path属性">path属性&lt;/h3>
&lt;p>path属性为可以访问此cookie的页面路径。 比如domain是abc.com，path是/test，那么只有/test路径下的页面可以读取此cookie。&lt;/p>
&lt;h3 id="expiresmax-age属性">expires/Max-Age属性&lt;/h3>
&lt;p>字段为此cookie超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。&lt;/p>
&lt;h2 id="session">Session&lt;/h2>
&lt;p>Session，中文经常翻译为会话，其本来的含义是指有始有终的一系列动作/消息，比如打电话时从拿起电话拨号到挂断电话这中间的一系列过程可以称之为一个session。这个词在各个领域都有在使用。&lt;/p>
&lt;p>而我们web领域，一般使用的是其本义，&lt;strong>一个浏览器窗口从打开到关闭这个期间&lt;/strong>。&lt;/p>
&lt;p>Session的目的则是，在一个客户从打开浏览器到关闭浏览器这个期间内，发起的所有请求都可以被识别为同一个用户。而实现的方式则是，在一个客户打开浏览器开始访问网站的时候，会生成一个SessionID，这个ID每次的访问都会带上，而服务器会识别这个SessionID并且将与这个SessionID有关的数据保存在服务器上。由此来实现客户端的状态识别。&lt;/p>
&lt;p>Session与Cookie相反，Session是存储在服务器上的数据，只由客户端传上来的SessionId来进行判定，所以相对于Cookie，Session的安全性更高。&lt;/p>
&lt;p>一般SessionID会在浏览器被关闭时丢弃，或者服务器会验证Session的活跃程度，例如30分钟某一个SessionID都没有活跃，那么也会被识别为失效。&lt;/p></description></item><item><title>TCP/IP传输层网络协议</title><link>https://wnanbei.github.io/post/tcp/ip%E4%BC%A0%E8%BE%93%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link><pubDate>Sat, 06 Jan 2018 16:17:25 +0000</pubDate><guid>https://wnanbei.github.io/post/tcp/ip%E4%BC%A0%E8%BE%93%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</guid><description>&lt;p>&lt;strong>其实网络协议，就是为了所有的计算机能够在同一个网络中互相传递数据，而制定的数据传输规则。&lt;/strong> 就好像我们只有说同一种语言才能互相交流一个道理，那么想要在互联网中传递数据，就得遵守标准的网络协议。&lt;/p>
&lt;h2 id="osi参考模型">OSI参考模型&lt;/h2>
&lt;p>既然说到网络协议就像一种语言，同语言间才能够互相交流，那么自然网络协议也像语言一样，是多种多样的。&lt;/p>
&lt;p>在这种情况下&lt;code>国际标准化组织&lt;/code>(ISO)提出的一个试图使各种计算机在世界范围内互连为网络的标准框架，简称OSI，OSI模型，即开放式通信系统互联参考模型(Open System Interconnection,OSI/RM,Open Systems Interconnection Reference Model)。&lt;/p>
&lt;p>这个模型的目的是：提供给开发者一个必须的、通用的概念以便开发完善、可以用来解释连接不同系统的框架。也就是说希望规范网络协议。&lt;/p>
&lt;p>OSI模型定义了网络互联的七层框架，也就是将网络协议从软件到硬件，从上到下的分成了七层，每层都为更高一层提供服务。&lt;/p>
&lt;p>虽然说OSI模型算是网络协议的框架标准，但是在实际的使用中，TCP/IP的五层协议使用的更加广泛。&lt;/p>
&lt;h2 id="tcpip">TCP/IP&lt;/h2>
&lt;p>&lt;strong>TCP/IP指的其实不只是TCP和IP这两个协议，而是一个协议簇，其中包括了IP、ICMP、TCP、http、ftp、pop3 等等的一系列协议。&lt;/strong> TCP/IP（Transmission Control Protocol/Internet Protocol）是传输控制协议和网络协议的简称，它定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。&lt;/p>
&lt;p>TCP/IP是Internet互联网上所有主机间的共同协议。&lt;/p>
&lt;h3 id="结构">结构&lt;/h3>
&lt;p>而TCP/IP协议采用五层结构，其与OSI模型的各层对应关系为&lt;/p>
&lt;h2 id="网络分层">网络分层&lt;/h2>
&lt;h3 id="物理层和数据链路层">物理层和数据链路层&lt;/h3>
&lt;p>物理层是定义物理介质的各种特性：&lt;/p>
&lt;ol>
&lt;li>机械特性&lt;/li>
&lt;li>电子特性&lt;/li>
&lt;li>功能特性&lt;/li>
&lt;li>规程特性&lt;/li>
&lt;/ol>
&lt;p>数据链路层是负责接收IP数据包并通过网络发送，或者从网络上接收物理帧，抽出IP数据包，交给IP层。&lt;/p>
&lt;ul>
&lt;li>ARP是正向地址解析协议，通过已知的IP，寻找对应主机的MAC地址。&lt;/li>
&lt;li>RARP是反向地址解析协议，通过MAC地址确定IP地址。比如无盘工作站还有DHCP服务。&lt;/li>
&lt;/ul>
&lt;p>常见的接口层协议有：&lt;/p>
&lt;p>Ethernet 802.3、Token Ring 802.5、X.25、Frame relay、HDLC、PPP ATM等。&lt;/p>
&lt;h3 id="网络层">网络层&lt;/h3>
&lt;p>负责相邻计算机之间的通信。其功能包括三方面。&lt;/p>
&lt;ol>
&lt;li>处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。&lt;/li>
&lt;li>处理输入数据报：首先检查其合法性，然后进行寻径&amp;ndash;假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。&lt;/li>
&lt;li>处理路径、流控、拥塞等问题。&lt;/li>
&lt;/ol>
&lt;p>网络层包括：IP(Internet Protocol）协议、ICMP(Internet Control Message Protocol)&lt;/p>
&lt;p>控制报文协议、ARP(Address Resolution Protocol）地址转换协议、RARP(Reverse ARP)反向地址转换协议。&lt;/p>
&lt;ul>
&lt;li>IP是网络层的核心，通过路由选择将下一条IP封装后交给接口层。IP数据报是无连接服务。&lt;/li>
&lt;li>ICMP是网络层的补充，可以回送报文。用来检测网络是否通畅。Ping命令就是发送ICMP的echo包，通过回送的echo relay进行网络测试。&lt;/li>
&lt;/ul>
&lt;h3 id="传输层">传输层&lt;/h3>
&lt;p>提供应用程序间的通信。其功能包括：一、格式化信息流；二、提供可靠传输。为实现后者，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送，即耳熟能详的“三次握手”过程，从而提供可靠的数据传输。&lt;/p>
&lt;p>传输层协议主要是：传输控制协议TCP(Transmission Control Protocol）和用户数据报协议UDP(User Datagram protocol）。&lt;/p>
&lt;h3 id="应用层">应用层&lt;/h3>
&lt;p>向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。&lt;/p>
&lt;p>应用层协议主要包括如下几个：FTP、TELNET、DNS、SMTP、NFS、HTTP。&lt;/p>
&lt;ul>
&lt;li>FTP(File Transfer Protocol）是文件传输协议，一般上传下载用FTP服务，数据端口是20H，控制端口是21H。&lt;/li>
&lt;li>Telnet服务是用户远程登录服务，使用23H端口，使用明码传送，保密性差、简单方便。&lt;/li>
&lt;li>DNS(Domain Name Service）是域名解析服务，提供域名到IP地址之间的转换，使用端口53。&lt;/li>
&lt;li>SMTP(Simple Mail Transfer Protocol）是简单邮件传输协议，用来控制信件的发送、中转，使用端口25。&lt;/li>
&lt;li>NFS（Network File System）是网络文件系统，用于网络中不同主机间的文件共享。&lt;/li>
&lt;li>HTTP(Hypertext Transfer Protocol）是超文本传输协议，用于实现互联网中的WWW服务，使用端口80。&lt;/li>
&lt;/ul>
&lt;h2 id="tcp">TCP&lt;/h2>
&lt;p>TCP（Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。&lt;/p>
&lt;p>在TCP/IP协议簇中，TCP处于传输层中。&lt;/p>
&lt;p>应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分区成适当长度的报文段。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。&lt;/p>
&lt;p>TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK），如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误，在发送和接收时都要计算校验和。&lt;/p>
&lt;h3 id="tcp报文头">TCP报文头&lt;/h3>
&lt;p>TCP传输的数据分为头部和数据部分。&lt;/p>
&lt;p>&lt;strong>各个段位说明:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>源端口和目的端口&lt;/strong>: 各占 2 字节.端口是传输层与应用层的服务接口.传输层的复用和分用功能都要通过端口才能实现&lt;/li>
&lt;li>&lt;strong>序号&lt;/strong>: 占 4 字节.TCP 连接中传送的数据流中的每一个字节都编上一个序号.序号字段的值则指的是本报文段所发送的数据的第一个字节的序号&lt;/li>
&lt;li>&lt;strong>确认号&lt;/strong>: 占 4 字节,是期望收到对方的下一个报文段的数据的第一个字节的序号&lt;/li>
&lt;li>&lt;strong>数据偏移/首部长度&lt;/strong>: 占 4 位,它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远.“数据偏移”的单位是 32 位字(以 4 字节为计算单位)&lt;/li>
&lt;li>&lt;strong>保留&lt;/strong>: 占 6 位,保留为今后使用,但目前应置为 0&lt;/li>
&lt;li>&lt;strong>紧急URG&lt;/strong>: 当 URG=1 时,表明紧急指针字段有效.它告诉系统此报文段中有紧急数据,应尽快传送(相当于高优先级的数据)&lt;/li>
&lt;li>&lt;strong>确认ACK&lt;/strong>: 只有当 ACK=1 时确认号字段才有效.当 ACK=0 时,确认号无效&lt;/li>
&lt;li>&lt;strong>PSH(PuSH)&lt;/strong>: 接收 TCP 收到 PSH = 1 的报文段,就尽快地交付接收应用进程,而不再等到整个缓存都填满了后再向上交付&lt;/li>
&lt;li>&lt;strong>RST (ReSeT)&lt;/strong>: 当 RST=1 时,表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因）,必须释放连接,然后再重新建立运输连接&lt;/li>
&lt;li>&lt;strong>同步 SYN&lt;/strong>: 同步 SYN = 1 表示这是一个连接请求或连接接受报文&lt;/li>
&lt;li>&lt;strong>终止 FIN&lt;/strong>: 用来释放一个连接.FIN=1 表明此报文段的发送端的数据已发送完毕,并要求释放运输连接&lt;/li>
&lt;li>&lt;strong>检验和&lt;/strong>: 占 2 字节.检验和字段检验的范围包括首部和数据这两部分.在计算检验和时,要在 TCP 报文段的前面加上 12 字节的伪首部&lt;/li>
&lt;li>&lt;strong>紧急指针&lt;/strong>: 占 16 位,指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）&lt;/li>
&lt;li>&lt;strong>选项&lt;/strong>: 长度可变.TCP 最初只规定了一种选项,即最大报文段长度 MSS.MSS 告诉对方 TCP：“我的缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节.” [MSS(Maximum Segment Size)是 TCP 报文段中的数据字段的最大长度.数据字段加上 TCP 首部才等于整个的 TCP 报文段]&lt;/li>
&lt;li>&lt;strong>填充&lt;/strong>: 这是为了使整个首部长度是 4 字节的整数倍&lt;/li>
&lt;li>&lt;strong>其他选项&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>窗口扩大&lt;/strong>: 占 3 字节,其中有一个字节表示移位值 S.新的窗口值等于TCP 首部中的窗口位数增大到(16 + S),相当于把窗口值向左移动 S 位后获得实际的窗口大小&lt;/li>
&lt;li>&lt;strong>时间戳&lt;/strong>: 占10 字节,其中最主要的字段时间戳值字段(4字节)和时间戳回送回答字段(4字节)&lt;/li>
&lt;li>&lt;strong>选择确认&lt;/strong>: 接收方收到了和前面的字节流不连续的两2字节.如果这些字节的序号都在接收窗口之内,那么接收方就先收下这些数据,但要把这些信息准确地告诉发送方,使发送方不要再重复发送这些已收到的数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="三次握手四次挥手">三次握手四次挥手&lt;/h3>
&lt;p>既然说到TCP，不能不提到广为人知的三次握手和四次挥手，TCP协议为了保证信息传输的连接和可靠性，使用了这样的方式来保证连接的可靠性。&lt;/p>
&lt;h4 id="三次握手">三次握手&lt;/h4>
&lt;p>所谓三次握手，其实指的是TCP建立连接的过程，整个建立连接的过程需要发送三个包，来确认建立连接，具体流程如下：&lt;/p>
&lt;ul>
&lt;li>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。&lt;/li>
&lt;li>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。&lt;/li>
&lt;li>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。&lt;/li>
&lt;/ul>
&lt;h4 id="四次挥手">四次挥手&lt;/h4>
&lt;p>四次挥手指的则是断开连接的过程：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>