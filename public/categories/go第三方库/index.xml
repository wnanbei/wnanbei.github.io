<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go第三方库 on WNANBEI</title><link>https://wnanbei.github.io/categories/go%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link><description>Recent content in Go第三方库 on WNANBEI</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://wnanbei.github.io/categories/go%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Gorm CRUD</title><link>https://wnanbei.github.io/post/go-gorm-crud/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gorm-crud/</guid><description>&lt;p>Gorm 常见 CRUD 操作 API。&lt;/p></description></item><item><title>Go Gorm 数据库连接与模型</title><link>https://wnanbei.github.io/post/go-gorm-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gorm-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>对开发者友好的 Go ORM 库，v2 版本。&lt;/p></description></item><item><title>Go 第三方库 gjson</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-gjson/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-gjson/</guid><description>&lt;p>这是一个主要功能为从 Json 中提取值的包。&lt;/p></description></item><item><title>Go 第三方库 grpc</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-grpc/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-grpc/</guid><description>&lt;p>&lt;code>gRPC&lt;/code> 是一个高性能、通用的开源 RPC 框架，由 Google 主要面向移动应用开发并基于 &lt;code>HTTP/2&lt;/code> 协议标准而设计，基于 &lt;code>ProtoBuf(Protocol Buffers)&lt;/code> 序列化协议开发，且支持众多开发语言。&lt;/p>
&lt;p>使用 gRPC， 可以在一个 &lt;code>.proto&lt;/code> 文件中定义服务，并使用任何支持它的语言去实现客户端和服务端。使用 gRPC定义一个服务，指定一个可以远程调用的带有参数和返回类型的的方法，客户端可以像调用本地方法一样直接调用服务端的方法。gRPC 解决了不同语言及环境间通信的复杂性。&lt;/p>
&lt;p>使用 &lt;code>protocol buffers&lt;/code> 还能获得其他好处：&lt;/p>
&lt;ul>
&lt;li>包括高效的序列号&lt;/li>
&lt;li>简单的 IDL&lt;/li>
&lt;li>容易进行接口更新。&lt;/li>
&lt;/ul>
&lt;p>使用 gRPC 能更容易编写跨语言的分布式代码。&lt;/p></description></item><item><title>Go 第三方库 viper</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-viper/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-viper/</guid><description>&lt;p>此包用于读取各类配置文件。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get github.com/spf13/viper
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Viper&lt;/code> 支持的配置文件后缀名如下：&lt;/p>
&lt;p>&lt;code>json&lt;/code>, &lt;code>toml&lt;/code>, &lt;code>yaml&lt;/code>, &lt;code>yml&lt;/code>, &lt;code>properties&lt;/code>, &lt;code>props&lt;/code>, &lt;code>prop&lt;/code>, &lt;code>hcl&lt;/code>, &lt;code>dotenv&lt;/code>, &lt;code>env&lt;/code>, &lt;code>ini&lt;/code>&lt;/p></description></item><item><title>Go 第三方库 zap</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-zap/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-zap/</guid><description>&lt;p>此包用于结构化记录日志。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get -u go.uber.org/zap
&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;go.uber.org/zap&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>性能高，与 Zerolog 同一水平。&lt;/li>
&lt;/ul></description></item><item><title>Gin 启动与配置</title><link>https://wnanbei.github.io/post/gin-%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>Gin 的安装、启动、配置与部分简介。&lt;/p></description></item><item><title>Gin 获取请求数据</title><link>https://wnanbei.github.io/post/gin-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</guid><description>&lt;p>Gin 获取客户端发送请求的各种路由、URL、Post 表单、header 等数据，或者将这些数据绑定到模型中。&lt;/p></description></item><item><title>Gin 设置 Middleware 中间件</title><link>https://wnanbei.github.io/post/gin-%E8%AE%BE%E7%BD%AE-middleware-%E4%B8%AD%E9%97%B4%E4%BB%B6/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%AE%BE%E7%BD%AE-middleware-%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid><description>&lt;p>Gin 设置全局 Middleware、自定义中间件用法。&lt;/p></description></item><item><title>Gin 请求与路由</title><link>https://wnanbei.github.io/post/gin-%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%B7%AF%E7%94%B1/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%B7%AF%E7%94%B1/</guid><description>&lt;p>Gin 设置请求方式与路由，包括重定向、动态路由、路由分组等。&lt;/p></description></item><item><title>Gin 返回响应方式</title><link>https://wnanbei.github.io/post/gin-%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F/</guid><description>&lt;p>Gin 框架在 &lt;code>*gin.Context&lt;/code> 实例中封装了所有处理请求并响应客户端的方法。&lt;/p>
&lt;p>Gin 支持多种响应方法，包括我们常见的 &lt;code>String&lt;/code>、&lt;code>HTML&lt;/code>、&lt;code>JSON&lt;/code>、&lt;code>XML&lt;/code>、&lt;code>YAML&lt;/code>、&lt;code>JSONP&lt;/code>，也支持直接响应 &lt;code>Reader&lt;/code> 和 &lt;code>[]byte&lt;/code>，而且还支持重定向。&lt;/p></description></item><item><title>Gin 配置 Swagger 接口文档</title><link>https://wnanbei.github.io/post/gin-%E9%85%8D%E7%BD%AE-swagger-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E9%85%8D%E7%BD%AE-swagger-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid><description>&lt;p>此包用于自动化生成 API 文档。&lt;/p></description></item><item><title>Gin 高级功能</title><link>https://wnanbei.github.io/post/gin-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</guid><description>&lt;p>Gin 提供的日志功能和部分其他功能，包括：优雅关闭或重启、提供静态文件、http2 服务推送、自定义验证器、设置和获取 Cookies、从 reader 提供数据。&lt;/p></description></item></channel></rss>