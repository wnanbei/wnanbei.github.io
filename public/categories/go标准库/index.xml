<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go标准库 on WNANBEI</title><link>https://wnanbei.github.io/categories/go%E6%A0%87%E5%87%86%E5%BA%93/</link><description>Recent content in Go标准库 on WNANBEI</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://wnanbei.github.io/categories/go%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 令牌桶限流器 golang.org/x/time/rate</title><link>https://wnanbei.github.io/post/go-%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E5%99%A8-golang.org/x/time/rate/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E5%99%A8-golang.org/x/time/rate/</guid><description>&lt;p>&lt;code>golang.org/x/time/rate&lt;/code> 提供了一个使用令牌桶 &lt;code>Token Bucket&lt;/code> 算法实现的限流器。&lt;/p></description></item><item><title>Go 字符串处理 strings</title><link>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86-strings/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86-strings/</guid><description>&lt;p>作为一种基本数据结构，每种语言都有一些对于字符串的预定义处理函数。Go 中使用 &lt;code>strings&lt;/code> 包来完成对字符串的主要操作。&lt;/p></description></item><item><title>Go 字符串类型转换 strconv</title><link>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-strconv/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-strconv/</guid><description>&lt;p>Strconv 包含了一些变量用于获取程序运行的操作系统平台下 int 类型所占的位数，如：&lt;code>strconv.IntSize&lt;/code>。&lt;/p>
&lt;p>任何类型 &lt;strong>T&lt;/strong> 转换为字符串总是成功的。&lt;/p></description></item><item><title>Go 标准库 io</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-io/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-io/</guid><description/></item><item><title>Go 标准库 ioutil</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-ioutil/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-ioutil/</guid><description/></item><item><title>Go 互斥锁 sync.Mutex</title><link>https://wnanbei.github.io/post/go-%E4%BA%92%E6%96%A5%E9%94%81-sync.mutex/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%BA%92%E6%96%A5%E9%94%81-sync.mutex/</guid><description>&lt;p>&lt;code>sync.Mutex&lt;/code> 是一个互斥锁，默认为零值时为开锁状态。&lt;/p></description></item><item><title>Go 原子操作 atomic</title><link>https://wnanbei.github.io/post/go-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-atomic/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-atomic/</guid><description>&lt;p>&lt;code>atomic&lt;/code> 包封装了系统底层的原子操作。官方建议尽量少使用此包的原子操作，尽量遵循通过通信分享内存，而不是通过分享内存来通信的原则。&lt;/p>
&lt;p>这个包的方法有以下特点：&lt;/p>
&lt;ul>
&lt;li>方法操作的都是 &lt;code>int&lt;/code> 系列类型或指针。&lt;/li>
&lt;li>操作的数据需要其地址。&lt;/li>
&lt;/ul></description></item><item><title>Go 对象池 sync.Pool</title><link>https://wnanbei.github.io/post/go-%E5%AF%B9%E8%B1%A1%E6%B1%A0-sync.pool/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AF%B9%E8%B1%A1%E6%B1%A0-sync.pool/</guid><description>&lt;p>sync.Pool 是一个协程安全的内存池。主要用于增加临时对象的内存复用率，减少内存分配和 GC STW 的开销。、&lt;/p></description></item><item><title>Go 并发安全的 sync.Map</title><link>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84-sync.map/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84-sync.map/</guid><description>&lt;p>&lt;code>sync.Map&lt;/code> 是标准库 &lt;code>sync&lt;/code> 中实现的并发安全的 map。&lt;/p></description></item><item><title>Go 标准库 sync.WaitGroup</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-sync.waitgroup/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-sync.waitgroup/</guid><description/></item><item><title>Go 读写锁 sync.RWMutex</title><link>https://wnanbei.github.io/post/go-%E8%AF%BB%E5%86%99%E9%94%81-sync.rwmutex/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E8%AF%BB%E5%86%99%E9%94%81-sync.rwmutex/</guid><description>&lt;p>&lt;code>sync.RWMutex&lt;/code> 是一个读写锁，在读多写少的场景中，比 Mutex 的并发能力有很大的提升。&lt;/p></description></item><item><title>Go 上下文 context</title><link>https://wnanbei.github.io/post/go-%E4%B8%8A%E4%B8%8B%E6%96%87-context/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%B8%8A%E4%B8%8B%E6%96%87-context/</guid><description>&lt;p>context 指的是上下文，以下是几种 ctx 类型:&lt;/p>
&lt;ul>
&lt;li>emptyCtx - 所有 ctx 类型的根，用 &lt;code>context.TODO()&lt;/code>，或 &lt;code>context.Background()&lt;/code> 来生成。&lt;/li>
&lt;li>valueCtx - 主要就是为了在 ctx 中嵌入上下文数据，一个简单的 k 和 v 结构，同一个 ctx 内只支持一对 kv，需要更多的 kv 的话，会形成一棵树形结构。&lt;/li>
&lt;li>cancelCtx - 用来取消程序的执行树，一般用 &lt;code>WithCancel&lt;/code>，&lt;code>WithTimeout&lt;/code>，&lt;code>WithDeadline&lt;/code> 返回的取消函数本质上都是对应了 cancelCtx。&lt;/li>
&lt;li>timerCtx - 在 cancelCtx 上包了一层，支持基于时间的 cancel。&lt;/li>
&lt;/ul></description></item><item><title>Go 反射 reflect</title><link>https://wnanbei.github.io/post/go-%E5%8F%8D%E5%B0%84-reflect/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8F%8D%E5%B0%84-reflect/</guid><description>&lt;p>反射是程序在运行期间检查其自身结构的一种方式 。&lt;/p>
&lt;p>反射三大法则：&lt;/p>
&lt;ul>
&lt;li>反射可以将&lt;code>接口类型变量&lt;/code>转换为&lt;code>反射类型对象&lt;/code>&lt;/li>
&lt;li>反射可以将&lt;code>反射类型对象&lt;/code>转换为&lt;code>接口类型变量&lt;/code>&lt;/li>
&lt;li>如果要修改&lt;code>反射类型对象&lt;/code>，其值必须是&lt;code>可写的(settable)&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Go 日志打印 fmt</title><link>https://wnanbei.github.io/post/go-%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0-fmt/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0-fmt/</guid><description>&lt;p>&lt;code>fmt&lt;/code> 是 Go 用于日志打印的库：&lt;/p>
&lt;ul>
&lt;li>模板模式: &lt;code>[name]f&lt;/code> 根据模板格式化 例如: &lt;code>Printf&lt;/code>&lt;/li>
&lt;li>换行模式: &lt;code>[name]ln&lt;/code> 输出后带换行 例如: &lt;code>Println&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Go 时间处理库 time</title><link>https://wnanbei.github.io/post/go-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%BA%93-time/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%BA%93-time/</guid><description>&lt;p>time 是 Go 用于处理时间的标准库，包括格式化、计算、修改、定时、超时等功能。&lt;/p></description></item><item><title>Go 错误处理 errors</title><link>https://wnanbei.github.io/post/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-errors/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-errors/</guid><description>&lt;p>&lt;code>errors&lt;/code> 用于增强 Go 的错误处理能力。&lt;/p></description></item><item><title>Go 系统库 os</title><link>https://wnanbei.github.io/post/go-%E7%B3%BB%E7%BB%9F%E5%BA%93-os/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%B3%BB%E7%BB%9F%E5%BA%93-os/</guid><description>&lt;p>&lt;code>os&lt;/code> 库主要用于 Go 的文件、系统相关操作。&lt;/p></description></item><item><title>Go net/http client 客户端</title><link>https://wnanbei.github.io/post/go-net/http-client-%E5%AE%A2%E6%88%B7%E7%AB%AF/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-net/http-client-%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid><description>&lt;p>Go 中的&lt;code>net&lt;/code>包封装了大部分网络相关的功能，我们基本不需要借助其他库就能实现我们的爬虫需求。&lt;/p></description></item></channel></rss>