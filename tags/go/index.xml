<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on WNANBEI</title><link>https://wnanbei.github.io/tags/go/</link><description>Recent content in Go on WNANBEI</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://wnanbei.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>策略模式 - 设计模式系列（四）</title><link>https://wnanbei.github.io/post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E5%9B%9B/</link><pubDate>Tue, 07 Dec 2021 10:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E5%9B%9B/</guid><description>&lt;p>策略模式（Strategy Pattern）定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式（Policy）。&lt;/p></description></item><item><title>建造者模式 - 设计模式系列（三）</title><link>https://wnanbei.github.io/post/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%89/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%89/</guid><description>&lt;p>建造者模式（Builder Pattern）是一种对象构建模式，是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p></description></item><item><title>函数式选项模式 - 设计模式系列（二）</title><link>https://wnanbei.github.io/post/%E5%87%BD%E6%95%B0%E5%BC%8F%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%BA%8C/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E5%87%BD%E6%95%B0%E5%BC%8F%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%BA%8C/</guid><description>&lt;p>函数式选项模式（Functional Options Pattern）是一种构造结构体的模式，它通过设计一组非常有表现力和灵活的 API 来帮助配置和初始化结构体。&lt;/p></description></item><item><title>Go 范型使用方式</title><link>https://wnanbei.github.io/post/go-%E8%8C%83%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</link><pubDate>Tue, 23 Nov 2021 10:08:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E8%8C%83%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</guid><description>&lt;p>截止目前，Go 开发团队已确定在 Go1.18 版本推出范型，范型相关代码也已合并到 master 分支，可以使用 gotip 拉取最新的 Go 源码进行体验。&lt;/p>
&lt;p>不过标准库代码还未进行范型相关改造，Go 的主创团队认为目前范型刚刚推出，如何使用、最佳实践都还没有定论，所以为了保证 Go 的兼容性承若，标准库的改造应该暂缓实施。&lt;/p></description></item><item><title>防御性编程</title><link>https://wnanbei.github.io/post/%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B/</link><pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E9%98%B2%E5%BE%A1%E6%80%A7%E7%BC%96%E7%A8%8B/</guid><description>&lt;p>&lt;strong>防御性编程&lt;/strong>（Defensive programming）是&lt;strong>防御&lt;/strong>式设计的一种具体体现，它是为了保证，对程序的不可预见的使用，不会造成程序功能上的损坏。&lt;/p>
&lt;p>它可以被看作是为了减少或消除墨菲定律效力的方法。&lt;/p></description></item><item><title>模板模式 - 设计模式系列（一）</title><link>https://wnanbei.github.io/post/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%80/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B8%80/</guid><description>&lt;p>模板模式是指抽象类里定义好&lt;strong>算法的执行步骤&lt;/strong>和&lt;strong>具体算法&lt;/strong>，以及可能发生变化的算法定义为&lt;strong>抽象方法&lt;/strong>。不同的子类继承该抽象类，并实现父类的抽象方法。&lt;/p>
&lt;p>优势：&lt;/p>
&lt;ul>
&lt;li>不变的算法被继承复用：不变的部分高度封装、复用。&lt;/li>
&lt;li>变化的算法子类继承并具体实现：变化的部分子类只需要具体实现抽象的部分即可，方便扩展，且可无限扩展。&lt;/li>
&lt;/ul></description></item><item><title>Go 代码检查工具 golangci-lint</title><link>https://wnanbei.github.io/post/go-%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7-golangci-lint/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7-golangci-lint/</guid><description>&lt;p>&lt;code>golangci-lint&lt;/code> 是一个代码检查工具的集合，聚集了多种 Go 代码检查工具，如 &lt;code>golint&lt;/code>、&lt;code>go vet&lt;/code> 等。&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>运行速度快&lt;/li>
&lt;li>可以集成到 vscode、goland 等开发工具中&lt;/li>
&lt;li>包含了非常多种代码检查器&lt;/li>
&lt;li>可以集成到 CI 中&lt;/li>
&lt;/ul>
&lt;p>这是包含的代码检查器列表：&lt;a class="link" href="https://golangci-lint.run/usage/linters/" target="_blank" rel="noopener"
>Linters&lt;/a>&lt;/p></description></item><item><title>Go 令牌桶限流器 golang.org/x/time/rate</title><link>https://wnanbei.github.io/post/go-%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E5%99%A8-golang.org/x/time/rate/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E5%99%A8-golang.org/x/time/rate/</guid><description>&lt;p>&lt;code>golang.org/x/time/rate&lt;/code> 提供了一个使用令牌桶 &lt;code>Token Bucket&lt;/code> 算法实现的限流器。&lt;/p></description></item><item><title>CSP 并发编程模型</title><link>https://wnanbei.github.io/post/csp-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/csp-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>&lt;code>CSP - Communicating Sequential Process&lt;/code>，通信顺序进程，是一种并发编程模型，用于描述两个独立的并发实体通过共享的通讯 channel 进行通信。&lt;/p></description></item><item><title>Go GC 垃圾回收</title><link>https://wnanbei.github.io/post/go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>&lt;p>垃圾回收 - &lt;code>GC&lt;/code> - &lt;code>garbage collection&lt;/code> 是自动内存管理的一种形式。通常由垃圾收集器收集并适时回收或重用不再被对象占用的内存。&lt;/p>
&lt;p>垃圾回收作为内存管理的一部分，包含 3 个重要的功能：&lt;/p>
&lt;ul>
&lt;li>如何分配和管理新对象。&lt;/li>
&lt;li>如何识别正在使用中的对象。&lt;/li>
&lt;li>如何清除不再使用的对象。&lt;/li>
&lt;/ul></description></item><item><title>Go Gorm CRUD</title><link>https://wnanbei.github.io/post/go-gorm-crud/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gorm-crud/</guid><description>&lt;p>Gorm 常见 CRUD 操作 API。&lt;/p></description></item><item><title>Go Gorm 数据库连接与模型</title><link>https://wnanbei.github.io/post/go-gorm-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gorm-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>对开发者友好的 Go ORM 库，v2 版本。&lt;/p></description></item><item><title>Go 字符串处理 strings</title><link>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86-strings/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86-strings/</guid><description>&lt;p>作为一种基本数据结构，每种语言都有一些对于字符串的预定义处理函数。Go 中使用 &lt;code>strings&lt;/code> 包来完成对字符串的主要操作。&lt;/p></description></item><item><title>Go 字符串类型转换 strconv</title><link>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-strconv/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-strconv/</guid><description>&lt;p>Strconv 包含了一些变量用于获取程序运行的操作系统平台下 int 类型所占的位数，如：&lt;code>strconv.IntSize&lt;/code>。&lt;/p>
&lt;p>任何类型 &lt;strong>T&lt;/strong> 转换为字符串总是成功的。&lt;/p></description></item><item><title>Go 标准库 io</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-io/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-io/</guid><description/></item><item><title>Go 标准库 ioutil</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-ioutil/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-ioutil/</guid><description/></item><item><title>Go 第三方库 gjson</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-gjson/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-gjson/</guid><description>&lt;p>这是一个主要功能为从 Json 中提取值的包。&lt;/p></description></item><item><title>Go 第三方库 grpc</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-grpc/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-grpc/</guid><description>&lt;p>&lt;code>gRPC&lt;/code> 是一个高性能、通用的开源 RPC 框架，由 Google 主要面向移动应用开发并基于 &lt;code>HTTP/2&lt;/code> 协议标准而设计，基于 &lt;code>ProtoBuf(Protocol Buffers)&lt;/code> 序列化协议开发，且支持众多开发语言。&lt;/p>
&lt;p>使用 gRPC， 可以在一个 &lt;code>.proto&lt;/code> 文件中定义服务，并使用任何支持它的语言去实现客户端和服务端。使用 gRPC定义一个服务，指定一个可以远程调用的带有参数和返回类型的的方法，客户端可以像调用本地方法一样直接调用服务端的方法。gRPC 解决了不同语言及环境间通信的复杂性。&lt;/p>
&lt;p>使用 &lt;code>protocol buffers&lt;/code> 还能获得其他好处：&lt;/p>
&lt;ul>
&lt;li>包括高效的序列号&lt;/li>
&lt;li>简单的 IDL&lt;/li>
&lt;li>容易进行接口更新。&lt;/li>
&lt;/ul>
&lt;p>使用 gRPC 能更容易编写跨语言的分布式代码。&lt;/p></description></item><item><title>Go 第三方库 viper</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-viper/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-viper/</guid><description>&lt;p>此包用于读取各类配置文件。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get github.com/spf13/viper
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Viper&lt;/code> 支持的配置文件后缀名如下：&lt;/p>
&lt;p>&lt;code>json&lt;/code>, &lt;code>toml&lt;/code>, &lt;code>yaml&lt;/code>, &lt;code>yml&lt;/code>, &lt;code>properties&lt;/code>, &lt;code>props&lt;/code>, &lt;code>prop&lt;/code>, &lt;code>hcl&lt;/code>, &lt;code>dotenv&lt;/code>, &lt;code>env&lt;/code>, &lt;code>ini&lt;/code>&lt;/p></description></item><item><title>Go 第三方库 zap</title><link>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-zap/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-zap/</guid><description>&lt;p>此包用于结构化记录日志。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get -u go.uber.org/zap
&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;go.uber.org/zap&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>性能高，与 Zerolog 同一水平。&lt;/li>
&lt;/ul></description></item><item><title>Go GMP 调度器</title><link>https://wnanbei.github.io/post/go-gmp-%E8%B0%83%E5%BA%A6%E5%99%A8/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-gmp-%E8%B0%83%E5%BA%A6%E5%99%A8/</guid><description>&lt;p>GMP Scheduler 是 Runtime 中几乎最重要的组件，它的作用是：&lt;/p>
&lt;blockquote>
&lt;p>For scheduling goroutines onto kernel threads.&lt;/p>
&lt;/blockquote>
&lt;p>GMP Scheduler 的核心思想是：&lt;/p>
&lt;ol>
&lt;li>重用线程。&lt;/li>
&lt;li>限制同时运行（不包含阻塞）的线程数为 N，N 为 CPU 逻辑核心数。&lt;/li>
&lt;/ol>
&lt;p>Go scheduler 的职责就是将所有处于 runnable 的 Goroutines 均匀分布到在 P 上运行的 M，利用多核并行，实现更强大的并发。&lt;/p></description></item><item><title>Go 互斥锁 sync.Mutex</title><link>https://wnanbei.github.io/post/go-%E4%BA%92%E6%96%A5%E9%94%81-sync.mutex/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%BA%92%E6%96%A5%E9%94%81-sync.mutex/</guid><description>&lt;p>&lt;code>sync.Mutex&lt;/code> 是一个互斥锁，默认为零值时为开锁状态。&lt;/p></description></item><item><title>Go 原子操作 atomic</title><link>https://wnanbei.github.io/post/go-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-atomic/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-atomic/</guid><description>&lt;p>&lt;code>atomic&lt;/code> 包封装了系统底层的原子操作。官方建议尽量少使用此包的原子操作，尽量遵循通过通信分享内存，而不是通过分享内存来通信的原则。&lt;/p>
&lt;p>这个包的方法有以下特点：&lt;/p>
&lt;ul>
&lt;li>方法操作的都是 &lt;code>int&lt;/code> 系列类型或指针。&lt;/li>
&lt;li>操作的数据需要其地址。&lt;/li>
&lt;/ul></description></item><item><title>Go 对象池 sync.Pool</title><link>https://wnanbei.github.io/post/go-%E5%AF%B9%E8%B1%A1%E6%B1%A0-sync.pool/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%AF%B9%E8%B1%A1%E6%B1%A0-sync.pool/</guid><description>&lt;p>sync.Pool 是一个协程安全的内存池。主要用于增加临时对象的内存复用率，减少内存分配和 GC STW 的开销。、&lt;/p></description></item><item><title>Go 并发安全的 sync.Map</title><link>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84-sync.map/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84-sync.map/</guid><description>&lt;p>&lt;code>sync.Map&lt;/code> 是标准库 &lt;code>sync&lt;/code> 中实现的并发安全的 map。&lt;/p></description></item><item><title>Go 标准库 sync.WaitGroup</title><link>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-sync.waitgroup/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%A0%87%E5%87%86%E5%BA%93-sync.waitgroup/</guid><description/></item><item><title>Go 读写锁 sync.RWMutex</title><link>https://wnanbei.github.io/post/go-%E8%AF%BB%E5%86%99%E9%94%81-sync.rwmutex/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E8%AF%BB%E5%86%99%E9%94%81-sync.rwmutex/</guid><description>&lt;p>&lt;code>sync.RWMutex&lt;/code> 是一个读写锁，在读多写少的场景中，比 Mutex 的并发能力有很大的提升。&lt;/p></description></item><item><title>Gin 启动与配置</title><link>https://wnanbei.github.io/post/gin-%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>Gin 的安装、启动、配置与部分简介。&lt;/p></description></item><item><title>Gin 获取请求数据</title><link>https://wnanbei.github.io/post/gin-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</guid><description>&lt;p>Gin 获取客户端发送请求的各种路由、URL、Post 表单、header 等数据，或者将这些数据绑定到模型中。&lt;/p></description></item><item><title>Gin 设置 Middleware 中间件</title><link>https://wnanbei.github.io/post/gin-%E8%AE%BE%E7%BD%AE-middleware-%E4%B8%AD%E9%97%B4%E4%BB%B6/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%AE%BE%E7%BD%AE-middleware-%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid><description>&lt;p>Gin 设置全局 Middleware、自定义中间件用法。&lt;/p></description></item><item><title>Gin 请求与路由</title><link>https://wnanbei.github.io/post/gin-%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%B7%AF%E7%94%B1/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%B7%AF%E7%94%B1/</guid><description>&lt;p>Gin 设置请求方式与路由，包括重定向、动态路由、路由分组等。&lt;/p></description></item><item><title>Gin 返回响应方式</title><link>https://wnanbei.github.io/post/gin-%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E6%96%B9%E5%BC%8F/</guid><description>&lt;p>Gin 框架在 &lt;code>*gin.Context&lt;/code> 实例中封装了所有处理请求并响应客户端的方法。&lt;/p>
&lt;p>Gin 支持多种响应方法，包括我们常见的 &lt;code>String&lt;/code>、&lt;code>HTML&lt;/code>、&lt;code>JSON&lt;/code>、&lt;code>XML&lt;/code>、&lt;code>YAML&lt;/code>、&lt;code>JSONP&lt;/code>，也支持直接响应 &lt;code>Reader&lt;/code> 和 &lt;code>[]byte&lt;/code>，而且还支持重定向。&lt;/p></description></item><item><title>Gin 配置 Swagger 接口文档</title><link>https://wnanbei.github.io/post/gin-%E9%85%8D%E7%BD%AE-swagger-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E9%85%8D%E7%BD%AE-swagger-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid><description>&lt;p>此包用于自动化生成 API 文档。&lt;/p></description></item><item><title>Gin 高级功能</title><link>https://wnanbei.github.io/post/gin-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/gin-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</guid><description>&lt;p>Gin 提供的日志功能和部分其他功能，包括：优雅关闭或重启、提供静态文件、http2 服务推送、自定义验证器、设置和获取 Cookies、从 reader 提供数据。&lt;/p></description></item><item><title>Go 上下文 context</title><link>https://wnanbei.github.io/post/go-%E4%B8%8A%E4%B8%8B%E6%96%87-context/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E4%B8%8A%E4%B8%8B%E6%96%87-context/</guid><description>&lt;p>context 指的是上下文，以下是几种 ctx 类型:&lt;/p>
&lt;ul>
&lt;li>emptyCtx - 所有 ctx 类型的根，用 &lt;code>context.TODO()&lt;/code>，或 &lt;code>context.Background()&lt;/code> 来生成。&lt;/li>
&lt;li>valueCtx - 主要就是为了在 ctx 中嵌入上下文数据，一个简单的 k 和 v 结构，同一个 ctx 内只支持一对 kv，需要更多的 kv 的话，会形成一棵树形结构。&lt;/li>
&lt;li>cancelCtx - 用来取消程序的执行树，一般用 &lt;code>WithCancel&lt;/code>，&lt;code>WithTimeout&lt;/code>，&lt;code>WithDeadline&lt;/code> 返回的取消函数本质上都是对应了 cancelCtx。&lt;/li>
&lt;li>timerCtx - 在 cancelCtx 上包了一层，支持基于时间的 cancel。&lt;/li>
&lt;/ul></description></item><item><title>Go 反射 reflect</title><link>https://wnanbei.github.io/post/go-%E5%8F%8D%E5%B0%84-reflect/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8F%8D%E5%B0%84-reflect/</guid><description>&lt;p>反射是程序在运行期间检查其自身结构的一种方式 。&lt;/p>
&lt;p>反射三大法则：&lt;/p>
&lt;ul>
&lt;li>反射可以将&lt;code>接口类型变量&lt;/code>转换为&lt;code>反射类型对象&lt;/code>&lt;/li>
&lt;li>反射可以将&lt;code>反射类型对象&lt;/code>转换为&lt;code>接口类型变量&lt;/code>&lt;/li>
&lt;li>如果要修改&lt;code>反射类型对象&lt;/code>，其值必须是&lt;code>可写的(settable)&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Go 日志打印 fmt</title><link>https://wnanbei.github.io/post/go-%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0-fmt/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0-fmt/</guid><description>&lt;p>&lt;code>fmt&lt;/code> 是 Go 用于日志打印的库：&lt;/p>
&lt;ul>
&lt;li>模板模式: &lt;code>[name]f&lt;/code> 根据模板格式化 例如: &lt;code>Printf&lt;/code>&lt;/li>
&lt;li>换行模式: &lt;code>[name]ln&lt;/code> 输出后带换行 例如: &lt;code>Println&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Go 时间处理库 time</title><link>https://wnanbei.github.io/post/go-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%BA%93-time/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%BA%93-time/</guid><description>&lt;p>time 是 Go 用于处理时间的标准库，包括格式化、计算、修改、定时、超时等功能。&lt;/p></description></item><item><title>Go 错误处理 errors</title><link>https://wnanbei.github.io/post/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-errors/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-errors/</guid><description>&lt;p>&lt;code>errors&lt;/code> 用于增强 Go 的错误处理能力。&lt;/p></description></item><item><title>Go 系统库 os</title><link>https://wnanbei.github.io/post/go-%E7%B3%BB%E7%BB%9F%E5%BA%93-os/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%B3%BB%E7%BB%9F%E5%BA%93-os/</guid><description>&lt;p>&lt;code>os&lt;/code> 库主要用于 Go 的文件、系统相关操作。&lt;/p></description></item><item><title>Go 基础数据结构</title><link>https://wnanbei.github.io/post/go-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>&lt;p>Go 基础数据结构 &lt;code>array&lt;/code>、&lt;code>slice&lt;/code>、&lt;code>map&lt;/code> 的声明与使用。&lt;/p></description></item><item><title>Go 并发消息队列 channel</title><link>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-channel/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-channel/</guid><description>&lt;p>&lt;code>Channel&lt;/code> 实际上是类型化消息的队列，它有以下特性：&lt;/p>
&lt;ul>
&lt;li>只能传输一种类型的数据。&lt;/li>
&lt;li>所有的类型都可以用于通道，空接口 &lt;code>interface{}&lt;/code> 也可以。&lt;/li>
&lt;li>先进先出 &lt;code>FIFO&lt;/code> 的结构。&lt;/li>
&lt;li>引用类型，所以使用 &lt;code>make()&lt;/code> 函数来给它分配内存。&lt;/li>
&lt;/ul></description></item><item><title>Go 结构体 struct</title><link>https://wnanbei.github.io/post/go-%E7%BB%93%E6%9E%84%E4%BD%93-struct/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E7%BB%93%E6%9E%84%E4%BD%93-struct/</guid><description>&lt;p>Go 通过类型别名 &lt;code>alias types&lt;/code> 和结构体的形式支持用户自定义类型。&lt;/p></description></item><item><title>Go interface 接口</title><link>https://wnanbei.github.io/post/go-interface-%E6%8E%A5%E5%8F%A3/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-interface-%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>interface 的一些特性：&lt;/p>
&lt;ul>
&lt;li>类型不需要显式声明它实现了某个接口：接口被隐式地实现。&lt;/li>
&lt;li>多个类型可以实现同一个接口。&lt;/li>
&lt;li>实现某个接口的类型，除了实现接口方法外，可以有其他的方法。&lt;/li>
&lt;li>一个类型可以实现多个接口。&lt;/li>
&lt;li>接口是动态类型，可以包含一个实例的引用，该实例的类型实现了此接口。&lt;/li>
&lt;li>即使接口在类型之后才定义，二者处于不同的包中，被单独编译，只要类型实现了接口中的方法，它就实现了此接口。&lt;/li>
&lt;li>接口只能访问接口内声明的方法。&lt;/li>
&lt;/ul></description></item><item><title>Go 包管理 Package</title><link>https://wnanbei.github.io/post/go-%E5%8C%85%E7%AE%A1%E7%90%86-package/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%8C%85%E7%AE%A1%E7%90%86-package/</guid><description>&lt;p>Go 使用包结构 package 来定义模块、组织代码。&lt;/p></description></item><item><title>Go 流程控制语句</title><link>https://wnanbei.github.io/post/go-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link><pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid><description>&lt;p>Go 的流程控制语句，包括 &lt;code>if&lt;/code>、&lt;code>switch&lt;/code>、&lt;code>for&lt;/code>。&lt;/p></description></item><item><title>Go net/http client 客户端</title><link>https://wnanbei.github.io/post/go-net/http-client-%E5%AE%A2%E6%88%B7%E7%AB%AF/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-net/http-client-%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid><description>&lt;p>Go 中的&lt;code>net&lt;/code>包封装了大部分网络相关的功能，我们基本不需要借助其他库就能实现我们的爬虫需求。&lt;/p></description></item><item><title>Go 函数</title><link>https://wnanbei.github.io/post/go-%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E5%87%BD%E6%95%B0/</guid><description>&lt;p>除了 &lt;code>main()&lt;/code>、&lt;code>init()&lt;/code> 函数外，其它所有类型的函数都可以有参数与返回值。&lt;/p>
&lt;p>函数参数、返回值以及它们的类型被统称为函数签名。&lt;/p></description></item><item><title>Go 语言规范</title><link>https://wnanbei.github.io/post/go-%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://wnanbei.github.io/post/go-%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83/</guid><description>&lt;p>Go 语言规范指导性原则：&lt;/p>
&lt;ol>
&lt;li>简单性&lt;/li>
&lt;li>可读性&lt;/li>
&lt;li>生产力&lt;/li>
&lt;/ol></description></item></channel></rss>